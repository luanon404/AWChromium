// UserAgentMetadata.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom
//

package org.chromium.blink.mojom;


public final class UserAgentMetadata extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 88;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(88, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public UserAgentBrandVersion[] brandVersionList;
    public UserAgentBrandVersion[] brandFullVersionList;
    public String fullVersion;
    public String platform;
    public String platformVersion;
    public String architecture;
    public String model;
    public boolean mobile;
    public String bitness;
    public boolean wow64;
    public String formFactor;

    private UserAgentMetadata(int version) {
        super(STRUCT_SIZE, version);
    }

    public UserAgentMetadata() {
        this(0);
    }

    public static UserAgentMetadata deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static UserAgentMetadata deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static UserAgentMetadata decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        UserAgentMetadata result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new UserAgentMetadata(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.brandVersionList = new UserAgentBrandVersion[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.brandVersionList[i1] = UserAgentBrandVersion.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.brandFullVersionList = new UserAgentBrandVersion[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.brandFullVersionList[i1] = UserAgentBrandVersion.decode(decoder2);
                    }
                }
                }
                {
                    
                result.fullVersion = decoder0.readString(24, false);
                }
                {
                    
                result.platform = decoder0.readString(32, false);
                }
                {
                    
                result.platformVersion = decoder0.readString(40, false);
                }
                {
                    
                result.architecture = decoder0.readString(48, false);
                }
                {
                    
                result.model = decoder0.readString(56, false);
                }
                {
                    
                result.mobile = decoder0.readBoolean(64, 0);
                }
                {
                    
                result.wow64 = decoder0.readBoolean(64, 1);
                }
                {
                    
                result.bitness = decoder0.readString(72, false);
                }
                {
                    
                result.formFactor = decoder0.readString(80, false);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        if (this.brandVersionList == null) {
            encoder0.encodeNullPointer(8, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.brandVersionList.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.brandVersionList.length; ++i0) {
                
                encoder1.encode(this.brandVersionList[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.brandFullVersionList == null) {
            encoder0.encodeNullPointer(16, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.brandFullVersionList.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.brandFullVersionList.length; ++i0) {
                
                encoder1.encode(this.brandFullVersionList[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.fullVersion, 24, false);
        
        encoder0.encode(this.platform, 32, false);
        
        encoder0.encode(this.platformVersion, 40, false);
        
        encoder0.encode(this.architecture, 48, false);
        
        encoder0.encode(this.model, 56, false);
        
        encoder0.encode(this.mobile, 64, 0);
        
        encoder0.encode(this.wow64, 64, 1);
        
        encoder0.encode(this.bitness, 72, false);
        
        encoder0.encode(this.formFactor, 80, false);
    }
}