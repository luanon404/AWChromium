// DevicePostureProvider_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/device/public/mojom/device_posture_provider.mojom
//

package org.chromium.device.mojom;

import androidx.annotation.IntDef;


class DevicePostureProvider_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<DevicePostureProvider, DevicePostureProvider.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<DevicePostureProvider, DevicePostureProvider.Proxy>() {

        @Override
        public String getName() {
            return "device.mojom.DevicePostureProvider";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, DevicePostureProvider impl) {
            return new Stub(core, impl);
        }

        @Override
        public DevicePostureProvider[] buildArray(int size) {
          return new DevicePostureProvider[size];
        }
    };


    private static final int ADD_LISTENER_AND_GET_CURRENT_POSTURE_ORDINAL = 0;

    private static final int ADD_LISTENER_AND_GET_CURRENT_VIEWPORT_SEGMENTS_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements DevicePostureProvider.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void addListenerAndGetCurrentPosture(
DevicePostureClient client, 
AddListenerAndGetCurrentPosture_Response callback) {

            DevicePostureProviderAddListenerAndGetCurrentPostureParams _message = new DevicePostureProviderAddListenerAndGetCurrentPostureParams();

            _message.client = client;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ADD_LISTENER_AND_GET_CURRENT_POSTURE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new DevicePostureProviderAddListenerAndGetCurrentPostureResponseParamsForwardToCallback(callback));

        }


        @Override
        public void addListenerAndGetCurrentViewportSegments(
DeviceViewportSegmentsClient client, 
AddListenerAndGetCurrentViewportSegments_Response callback) {

            DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams _message = new DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams();

            _message.client = client;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ADD_LISTENER_AND_GET_CURRENT_VIEWPORT_SEGMENTS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<DevicePostureProvider> {

        Stub(org.chromium.mojo.system.Core core, DevicePostureProvider impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                DevicePostureProvider_Internal.MANAGER, messageWithHeader);






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), DevicePostureProvider_Internal.MANAGER, messageWithHeader, receiver);







                    case ADD_LISTENER_AND_GET_CURRENT_POSTURE_ORDINAL: {

                        DevicePostureProviderAddListenerAndGetCurrentPostureParams data =
                                DevicePostureProviderAddListenerAndGetCurrentPostureParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addListenerAndGetCurrentPosture(data.client, new DevicePostureProviderAddListenerAndGetCurrentPostureResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ADD_LISTENER_AND_GET_CURRENT_VIEWPORT_SEGMENTS_ORDINAL: {

                        DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams data =
                                DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addListenerAndGetCurrentViewportSegments(data.client, new DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class DevicePostureProviderAddListenerAndGetCurrentPostureParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DevicePostureClient client;

        private DevicePostureProviderAddListenerAndGetCurrentPostureParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public DevicePostureProviderAddListenerAndGetCurrentPostureParams() {
            this(0);
        }

        public static DevicePostureProviderAddListenerAndGetCurrentPostureParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static DevicePostureProviderAddListenerAndGetCurrentPostureParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static DevicePostureProviderAddListenerAndGetCurrentPostureParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            DevicePostureProviderAddListenerAndGetCurrentPostureParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new DevicePostureProviderAddListenerAndGetCurrentPostureParams(elementsOrVersion);
                    {
                        
                    result.client = decoder0.readServiceInterface(8, false, DevicePostureClient.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.client, 8, false, DevicePostureClient.MANAGER);
        }
    }



    
    static final class DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int posture;

        private DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams() {
            this(0);
        }

        public static DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams(elementsOrVersion);
                    {
                        
                    result.posture = decoder0.readInt(8);
                        DevicePostureType.validate(result.posture);
                        result.posture = DevicePostureType.toKnownValue(result.posture);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.posture, 8);
        }
    }

    static class DevicePostureProviderAddListenerAndGetCurrentPostureResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final DevicePostureProvider.AddListenerAndGetCurrentPosture_Response mCallback;

        DevicePostureProviderAddListenerAndGetCurrentPostureResponseParamsForwardToCallback(DevicePostureProvider.AddListenerAndGetCurrentPosture_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ADD_LISTENER_AND_GET_CURRENT_POSTURE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams response = DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.posture);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class DevicePostureProviderAddListenerAndGetCurrentPostureResponseParamsProxyToResponder implements DevicePostureProvider.AddListenerAndGetCurrentPosture_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        DevicePostureProviderAddListenerAndGetCurrentPostureResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer posture) {
            DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams _response = new DevicePostureProviderAddListenerAndGetCurrentPostureResponseParams();

            _response.posture = posture;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ADD_LISTENER_AND_GET_CURRENT_POSTURE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DeviceViewportSegmentsClient client;

        private DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams() {
            this(0);
        }

        public static DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsParams(elementsOrVersion);
                    {
                        
                    result.client = decoder0.readServiceInterface(8, false, DeviceViewportSegmentsClient.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.client, 8, false, DeviceViewportSegmentsClient.MANAGER);
        }
    }



    
    static final class DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect[] segments;

        private DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams() {
            this(0);
        }

        public static DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.segments = new org.chromium.gfx.mojom.Rect[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.segments[i1] = org.chromium.gfx.mojom.Rect.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.segments == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.segments.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.segments.length; ++i0) {
                    
                    encoder1.encode(this.segments[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final DevicePostureProvider.AddListenerAndGetCurrentViewportSegments_Response mCallback;

        DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParamsForwardToCallback(DevicePostureProvider.AddListenerAndGetCurrentViewportSegments_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ADD_LISTENER_AND_GET_CURRENT_VIEWPORT_SEGMENTS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams response = DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.segments);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParamsProxyToResponder implements DevicePostureProvider.AddListenerAndGetCurrentViewportSegments_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.gfx.mojom.Rect[] segments) {
            DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams _response = new DevicePostureProviderAddListenerAndGetCurrentViewportSegmentsResponseParams();

            _response.segments = segments;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ADD_LISTENER_AND_GET_CURRENT_VIEWPORT_SEGMENTS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
