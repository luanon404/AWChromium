// CtLogInfo.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/ct_log_info.mojom
//

package org.chromium.network.mojom;

public final class CtLogInfo extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 72;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(72, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public String id;
    public String publicKey;
    public String name;
    public boolean operatedByGoogle;
    public org.chromium.mojo_base.mojom.Time disqualifiedAt;
    public org.chromium.mojo_base.mojom.TimeDelta mmd;
    public String currentOperator;
    public PreviousOperatorEntry[] previousOperators;

    private CtLogInfo(int version) {
        super(STRUCT_SIZE, version);
        this.operatedByGoogle = (boolean) false;
    }

    public CtLogInfo() {
        this(0);
    }

    public static CtLogInfo deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static CtLogInfo deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static CtLogInfo decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        CtLogInfo result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new CtLogInfo(elementsOrVersion);
            {

                result.id = decoder0.readString(8, false);
            }
            {

                result.publicKey = decoder0.readString(16, false);
            }
            {

                result.name = decoder0.readString(24, false);
            }
            {

                result.operatedByGoogle = decoder0.readBoolean(32, 0);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                result.disqualifiedAt = org.chromium.mojo_base.mojom.Time.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                result.mmd = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
            }
            {

                result.currentOperator = decoder0.readString(56, false);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.previousOperators = new PreviousOperatorEntry[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.previousOperators[i1] = PreviousOperatorEntry.decode(decoder2);
                    }
                }
            }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

        encoder0.encode(this.id, 8, false);

        encoder0.encode(this.publicKey, 16, false);

        encoder0.encode(this.name, 24, false);

        encoder0.encode(this.operatedByGoogle, 32, 0);

        encoder0.encode(this.disqualifiedAt, 40, true);

        encoder0.encode(this.mmd, 48, false);

        encoder0.encode(this.currentOperator, 56, false);

        if (this.previousOperators == null) {
            encoder0.encodeNullPointer(64, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.previousOperators.length, 64, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.previousOperators.length; ++i0) {

                encoder1.encode(this.previousOperators[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
    }
}