// SharedImageCapabilities.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     gpu/ipc/common/shared_image_capabilities.mojom
//

package org.chromium.gpu.mojom;

import androidx.annotation.IntDef;


public final class SharedImageCapabilities extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 16;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public boolean supportsScanoutSharedImages;
    public boolean supportsLuminanceSharedImages;
    public boolean supportsR16SharedImages;
    public boolean disableR8SharedImages;
    public boolean sharedImageD3d;
    public boolean sharedImageSwapChain;

    private SharedImageCapabilities(int version) {
        super(STRUCT_SIZE, version);
    }

    public SharedImageCapabilities() {
        this(0);
    }

    public static SharedImageCapabilities deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static SharedImageCapabilities deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static SharedImageCapabilities decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        SharedImageCapabilities result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new SharedImageCapabilities(elementsOrVersion);
                {
                    
                result.supportsScanoutSharedImages = decoder0.readBoolean(8, 0);
                }
                {
                    
                result.supportsLuminanceSharedImages = decoder0.readBoolean(8, 1);
                }
                {
                    
                result.supportsR16SharedImages = decoder0.readBoolean(8, 2);
                }
                {
                    
                result.disableR8SharedImages = decoder0.readBoolean(8, 3);
                }
                {
                    
                result.sharedImageD3d = decoder0.readBoolean(8, 4);
                }
                {
                    
                result.sharedImageSwapChain = decoder0.readBoolean(8, 5);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.supportsScanoutSharedImages, 8, 0);
        
        encoder0.encode(this.supportsLuminanceSharedImages, 8, 1);
        
        encoder0.encode(this.supportsR16SharedImages, 8, 2);
        
        encoder0.encode(this.disableR8SharedImages, 8, 3);
        
        encoder0.encode(this.sharedImageD3d, 8, 4);
        
        encoder0.encode(this.sharedImageSwapChain, 8, 5);
    }
}