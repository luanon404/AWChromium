// AudioStreamFactory_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/audio_stream_factory.mojom
//

package org.chromium.media.mojom;

class AudioStreamFactory_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<AudioStreamFactory, AudioStreamFactory.Proxy> MANAGER = new org.chromium.mojo.bindings.Interface.Manager<AudioStreamFactory, AudioStreamFactory.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.AudioStreamFactory";
        }

        @Override
        public int getVersion() {
            return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, AudioStreamFactory impl) {
            return new Stub(core, impl);
        }

        @Override
        public AudioStreamFactory[] buildArray(int size) {
            return new AudioStreamFactory[size];
        }
    };


    private static final int CREATE_INPUT_STREAM_ORDINAL = 0;

    private static final int ASSOCIATE_INPUT_AND_OUTPUT_FOR_AEC_ORDINAL = 1;

    private static final int CREATE_OUTPUT_STREAM_ORDINAL = 2;

    private static final int BIND_MUTER_ORDINAL = 3;

    private static final int CREATE_LOOPBACK_STREAM_ORDINAL = 4;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements AudioStreamFactory.Proxy {

        Proxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createInputStream(org.chromium.mojo.bindings.InterfaceRequest<AudioInputStream> stream, AudioInputStreamClient client, AudioInputStreamObserver observer, AudioLog log, String deviceId, AudioParameters params, int sharedMemoryCount, boolean enableAgc, org.chromium.mojo_base.mojom.ReadOnlySharedMemoryRegion keyPressCountBuffer, AudioProcessingConfig processingConfig, CreateInputStream_Response callback) {

            AudioStreamFactoryCreateInputStreamParams _message = new AudioStreamFactoryCreateInputStreamParams();

            _message.stream = stream;

            _message.client = client;

            _message.observer = observer;

            _message.log = log;

            _message.deviceId = deviceId;

            _message.params = params;

            _message.sharedMemoryCount = sharedMemoryCount;

            _message.enableAgc = enableAgc;

            _message.keyPressCountBuffer = keyPressCountBuffer;

            _message.processingConfig = processingConfig;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_INPUT_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new AudioStreamFactoryCreateInputStreamResponseParamsForwardToCallback(callback));

        }


        @Override
        public void associateInputAndOutputForAec(org.chromium.mojo_base.mojom.UnguessableToken inputStreamId, String outputDeviceId) {

            AudioStreamFactoryAssociateInputAndOutputForAecParams _message = new AudioStreamFactoryAssociateInputAndOutputForAecParams();

            _message.inputStreamId = inputStreamId;

            _message.outputDeviceId = outputDeviceId;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(ASSOCIATE_INPUT_AND_OUTPUT_FOR_AEC_ORDINAL)));

        }


        @Override
        public void createOutputStream(org.chromium.mojo.bindings.InterfaceRequest<AudioOutputStream> stream, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported observer, AudioLog log, String deviceId, AudioParameters params, org.chromium.mojo_base.mojom.UnguessableToken groupId, CreateOutputStream_Response callback) {

            AudioStreamFactoryCreateOutputStreamParams _message = new AudioStreamFactoryCreateOutputStreamParams();

            _message.stream = stream;

            _message.observer = observer;

            _message.log = log;

            _message.deviceId = deviceId;

            _message.params = params;

            _message.groupId = groupId;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_OUTPUT_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new AudioStreamFactoryCreateOutputStreamResponseParamsForwardToCallback(callback));

        }


        @Override
        public void bindMuter(org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported receiver, org.chromium.mojo_base.mojom.UnguessableToken groupId) {

            AudioStreamFactoryBindMuterParams _message = new AudioStreamFactoryBindMuterParams();

            _message.receiver = receiver;

            _message.groupId = groupId;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(BIND_MUTER_ORDINAL)));

        }


        @Override
        public void createLoopbackStream(org.chromium.mojo.bindings.InterfaceRequest<AudioInputStream> receiver, AudioInputStreamClient client, AudioInputStreamObserver observer, AudioParameters params, int sharedMemoryCount, org.chromium.mojo_base.mojom.UnguessableToken groupId, CreateLoopbackStream_Response callback) {

            AudioStreamFactoryCreateLoopbackStreamParams _message = new AudioStreamFactoryCreateLoopbackStreamParams();

            _message.receiver = receiver;

            _message.client = client;

            _message.observer = observer;

            _message.params = params;

            _message.sharedMemoryCount = sharedMemoryCount;

            _message.groupId = groupId;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_LOOPBACK_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new AudioStreamFactoryCreateLoopbackStreamResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<AudioStreamFactory> {

        Stub(org.chromium.mojo.system.Core core, AudioStreamFactory impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(AudioStreamFactory_Internal.MANAGER, messageWithHeader);


                    case ASSOCIATE_INPUT_AND_OUTPUT_FOR_AEC_ORDINAL: {

                        AudioStreamFactoryAssociateInputAndOutputForAecParams data = AudioStreamFactoryAssociateInputAndOutputForAecParams.deserialize(messageWithHeader.getPayload());

                        getImpl().associateInputAndOutputForAec(data.inputStreamId, data.outputDeviceId);
                        return true;
                    }


                    case BIND_MUTER_ORDINAL: {

                        AudioStreamFactoryBindMuterParams data = AudioStreamFactoryBindMuterParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bindMuter(data.receiver, data.groupId);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(getCore(), AudioStreamFactory_Internal.MANAGER, messageWithHeader, receiver);


                    case CREATE_INPUT_STREAM_ORDINAL: {

                        AudioStreamFactoryCreateInputStreamParams data = AudioStreamFactoryCreateInputStreamParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createInputStream(data.stream, data.client, data.observer, data.log, data.deviceId, data.params, data.sharedMemoryCount, data.enableAgc, data.keyPressCountBuffer, data.processingConfig, new AudioStreamFactoryCreateInputStreamResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CREATE_OUTPUT_STREAM_ORDINAL: {

                        AudioStreamFactoryCreateOutputStreamParams data = AudioStreamFactoryCreateOutputStreamParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createOutputStream(data.stream, data.observer, data.log, data.deviceId, data.params, data.groupId, new AudioStreamFactoryCreateOutputStreamResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CREATE_LOOPBACK_STREAM_ORDINAL: {

                        AudioStreamFactoryCreateLoopbackStreamParams data = AudioStreamFactoryCreateLoopbackStreamParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createLoopbackStream(data.receiver, data.client, data.observer, data.params, data.sharedMemoryCount, data.groupId, new AudioStreamFactoryCreateLoopbackStreamResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }
    }


    static final class AudioStreamFactoryCreateInputStreamParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 80;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(80, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<AudioInputStream> stream;
        public AudioInputStreamClient client;
        public AudioInputStreamObserver observer;
        public AudioLog log;
        public String deviceId;
        public AudioParameters params;
        public int sharedMemoryCount;
        public boolean enableAgc;
        public org.chromium.mojo_base.mojom.ReadOnlySharedMemoryRegion keyPressCountBuffer;
        public AudioProcessingConfig processingConfig;

        private AudioStreamFactoryCreateInputStreamParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AudioStreamFactoryCreateInputStreamParams() {
            this(0);
        }

        public static AudioStreamFactoryCreateInputStreamParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AudioStreamFactoryCreateInputStreamParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AudioStreamFactoryCreateInputStreamParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AudioStreamFactoryCreateInputStreamParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AudioStreamFactoryCreateInputStreamParams(elementsOrVersion);
                {

                    result.stream = decoder0.readInterfaceRequest(8, false);
                }
                {

                    result.client = decoder0.readServiceInterface(12, false, AudioInputStreamClient.MANAGER);
                }
                {

                    result.observer = decoder0.readServiceInterface(20, true, AudioInputStreamObserver.MANAGER);
                }
                {

                    result.log = decoder0.readServiceInterface(28, true, AudioLog.MANAGER);
                }
                {

                    result.sharedMemoryCount = decoder0.readInt(36);
                }
                {

                    result.deviceId = decoder0.readString(40, false);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                    result.params = AudioParameters.decode(decoder1);
                }
                {

                    result.enableAgc = decoder0.readBoolean(56, 0);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, true);
                    result.keyPressCountBuffer = org.chromium.mojo_base.mojom.ReadOnlySharedMemoryRegion.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, true);
                    result.processingConfig = AudioProcessingConfig.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.stream, 8, false);

            encoder0.encode(this.client, 12, false, AudioInputStreamClient.MANAGER);

            encoder0.encode(this.observer, 20, true, AudioInputStreamObserver.MANAGER);

            encoder0.encode(this.log, 28, true, AudioLog.MANAGER);

            encoder0.encode(this.sharedMemoryCount, 36);

            encoder0.encode(this.deviceId, 40, false);

            encoder0.encode(this.params, 48, false);

            encoder0.encode(this.enableAgc, 56, 0);

            encoder0.encode(this.keyPressCountBuffer, 64, true);

            encoder0.encode(this.processingConfig, 72, true);
        }
    }


    static final class AudioStreamFactoryCreateInputStreamResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ReadOnlyAudioDataPipe dataPipe;
        public boolean initiallyMuted;
        public org.chromium.mojo_base.mojom.UnguessableToken streamId;

        private AudioStreamFactoryCreateInputStreamResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AudioStreamFactoryCreateInputStreamResponseParams() {
            this(0);
        }

        public static AudioStreamFactoryCreateInputStreamResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AudioStreamFactoryCreateInputStreamResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AudioStreamFactoryCreateInputStreamResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AudioStreamFactoryCreateInputStreamResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AudioStreamFactoryCreateInputStreamResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.dataPipe = ReadOnlyAudioDataPipe.decode(decoder1);
                }
                {

                    result.initiallyMuted = decoder0.readBoolean(16, 0);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.streamId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.dataPipe, 8, true);

            encoder0.encode(this.initiallyMuted, 16, 0);

            encoder0.encode(this.streamId, 24, true);
        }
    }

    static class AudioStreamFactoryCreateInputStreamResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final AudioStreamFactory.CreateInputStream_Response mCallback;

        AudioStreamFactoryCreateInputStreamResponseParamsForwardToCallback(AudioStreamFactory.CreateInputStream_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_INPUT_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                AudioStreamFactoryCreateInputStreamResponseParams response = AudioStreamFactoryCreateInputStreamResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.dataPipe, response.initiallyMuted, response.streamId);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class AudioStreamFactoryCreateInputStreamResponseParamsProxyToResponder implements AudioStreamFactory.CreateInputStream_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        AudioStreamFactoryCreateInputStreamResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(ReadOnlyAudioDataPipe dataPipe, Boolean initiallyMuted, org.chromium.mojo_base.mojom.UnguessableToken streamId) {
            AudioStreamFactoryCreateInputStreamResponseParams _response = new AudioStreamFactoryCreateInputStreamResponseParams();

            _response.dataPipe = dataPipe;

            _response.initiallyMuted = initiallyMuted;

            _response.streamId = streamId;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CREATE_INPUT_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class AudioStreamFactoryAssociateInputAndOutputForAecParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken inputStreamId;
        public String outputDeviceId;

        private AudioStreamFactoryAssociateInputAndOutputForAecParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AudioStreamFactoryAssociateInputAndOutputForAecParams() {
            this(0);
        }

        public static AudioStreamFactoryAssociateInputAndOutputForAecParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AudioStreamFactoryAssociateInputAndOutputForAecParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AudioStreamFactoryAssociateInputAndOutputForAecParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AudioStreamFactoryAssociateInputAndOutputForAecParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AudioStreamFactoryAssociateInputAndOutputForAecParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.inputStreamId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }
                {

                    result.outputDeviceId = decoder0.readString(16, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.inputStreamId, 8, false);

            encoder0.encode(this.outputDeviceId, 16, false);
        }
    }


    static final class AudioStreamFactoryCreateOutputStreamParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<AudioOutputStream> stream;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported observer;
        public AudioLog log;
        public String deviceId;
        public AudioParameters params;
        public org.chromium.mojo_base.mojom.UnguessableToken groupId;

        private AudioStreamFactoryCreateOutputStreamParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AudioStreamFactoryCreateOutputStreamParams() {
            this(0);
        }

        public static AudioStreamFactoryCreateOutputStreamParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AudioStreamFactoryCreateOutputStreamParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AudioStreamFactoryCreateOutputStreamParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AudioStreamFactoryCreateOutputStreamParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AudioStreamFactoryCreateOutputStreamParams(elementsOrVersion);
                {

                    result.stream = decoder0.readInterfaceRequest(8, false);
                }
                {

                    result.observer = decoder0.readAssociatedServiceInterfaceNotSupported(12, true);
                }
                {

                    result.log = decoder0.readServiceInterface(20, true, AudioLog.MANAGER);
                }
                {

                    result.deviceId = decoder0.readString(32, false);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    result.params = AudioParameters.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                    result.groupId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.stream, 8, false);

            encoder0.encode(this.observer, 12, true);

            encoder0.encode(this.log, 20, true, AudioLog.MANAGER);

            encoder0.encode(this.deviceId, 32, false);

            encoder0.encode(this.params, 40, false);

            encoder0.encode(this.groupId, 48, false);
        }
    }


    static final class AudioStreamFactoryCreateOutputStreamResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ReadWriteAudioDataPipe dataPipe;

        private AudioStreamFactoryCreateOutputStreamResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AudioStreamFactoryCreateOutputStreamResponseParams() {
            this(0);
        }

        public static AudioStreamFactoryCreateOutputStreamResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AudioStreamFactoryCreateOutputStreamResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AudioStreamFactoryCreateOutputStreamResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AudioStreamFactoryCreateOutputStreamResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AudioStreamFactoryCreateOutputStreamResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.dataPipe = ReadWriteAudioDataPipe.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.dataPipe, 8, true);
        }
    }

    static class AudioStreamFactoryCreateOutputStreamResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final AudioStreamFactory.CreateOutputStream_Response mCallback;

        AudioStreamFactoryCreateOutputStreamResponseParamsForwardToCallback(AudioStreamFactory.CreateOutputStream_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_OUTPUT_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                AudioStreamFactoryCreateOutputStreamResponseParams response = AudioStreamFactoryCreateOutputStreamResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.dataPipe);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class AudioStreamFactoryCreateOutputStreamResponseParamsProxyToResponder implements AudioStreamFactory.CreateOutputStream_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        AudioStreamFactoryCreateOutputStreamResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(ReadWriteAudioDataPipe dataPipe) {
            AudioStreamFactoryCreateOutputStreamResponseParams _response = new AudioStreamFactoryCreateOutputStreamResponseParams();

            _response.dataPipe = dataPipe;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CREATE_OUTPUT_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class AudioStreamFactoryBindMuterParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported receiver;
        public org.chromium.mojo_base.mojom.UnguessableToken groupId;

        private AudioStreamFactoryBindMuterParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AudioStreamFactoryBindMuterParams() {
            this(0);
        }

        public static AudioStreamFactoryBindMuterParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AudioStreamFactoryBindMuterParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AudioStreamFactoryBindMuterParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AudioStreamFactoryBindMuterParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AudioStreamFactoryBindMuterParams(elementsOrVersion);
                {

                    result.receiver = decoder0.readAssociatedInterfaceRequestNotSupported(8, false);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.groupId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.receiver, 8, false);

            encoder0.encode(this.groupId, 16, false);
        }
    }


    static final class AudioStreamFactoryCreateLoopbackStreamParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<AudioInputStream> receiver;
        public AudioInputStreamClient client;
        public AudioInputStreamObserver observer;
        public AudioParameters params;
        public int sharedMemoryCount;
        public org.chromium.mojo_base.mojom.UnguessableToken groupId;

        private AudioStreamFactoryCreateLoopbackStreamParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AudioStreamFactoryCreateLoopbackStreamParams() {
            this(0);
        }

        public static AudioStreamFactoryCreateLoopbackStreamParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AudioStreamFactoryCreateLoopbackStreamParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AudioStreamFactoryCreateLoopbackStreamParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AudioStreamFactoryCreateLoopbackStreamParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AudioStreamFactoryCreateLoopbackStreamParams(elementsOrVersion);
                {

                    result.receiver = decoder0.readInterfaceRequest(8, false);
                }
                {

                    result.client = decoder0.readServiceInterface(12, false, AudioInputStreamClient.MANAGER);
                }
                {

                    result.observer = decoder0.readServiceInterface(20, false, AudioInputStreamObserver.MANAGER);
                }
                {

                    result.sharedMemoryCount = decoder0.readInt(28);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.params = AudioParameters.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    result.groupId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.receiver, 8, false);

            encoder0.encode(this.client, 12, false, AudioInputStreamClient.MANAGER);

            encoder0.encode(this.observer, 20, false, AudioInputStreamObserver.MANAGER);

            encoder0.encode(this.sharedMemoryCount, 28);

            encoder0.encode(this.params, 32, false);

            encoder0.encode(this.groupId, 40, false);
        }
    }


    static final class AudioStreamFactoryCreateLoopbackStreamResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ReadOnlyAudioDataPipe dataPipe;

        private AudioStreamFactoryCreateLoopbackStreamResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AudioStreamFactoryCreateLoopbackStreamResponseParams() {
            this(0);
        }

        public static AudioStreamFactoryCreateLoopbackStreamResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AudioStreamFactoryCreateLoopbackStreamResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AudioStreamFactoryCreateLoopbackStreamResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AudioStreamFactoryCreateLoopbackStreamResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AudioStreamFactoryCreateLoopbackStreamResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.dataPipe = ReadOnlyAudioDataPipe.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.dataPipe, 8, true);
        }
    }

    static class AudioStreamFactoryCreateLoopbackStreamResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final AudioStreamFactory.CreateLoopbackStream_Response mCallback;

        AudioStreamFactoryCreateLoopbackStreamResponseParamsForwardToCallback(AudioStreamFactory.CreateLoopbackStream_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_LOOPBACK_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                AudioStreamFactoryCreateLoopbackStreamResponseParams response = AudioStreamFactoryCreateLoopbackStreamResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.dataPipe);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class AudioStreamFactoryCreateLoopbackStreamResponseParamsProxyToResponder implements AudioStreamFactory.CreateLoopbackStream_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        AudioStreamFactoryCreateLoopbackStreamResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(ReadOnlyAudioDataPipe dataPipe) {
            AudioStreamFactoryCreateLoopbackStreamResponseParams _response = new AudioStreamFactoryCreateLoopbackStreamResponseParams();

            _response.dataPipe = dataPipe;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CREATE_LOOPBACK_STREAM_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


}
