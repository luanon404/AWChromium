// UrlRequest.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/url_request.mojom
//

package org.chromium.network.mojom;

public final class UrlRequest extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 272;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(272, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public String method;
    public org.chromium.url.mojom.Url url;
    public SiteForCookies siteForCookies;
    public boolean updateFirstPartyUrlOnRedirect;
    public org.chromium.url.internal.mojom.Origin requestInitiator;
    public org.chromium.url.mojom.Url[] navigationRedirectChain;
    public org.chromium.url.internal.mojom.Origin isolatedWorldOrigin;
    public org.chromium.url.mojom.Url referrer;
    public int referrerPolicy;
    public HttpRequestHeaders headers;
    public HttpRequestHeaders corsExemptHeaders;
    public int loadFlags;
    public int resourceType;
    public int priority;
    public boolean priorityIncremental;
    public int corsPreflightPolicy;
    public boolean originatedFromServiceWorker;
    public boolean skipServiceWorker;
    public boolean corbDetachable;
    public int mode;
    public int credentialsMode;
    public int redirectMode;
    public String fetchIntegrity;
    public int destination;
    public UrlRequestBody requestBody;
    public boolean keepalive;
    public boolean browsingTopics;
    public boolean adAuctionHeaders;
    public boolean sharedStorageWritable;
    public boolean hasUserGesture;
    public boolean enableLoadTiming;
    public boolean enableUploadProgress;
    public boolean doNotPromptForLogin;
    public boolean isOutermostMainFrame;
    public int transitionType;
    public int previewsState;
    public boolean upgradeIfInsecure;
    public boolean isRevalidating;
    public org.chromium.mojo_base.mojom.UnguessableToken throttlingProfileId;
    public org.chromium.mojo_base.mojom.UnguessableToken fetchWindowId;
    public String devtoolsRequestId;
    public String devtoolsStackId;
    public boolean isFetchLikeApi;
    public boolean isFetchLaterApi;
    public boolean isFavicon;
    public int originalDestination;
    public TrustedUrlRequestParams trustedParams;
    public org.chromium.mojo_base.mojom.UnguessableToken recursivePrefetchToken;
    public TrustTokenParams trustTokenParams;
    public WebBundleTokenParams webBundleTokenParams;
    public int[] devtoolsAcceptedStreamTypes;
    public NetLogSource netLogCreateInfo;
    public NetLogSource netLogReferenceInfo;
    public int targetIpAddressSpace;
    public boolean hasStorageAccess;
    public int attributionReportingSupport;
    public int attributionReportingEligibility;
    public AttributionReportingRuntimeFeatures attributionReportingRuntimeFeatures;
    public org.chromium.mojo_base.mojom.UnguessableToken attributionReportingSrcToken;
    public boolean sharedDictionaryWriterEnabled;
    public String createdLocation;

    private UrlRequest(int version) {
        super(STRUCT_SIZE, version);
        this.corbDetachable = (boolean) false;
        this.attributionReportingEligibility = (int) AttributionReportingEligibility.UNSET;
        this.sharedDictionaryWriterEnabled = (boolean) false;
    }

    public UrlRequest() {
        this(0);
    }

    public static UrlRequest deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static UrlRequest deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static UrlRequest decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        UrlRequest result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new UrlRequest(elementsOrVersion);
            {

                result.method = decoder0.readString(8, false);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.url = org.chromium.url.mojom.Url.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.siteForCookies = SiteForCookies.decode(decoder1);
            }
            {

                result.updateFirstPartyUrlOnRedirect = decoder0.readBoolean(32, 0);
            }
            {

                result.priorityIncremental = decoder0.readBoolean(32, 1);
            }
            {

                result.originatedFromServiceWorker = decoder0.readBoolean(32, 2);
            }
            {

                result.skipServiceWorker = decoder0.readBoolean(32, 3);
            }
            {

                result.corbDetachable = decoder0.readBoolean(32, 4);
            }
            {

                result.keepalive = decoder0.readBoolean(32, 5);
            }
            {

                result.browsingTopics = decoder0.readBoolean(32, 6);
            }
            {

                result.adAuctionHeaders = decoder0.readBoolean(32, 7);
            }
            {

                result.sharedStorageWritable = decoder0.readBoolean(33, 0);
            }
            {

                result.hasUserGesture = decoder0.readBoolean(33, 1);
            }
            {

                result.enableLoadTiming = decoder0.readBoolean(33, 2);
            }
            {

                result.enableUploadProgress = decoder0.readBoolean(33, 3);
            }
            {

                result.doNotPromptForLogin = decoder0.readBoolean(33, 4);
            }
            {

                result.isOutermostMainFrame = decoder0.readBoolean(33, 5);
            }
            {

                result.upgradeIfInsecure = decoder0.readBoolean(33, 6);
            }
            {

                result.isRevalidating = decoder0.readBoolean(33, 7);
            }
            {

                result.isFetchLikeApi = decoder0.readBoolean(34, 0);
            }
            {

                result.isFetchLaterApi = decoder0.readBoolean(34, 1);
            }
            {

                result.isFavicon = decoder0.readBoolean(34, 2);
            }
            {

                result.hasStorageAccess = decoder0.readBoolean(34, 3);
            }
            {

                result.sharedDictionaryWriterEnabled = decoder0.readBoolean(34, 4);
            }
            {

                result.referrerPolicy = decoder0.readInt(36);
                UrlRequestReferrerPolicy.validate(result.referrerPolicy);
                result.referrerPolicy = UrlRequestReferrerPolicy.toKnownValue(result.referrerPolicy);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                result.requestInitiator = org.chromium.url.internal.mojom.Origin.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.navigationRedirectChain = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.navigationRedirectChain[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                    }
                }
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, true);
                result.isolatedWorldOrigin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                result.referrer = org.chromium.url.mojom.Url.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                result.headers = HttpRequestHeaders.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
                result.corsExemptHeaders = HttpRequestHeaders.decode(decoder1);
            }
            {

                result.loadFlags = decoder0.readInt(88);
            }
            {

                result.resourceType = decoder0.readInt(92);
            }
            {

                result.priority = decoder0.readInt(96);
                RequestPriority.validate(result.priority);
                result.priority = RequestPriority.toKnownValue(result.priority);
            }
            {

                result.corsPreflightPolicy = decoder0.readInt(100);
                CorsPreflightPolicy.validate(result.corsPreflightPolicy);
                result.corsPreflightPolicy = CorsPreflightPolicy.toKnownValue(result.corsPreflightPolicy);
            }
            {

                result.mode = decoder0.readInt(104);
                RequestMode.validate(result.mode);
                result.mode = RequestMode.toKnownValue(result.mode);
            }
            {

                result.credentialsMode = decoder0.readInt(108);
                CredentialsMode.validate(result.credentialsMode);
                result.credentialsMode = CredentialsMode.toKnownValue(result.credentialsMode);
            }
            {

                result.redirectMode = decoder0.readInt(112);
                RedirectMode.validate(result.redirectMode);
                result.redirectMode = RedirectMode.toKnownValue(result.redirectMode);
            }
            {

                result.destination = decoder0.readInt(116);
                RequestDestination.validate(result.destination);
                result.destination = RequestDestination.toKnownValue(result.destination);
            }
            {

                result.fetchIntegrity = decoder0.readString(120, false);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(128, true);
                result.requestBody = UrlRequestBody.decode(decoder1);
            }
            {

                result.transitionType = decoder0.readInt(136);
            }
            {

                result.previewsState = decoder0.readInt(140);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(144, true);
                result.throttlingProfileId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(152, true);
                result.fetchWindowId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
            }
            {

                result.devtoolsRequestId = decoder0.readString(160, true);
            }
            {

                result.devtoolsStackId = decoder0.readString(168, true);
            }
            {

                result.originalDestination = decoder0.readInt(176);
                RequestDestination.validate(result.originalDestination);
                result.originalDestination = RequestDestination.toKnownValue(result.originalDestination);
            }
            {

                result.targetIpAddressSpace = decoder0.readInt(180);
                IpAddressSpace.validate(result.targetIpAddressSpace);
                result.targetIpAddressSpace = IpAddressSpace.toKnownValue(result.targetIpAddressSpace);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(184, true);
                result.trustedParams = TrustedUrlRequestParams.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(192, true);
                result.recursivePrefetchToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(200, true);
                result.trustTokenParams = TrustTokenParams.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(208, true);
                result.webBundleTokenParams = WebBundleTokenParams.decode(decoder1);
            }
            {

                result.devtoolsAcceptedStreamTypes = decoder0.readInts(216, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                if (result.devtoolsAcceptedStreamTypes != null) {
                    for (int i1 = 0; i1 < result.devtoolsAcceptedStreamTypes.length; ++i1) {
                        SourceType.validate(result.devtoolsAcceptedStreamTypes[i1]);
                    }
                }
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(224, true);
                result.netLogCreateInfo = NetLogSource.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(232, true);
                result.netLogReferenceInfo = NetLogSource.decode(decoder1);
            }
            {

                result.attributionReportingSupport = decoder0.readInt(240);
                AttributionSupport.validate(result.attributionReportingSupport);
                result.attributionReportingSupport = AttributionSupport.toKnownValue(result.attributionReportingSupport);
            }
            {

                result.attributionReportingEligibility = decoder0.readInt(244);
                AttributionReportingEligibility.validate(result.attributionReportingEligibility);
                result.attributionReportingEligibility = AttributionReportingEligibility.toKnownValue(result.attributionReportingEligibility);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(248, false);
                result.attributionReportingRuntimeFeatures = AttributionReportingRuntimeFeatures.decode(decoder1);
            }
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(256, true);
                result.attributionReportingSrcToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
            }
            {

                result.createdLocation = decoder0.readString(264, false);
            }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

        encoder0.encode(this.method, 8, false);

        encoder0.encode(this.url, 16, false);

        encoder0.encode(this.siteForCookies, 24, false);

        encoder0.encode(this.updateFirstPartyUrlOnRedirect, 32, 0);

        encoder0.encode(this.priorityIncremental, 32, 1);

        encoder0.encode(this.originatedFromServiceWorker, 32, 2);

        encoder0.encode(this.skipServiceWorker, 32, 3);

        encoder0.encode(this.corbDetachable, 32, 4);

        encoder0.encode(this.keepalive, 32, 5);

        encoder0.encode(this.browsingTopics, 32, 6);

        encoder0.encode(this.adAuctionHeaders, 32, 7);

        encoder0.encode(this.sharedStorageWritable, 33, 0);

        encoder0.encode(this.hasUserGesture, 33, 1);

        encoder0.encode(this.enableLoadTiming, 33, 2);

        encoder0.encode(this.enableUploadProgress, 33, 3);

        encoder0.encode(this.doNotPromptForLogin, 33, 4);

        encoder0.encode(this.isOutermostMainFrame, 33, 5);

        encoder0.encode(this.upgradeIfInsecure, 33, 6);

        encoder0.encode(this.isRevalidating, 33, 7);

        encoder0.encode(this.isFetchLikeApi, 34, 0);

        encoder0.encode(this.isFetchLaterApi, 34, 1);

        encoder0.encode(this.isFavicon, 34, 2);

        encoder0.encode(this.hasStorageAccess, 34, 3);

        encoder0.encode(this.sharedDictionaryWriterEnabled, 34, 4);

        encoder0.encode(this.referrerPolicy, 36);

        encoder0.encode(this.requestInitiator, 40, true);

        if (this.navigationRedirectChain == null) {
            encoder0.encodeNullPointer(48, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.navigationRedirectChain.length, 48, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.navigationRedirectChain.length; ++i0) {

                encoder1.encode(this.navigationRedirectChain[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }

        encoder0.encode(this.isolatedWorldOrigin, 56, true);

        encoder0.encode(this.referrer, 64, false);

        encoder0.encode(this.headers, 72, false);

        encoder0.encode(this.corsExemptHeaders, 80, false);

        encoder0.encode(this.loadFlags, 88);

        encoder0.encode(this.resourceType, 92);

        encoder0.encode(this.priority, 96);

        encoder0.encode(this.corsPreflightPolicy, 100);

        encoder0.encode(this.mode, 104);

        encoder0.encode(this.credentialsMode, 108);

        encoder0.encode(this.redirectMode, 112);

        encoder0.encode(this.destination, 116);

        encoder0.encode(this.fetchIntegrity, 120, false);

        encoder0.encode(this.requestBody, 128, true);

        encoder0.encode(this.transitionType, 136);

        encoder0.encode(this.previewsState, 140);

        encoder0.encode(this.throttlingProfileId, 144, true);

        encoder0.encode(this.fetchWindowId, 152, true);

        encoder0.encode(this.devtoolsRequestId, 160, true);

        encoder0.encode(this.devtoolsStackId, 168, true);

        encoder0.encode(this.originalDestination, 176);

        encoder0.encode(this.targetIpAddressSpace, 180);

        encoder0.encode(this.trustedParams, 184, true);

        encoder0.encode(this.recursivePrefetchToken, 192, true);

        encoder0.encode(this.trustTokenParams, 200, true);

        encoder0.encode(this.webBundleTokenParams, 208, true);

        encoder0.encode(this.devtoolsAcceptedStreamTypes, 216, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);

        encoder0.encode(this.netLogCreateInfo, 224, true);

        encoder0.encode(this.netLogReferenceInfo, 232, true);

        encoder0.encode(this.attributionReportingSupport, 240);

        encoder0.encode(this.attributionReportingEligibility, 244);

        encoder0.encode(this.attributionReportingRuntimeFeatures, 248, false);

        encoder0.encode(this.attributionReportingSrcToken, 256, true);

        encoder0.encode(this.createdLocation, 264, false);
    }
}