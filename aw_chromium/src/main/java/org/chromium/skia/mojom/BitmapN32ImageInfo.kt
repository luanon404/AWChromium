// BitmapN32ImageInfo.java is auto generated by mojom_bindings_generator.py, do not edit
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     skia/public/mojom/image_info.mojom
//
package org.chromium.skia.mojom

import org.chromium.mojo.bindings.BindingsHelper
import org.chromium.mojo.bindings.DataHeader
import org.chromium.mojo.bindings.Decoder
import org.chromium.mojo.bindings.Encoder
import org.chromium.mojo.bindings.Message
import org.chromium.mojo.bindings.Struct
import java.nio.ByteBuffer

class BitmapN32ImageInfo private constructor(version: Int) : Struct(STRUCT_SIZE, version) {
    var alphaType = 0
    @JvmField
    var width = 0
    @JvmField
    var height = 0
    lateinit var colorTransferFunction: FloatArray
    lateinit var colorToXyzMatrix: FloatArray

    override fun encode(encoder: Encoder) {
        val encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO)
        encoder0.encode(alphaType, 8)
        encoder0.encode(width, 12)
        encoder0.encode(height, 16)
        encoder0.encode(colorTransferFunction, 24, BindingsHelper.ARRAY_NULLABLE, 7)
        encoder0.encode(colorToXyzMatrix, 32, BindingsHelper.ARRAY_NULLABLE, 9)
    }

    companion object {
        private const val STRUCT_SIZE = 40
        private val VERSION_ARRAY = arrayOf(DataHeader(40, 0))
        private val DEFAULT_STRUCT_INFO = VERSION_ARRAY[0]
        fun deserialize(message: Message?): BitmapN32ImageInfo? {
            return decode(Decoder(message))
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        fun deserialize(data: ByteBuffer?): BitmapN32ImageInfo? {
            return deserialize(
                Message(
                    data, ArrayList()
                )
            )
        }

        fun decode(decoder0: Decoder?): BitmapN32ImageInfo? {
            if (decoder0 == null) {
                return null
            }
            decoder0.increaseStackDepth()
            val result: BitmapN32ImageInfo
            try {
                val mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY)
                val elementsOrVersion = mainDataHeader.elementsOrVersion
                result = BitmapN32ImageInfo(elementsOrVersion)
                run {
                    result.alphaType = decoder0.readInt(8)
                    AlphaType.validate(result.alphaType)
                    result.alphaType = AlphaType.toKnownValue(result.alphaType)
                }
                run { result.width = decoder0.readInt(12) }
                run { result.height = decoder0.readInt(16) }
                run {
                    result.colorTransferFunction =
                        decoder0.readFloats(24, BindingsHelper.ARRAY_NULLABLE, 7)
                }
                run {
                    result.colorToXyzMatrix =
                        decoder0.readFloats(32, BindingsHelper.ARRAY_NULLABLE, 9)
                }
            } finally {
                decoder0.decreaseStackDepth()
            }
            return result
        }
    }
}