// NetworkContextFilePaths.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_context.mojom
//

package org.chromium.network.mojom;

import androidx.annotation.IntDef;


public final class NetworkContextFilePaths extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 120;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(120, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public TransferableDirectory sharedDictionaryDirectory;
    public TransferableDirectory httpCacheDirectory;
    public TransferableDirectory dataDirectory;
    public org.chromium.mojo_base.mojom.FilePath unsandboxedDataPath;
    public org.chromium.mojo_base.mojom.FilePath cookieDatabaseName;
    public org.chromium.mojo_base.mojom.FilePath trustTokenDatabaseName;
    public org.chromium.mojo_base.mojom.FilePath httpServerPropertiesFileName;
    public org.chromium.mojo_base.mojom.FilePath transportSecurityPersisterFileName;
    public org.chromium.mojo_base.mojom.FilePath reportingAndNelStoreDatabaseName;
    public org.chromium.mojo_base.mojom.FilePath sctAuditingPendingReportsFileName;
    public boolean triggerMigration;

    private NetworkContextFilePaths(int version) {
        super(STRUCT_SIZE, version);
        this.triggerMigration = (boolean) false;
    }

    public NetworkContextFilePaths() {
        this(0);
    }

    public static NetworkContextFilePaths deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static NetworkContextFilePaths deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static NetworkContextFilePaths decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        NetworkContextFilePaths result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new NetworkContextFilePaths(elementsOrVersion);
                {
                    
                result.sharedDictionaryDirectory = TransferableDirectory.decode(decoder0, 8);
                }
                {
                    
                result.httpCacheDirectory = TransferableDirectory.decode(decoder0, 24);
                }
                {
                    
                result.dataDirectory = TransferableDirectory.decode(decoder0, 40);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, true);
                result.unsandboxedDataPath = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, true);
                result.cookieDatabaseName = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, true);
                result.trustTokenDatabaseName = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, true);
                result.httpServerPropertiesFileName = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(88, true);
                result.transportSecurityPersisterFileName = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(96, true);
                result.reportingAndNelStoreDatabaseName = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(104, true);
                result.sctAuditingPendingReportsFileName = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {
                    
                result.triggerMigration = decoder0.readBoolean(112, 0);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.sharedDictionaryDirectory, 8, true);
        
        encoder0.encode(this.httpCacheDirectory, 24, true);
        
        encoder0.encode(this.dataDirectory, 40, false);
        
        encoder0.encode(this.unsandboxedDataPath, 56, true);
        
        encoder0.encode(this.cookieDatabaseName, 64, true);
        
        encoder0.encode(this.trustTokenDatabaseName, 72, true);
        
        encoder0.encode(this.httpServerPropertiesFileName, 80, true);
        
        encoder0.encode(this.transportSecurityPersisterFileName, 88, true);
        
        encoder0.encode(this.reportingAndNelStoreDatabaseName, 96, true);
        
        encoder0.encode(this.sctAuditingPendingReportsFileName, 104, true);
        
        encoder0.encode(this.triggerMigration, 112, 0);
    }
}