// TrustTokenAccessDetails.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/trust_token_access_observer.mojom
//

package org.chromium.network.mojom;

import androidx.annotation.IntDef;


public final class TrustTokenAccessDetails extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int Issuance = 0;
        public static final int Redemption = 1;
        public static final int Signing = 2;
    };
    private TrustTokenIssuanceDetails mIssuance;
    private TrustTokenRedemptionDetails mRedemption;
    private TrustTokenSigningDetails mSigning;

    public void setIssuance(TrustTokenIssuanceDetails issuance) {
        this.mTag = Tag.Issuance;
        this.mIssuance = issuance;
    }

    public TrustTokenIssuanceDetails getIssuance() {
        assert this.mTag == Tag.Issuance;
        return this.mIssuance;
    }

    public void setRedemption(TrustTokenRedemptionDetails redemption) {
        this.mTag = Tag.Redemption;
        this.mRedemption = redemption;
    }

    public TrustTokenRedemptionDetails getRedemption() {
        assert this.mTag == Tag.Redemption;
        return this.mRedemption;
    }

    public void setSigning(TrustTokenSigningDetails signing) {
        this.mTag = Tag.Signing;
        this.mSigning = signing;
    }

    public TrustTokenSigningDetails getSigning() {
        assert this.mTag == Tag.Signing;
        return this.mSigning;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.Issuance: {
                
                encoder0.encode(this.mIssuance, offset + 8, false);
                break;
            }
            case Tag.Redemption: {
                
                encoder0.encode(this.mRedemption, offset + 8, false);
                break;
            }
            case Tag.Signing: {
                
                encoder0.encode(this.mSigning, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static TrustTokenAccessDetails deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final TrustTokenAccessDetails decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        TrustTokenAccessDetails result = new TrustTokenAccessDetails();
        switch (dataHeader.elementsOrVersion) {
            case Tag.Issuance: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mIssuance = TrustTokenIssuanceDetails.decode(decoder1);
                result.mTag = Tag.Issuance;
                break;
            }
            case Tag.Redemption: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mRedemption = TrustTokenRedemptionDetails.decode(decoder1);
                result.mTag = Tag.Redemption;
                break;
            }
            case Tag.Signing: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mSigning = TrustTokenSigningDetails.decode(decoder1);
                result.mTag = Tag.Signing;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}