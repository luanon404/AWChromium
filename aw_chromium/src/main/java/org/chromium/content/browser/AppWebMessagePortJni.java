//
// This file was generated by third_party/jni_zero/jni_generator.py
//
package org.chromium.content.browser;

import org.chromium.content_public.browser.MessagePayload;
import org.chromium.content_public.browser.MessagePort;
import org.jni_zero.CheckDiscard;
import org.jni_zero.GEN_JNI;
import org.jni_zero.JniStaticTestMocker;
import org.jni_zero.NativeLibraryLoadedStatus;

@CheckDiscard("crbug.com/993421")
class AppWebMessagePortJni implements AppWebMessagePort.Natives {
    private static AppWebMessagePort.Natives testInstance;

    public static final JniStaticTestMocker<AppWebMessagePort.Natives> TEST_HOOKS = new JniStaticTestMocker<AppWebMessagePort.Natives>() {
        @Override
        public void setInstanceForTesting(AppWebMessagePort.Natives instance) {
            if (!GEN_JNI.TESTING_ENABLED) {
                throw new RuntimeException("Tried to set a JNI mock when mocks aren't enabled!");
            }
            testInstance = instance;
        }
    };

    @Override
    public void closeAndDestroy(long nativeAppWebMessagePort) {
        GEN_JNI.org_chromium_content_browser_AppWebMessagePort_closeAndDestroy(nativeAppWebMessagePort);
    }

    @Override
    public AppWebMessagePort[] createPair() {
        return (AppWebMessagePort[]) GEN_JNI.org_chromium_content_browser_AppWebMessagePort_createPair();
    }

    @Override
    public void postMessage(long nativeAppWebMessagePort, MessagePayload messagePayload, MessagePort[] sentPorts) {
        GEN_JNI.org_chromium_content_browser_AppWebMessagePort_postMessage(nativeAppWebMessagePort, messagePayload, sentPorts);
    }

    @Override
    public void setShouldReceiveMessages(long nativeAppWebMessagePort, boolean shouldReceiveMessage) {
        GEN_JNI.org_chromium_content_browser_AppWebMessagePort_setShouldReceiveMessages(nativeAppWebMessagePort, shouldReceiveMessage);
    }

    public static AppWebMessagePort.Natives get() {
        if (GEN_JNI.TESTING_ENABLED) {
            if (testInstance != null) {
                return testInstance;
            }
            if (GEN_JNI.REQUIRE_MOCK) {
                throw new UnsupportedOperationException("No mock found for the native implementation of AppWebMessagePort.Natives. " + "The current configuration requires implementations be mocked.");
            }
        }
        NativeLibraryLoadedStatus.checkLoaded();
        return new AppWebMessagePortJni();
    }
}
