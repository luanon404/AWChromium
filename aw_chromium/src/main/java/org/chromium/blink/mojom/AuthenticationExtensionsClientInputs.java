// AuthenticationExtensionsClientInputs.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/webauthn/authenticator.mojom
//

package org.chromium.blink.mojom;


public final class AuthenticationExtensionsClientInputs extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 64;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(64, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public String appid;
    public CableAuthentication[] cableAuthenticationData;
    public boolean userVerificationMethods;
    public boolean prf;
    public PrfValues[] prfInputs;
    public boolean prfInputsHashed;
    public boolean largeBlobRead;
    public byte[] largeBlobWrite;
    public boolean getCredBlob;
    public RemoteDesktopClientOverride remoteDesktopClientOverride;
    public DevicePublicKeyRequest devicePublicKey;

    private AuthenticationExtensionsClientInputs(int version) {
        super(STRUCT_SIZE, version);
    }

    public AuthenticationExtensionsClientInputs() {
        this(0);
    }

    public static AuthenticationExtensionsClientInputs deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static AuthenticationExtensionsClientInputs deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static AuthenticationExtensionsClientInputs decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        AuthenticationExtensionsClientInputs result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new AuthenticationExtensionsClientInputs(elementsOrVersion);
                {
                    
                result.appid = decoder0.readString(8, true);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.cableAuthenticationData = new CableAuthentication[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.cableAuthenticationData[i1] = CableAuthentication.decode(decoder2);
                    }
                }
                }
                {
                    
                result.userVerificationMethods = decoder0.readBoolean(24, 0);
                }
                {
                    
                result.prf = decoder0.readBoolean(24, 1);
                }
                {
                    
                result.prfInputsHashed = decoder0.readBoolean(24, 2);
                }
                {
                    
                result.largeBlobRead = decoder0.readBoolean(24, 3);
                }
                {
                    
                result.getCredBlob = decoder0.readBoolean(24, 4);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.prfInputs = new PrfValues[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.prfInputs[i1] = PrfValues.decode(decoder2);
                    }
                }
                }
                {
                    
                result.largeBlobWrite = decoder0.readBytes(40, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, true);
                result.remoteDesktopClientOverride = RemoteDesktopClientOverride.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, true);
                result.devicePublicKey = DevicePublicKeyRequest.decode(decoder1);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.appid, 8, true);
        
        if (this.cableAuthenticationData == null) {
            encoder0.encodeNullPointer(16, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.cableAuthenticationData.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.cableAuthenticationData.length; ++i0) {
                
                encoder1.encode(this.cableAuthenticationData[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.userVerificationMethods, 24, 0);
        
        encoder0.encode(this.prf, 24, 1);
        
        encoder0.encode(this.prfInputsHashed, 24, 2);
        
        encoder0.encode(this.largeBlobRead, 24, 3);
        
        encoder0.encode(this.getCredBlob, 24, 4);
        
        if (this.prfInputs == null) {
            encoder0.encodeNullPointer(32, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.prfInputs.length, 32, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.prfInputs.length; ++i0) {
                
                encoder1.encode(this.prfInputs[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.largeBlobWrite, 40, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.remoteDesktopClientOverride, 48, true);
        
        encoder0.encode(this.devicePublicKey, 56, true);
    }
}