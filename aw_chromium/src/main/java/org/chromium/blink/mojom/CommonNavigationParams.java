// CommonNavigationParams.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/navigation/navigation_params.mojom
//

package org.chromium.blink.mojom;


public final class CommonNavigationParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 136;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(136, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public org.chromium.url.mojom.Url url;
    public org.chromium.url.internal.mojom.Origin initiatorOrigin;
    public org.chromium.url.mojom.Url initiatorBaseUrl;
    public Referrer referrer;
    public int transition;
    public int navigationType;
    public NavigationDownloadPolicy downloadPolicy;
    public boolean shouldReplaceCurrentEntry;
    public org.chromium.url.mojom.Url baseUrlForDataUrl;
    public org.chromium.mojo_base.mojom.TimeTicks navigationStart;
    public String method;
    public org.chromium.network.mojom.UrlRequestBody postData;
    public org.chromium.network.mojom.SourceLocation sourceLocation;
    public boolean startedFromContextMenu;
    public boolean hasUserGesture;
    public boolean textFragmentToken;
    public int shouldCheckMainWorldCsp;
    public int[] initiatorOriginTrialFeatures;
    public String hrefTranslate;
    public boolean isHistoryNavigationInNewChildFrame;
    public org.chromium.mojo_base.mojom.TimeTicks inputStart;
    public int requestDestination;

    private CommonNavigationParams(int version) {
        super(STRUCT_SIZE, version);
        this.navigationType = (int) NavigationType.DIFFERENT_DOCUMENT;
        this.shouldReplaceCurrentEntry = (boolean) false;
        this.method = (String) "GET";
        this.startedFromContextMenu = (boolean) false;
        this.hasUserGesture = (boolean) false;
        this.textFragmentToken = (boolean) false;
        this.shouldCheckMainWorldCsp = (int) org.chromium.network.mojom.CspDisposition.CHECK;
        this.isHistoryNavigationInNewChildFrame = (boolean) false;
        this.requestDestination = (int) org.chromium.network.mojom.RequestDestination.EMPTY;
    }

    public CommonNavigationParams() {
        this(0);
    }

    public static CommonNavigationParams deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static CommonNavigationParams deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static CommonNavigationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        CommonNavigationParams result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new CommonNavigationParams(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                result.initiatorOrigin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                result.initiatorBaseUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                result.referrer = Referrer.decode(decoder1);
                }
                {
                    
                result.transition = decoder0.readInt(40);
                }
                {
                    
                result.navigationType = decoder0.readInt(44);
                    NavigationType.validate(result.navigationType);
                    result.navigationType = NavigationType.toKnownValue(result.navigationType);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                result.downloadPolicy = NavigationDownloadPolicy.decode(decoder1);
                }
                {
                    
                result.shouldReplaceCurrentEntry = decoder0.readBoolean(56, 0);
                }
                {
                    
                result.startedFromContextMenu = decoder0.readBoolean(56, 1);
                }
                {
                    
                result.hasUserGesture = decoder0.readBoolean(56, 2);
                }
                {
                    
                result.textFragmentToken = decoder0.readBoolean(56, 3);
                }
                {
                    
                result.isHistoryNavigationInNewChildFrame = decoder0.readBoolean(56, 4);
                }
                {
                    
                result.shouldCheckMainWorldCsp = decoder0.readInt(60);
                    org.chromium.network.mojom.CspDisposition.validate(result.shouldCheckMainWorldCsp);
                    result.shouldCheckMainWorldCsp = org.chromium.network.mojom.CspDisposition.toKnownValue(result.shouldCheckMainWorldCsp);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                result.baseUrlForDataUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                result.navigationStart = org.chromium.mojo_base.mojom.TimeTicks.decode(decoder1);
                }
                {
                    
                result.method = decoder0.readString(80, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(88, true);
                result.postData = org.chromium.network.mojom.UrlRequestBody.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(96, false);
                result.sourceLocation = org.chromium.network.mojom.SourceLocation.decode(decoder1);
                }
                {
                    
                result.initiatorOriginTrialFeatures = decoder0.readInts(104, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                }
                {
                    
                result.hrefTranslate = decoder0.readString(112, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(120, false);
                result.inputStart = org.chromium.mojo_base.mojom.TimeTicks.decode(decoder1);
                }
                {
                    
                result.requestDestination = decoder0.readInt(128);
                    org.chromium.network.mojom.RequestDestination.validate(result.requestDestination);
                    result.requestDestination = org.chromium.network.mojom.RequestDestination.toKnownValue(result.requestDestination);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.url, 8, false);
        
        encoder0.encode(this.initiatorOrigin, 16, true);
        
        encoder0.encode(this.initiatorBaseUrl, 24, true);
        
        encoder0.encode(this.referrer, 32, false);
        
        encoder0.encode(this.transition, 40);
        
        encoder0.encode(this.navigationType, 44);
        
        encoder0.encode(this.downloadPolicy, 48, false);
        
        encoder0.encode(this.shouldReplaceCurrentEntry, 56, 0);
        
        encoder0.encode(this.startedFromContextMenu, 56, 1);
        
        encoder0.encode(this.hasUserGesture, 56, 2);
        
        encoder0.encode(this.textFragmentToken, 56, 3);
        
        encoder0.encode(this.isHistoryNavigationInNewChildFrame, 56, 4);
        
        encoder0.encode(this.shouldCheckMainWorldCsp, 60);
        
        encoder0.encode(this.baseUrlForDataUrl, 64, false);
        
        encoder0.encode(this.navigationStart, 72, false);
        
        encoder0.encode(this.method, 80, false);
        
        encoder0.encode(this.postData, 88, true);
        
        encoder0.encode(this.sourceLocation, 96, false);
        
        encoder0.encode(this.initiatorOriginTrialFeatures, 104, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.hrefTranslate, 112, false);
        
        encoder0.encode(this.inputStart, 120, false);
        
        encoder0.encode(this.requestDestination, 128);
    }
}