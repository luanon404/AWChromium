// MediaPlayer_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/media_player.mojom
//

package org.chromium.media.mojom;

class MediaPlayer_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<MediaPlayer, MediaPlayer.Proxy> MANAGER = new org.chromium.mojo.bindings.Interface.Manager<MediaPlayer, MediaPlayer.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.MediaPlayer";
        }

        @Override
        public int getVersion() {
            return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, MediaPlayer impl) {
            return new Stub(core, impl);
        }

        @Override
        public MediaPlayer[] buildArray(int size) {
            return new MediaPlayer[size];
        }
    };


    private static final int REQUEST_PLAY_ORDINAL = 0;

    private static final int REQUEST_PAUSE_ORDINAL = 1;

    private static final int REQUEST_SEEK_FORWARD_ORDINAL = 2;

    private static final int REQUEST_SEEK_BACKWARD_ORDINAL = 3;

    private static final int REQUEST_SEEK_TO_ORDINAL = 4;

    private static final int REQUEST_ENTER_PICTURE_IN_PICTURE_ORDINAL = 5;

    private static final int REQUEST_MUTE_ORDINAL = 6;

    private static final int SET_VOLUME_MULTIPLIER_ORDINAL = 7;

    private static final int SET_PERSISTENT_STATE_ORDINAL = 8;

    private static final int SET_POWER_EXPERIMENT_STATE_ORDINAL = 9;

    private static final int SET_AUDIO_SINK_ID_ORDINAL = 10;

    private static final int SUSPEND_FOR_FRAME_CLOSED_ORDINAL = 11;

    private static final int REQUEST_MEDIA_REMOTING_ORDINAL = 12;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements MediaPlayer.Proxy {

        Proxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void requestPlay() {

            MediaPlayerRequestPlayParams _message = new MediaPlayerRequestPlayParams();


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(REQUEST_PLAY_ORDINAL)));

        }


        @Override
        public void requestPause(boolean triggeredByUser) {

            MediaPlayerRequestPauseParams _message = new MediaPlayerRequestPauseParams();

            _message.triggeredByUser = triggeredByUser;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(REQUEST_PAUSE_ORDINAL)));

        }


        @Override
        public void requestSeekForward(org.chromium.mojo_base.mojom.TimeDelta seekTime) {

            MediaPlayerRequestSeekForwardParams _message = new MediaPlayerRequestSeekForwardParams();

            _message.seekTime = seekTime;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(REQUEST_SEEK_FORWARD_ORDINAL)));

        }


        @Override
        public void requestSeekBackward(org.chromium.mojo_base.mojom.TimeDelta seekTime) {

            MediaPlayerRequestSeekBackwardParams _message = new MediaPlayerRequestSeekBackwardParams();

            _message.seekTime = seekTime;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(REQUEST_SEEK_BACKWARD_ORDINAL)));

        }


        @Override
        public void requestSeekTo(org.chromium.mojo_base.mojom.TimeDelta seekTime) {

            MediaPlayerRequestSeekToParams _message = new MediaPlayerRequestSeekToParams();

            _message.seekTime = seekTime;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(REQUEST_SEEK_TO_ORDINAL)));

        }


        @Override
        public void requestEnterPictureInPicture() {

            MediaPlayerRequestEnterPictureInPictureParams _message = new MediaPlayerRequestEnterPictureInPictureParams();


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(REQUEST_ENTER_PICTURE_IN_PICTURE_ORDINAL)));

        }


        @Override
        public void requestMute(boolean mute) {

            MediaPlayerRequestMuteParams _message = new MediaPlayerRequestMuteParams();

            _message.mute = mute;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(REQUEST_MUTE_ORDINAL)));

        }


        @Override
        public void setVolumeMultiplier(double multiplier) {

            MediaPlayerSetVolumeMultiplierParams _message = new MediaPlayerSetVolumeMultiplierParams();

            _message.multiplier = multiplier;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_VOLUME_MULTIPLIER_ORDINAL)));

        }


        @Override
        public void setPersistentState(boolean persistent) {

            MediaPlayerSetPersistentStateParams _message = new MediaPlayerSetPersistentStateParams();

            _message.persistent = persistent;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_PERSISTENT_STATE_ORDINAL)));

        }


        @Override
        public void setPowerExperimentState(boolean enabled) {

            MediaPlayerSetPowerExperimentStateParams _message = new MediaPlayerSetPowerExperimentStateParams();

            _message.enabled = enabled;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_POWER_EXPERIMENT_STATE_ORDINAL)));

        }


        @Override
        public void setAudioSinkId(String sinkId) {

            MediaPlayerSetAudioSinkIdParams _message = new MediaPlayerSetAudioSinkIdParams();

            _message.sinkId = sinkId;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_AUDIO_SINK_ID_ORDINAL)));

        }


        @Override
        public void suspendForFrameClosed() {

            MediaPlayerSuspendForFrameClosedParams _message = new MediaPlayerSuspendForFrameClosedParams();


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SUSPEND_FOR_FRAME_CLOSED_ORDINAL)));

        }


        @Override
        public void requestMediaRemoting() {

            MediaPlayerRequestMediaRemotingParams _message = new MediaPlayerRequestMediaRemotingParams();


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(REQUEST_MEDIA_REMOTING_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<MediaPlayer> {

        Stub(org.chromium.mojo.system.Core core, MediaPlayer impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(MediaPlayer_Internal.MANAGER, messageWithHeader);


                    case REQUEST_PLAY_ORDINAL: {

                        MediaPlayerRequestPlayParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestPlay();
                        return true;
                    }


                    case REQUEST_PAUSE_ORDINAL: {

                        MediaPlayerRequestPauseParams data = MediaPlayerRequestPauseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestPause(data.triggeredByUser);
                        return true;
                    }


                    case REQUEST_SEEK_FORWARD_ORDINAL: {

                        MediaPlayerRequestSeekForwardParams data = MediaPlayerRequestSeekForwardParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestSeekForward(data.seekTime);
                        return true;
                    }


                    case REQUEST_SEEK_BACKWARD_ORDINAL: {

                        MediaPlayerRequestSeekBackwardParams data = MediaPlayerRequestSeekBackwardParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestSeekBackward(data.seekTime);
                        return true;
                    }


                    case REQUEST_SEEK_TO_ORDINAL: {

                        MediaPlayerRequestSeekToParams data = MediaPlayerRequestSeekToParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestSeekTo(data.seekTime);
                        return true;
                    }


                    case REQUEST_ENTER_PICTURE_IN_PICTURE_ORDINAL: {

                        MediaPlayerRequestEnterPictureInPictureParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestEnterPictureInPicture();
                        return true;
                    }


                    case REQUEST_MUTE_ORDINAL: {

                        MediaPlayerRequestMuteParams data = MediaPlayerRequestMuteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestMute(data.mute);
                        return true;
                    }


                    case SET_VOLUME_MULTIPLIER_ORDINAL: {

                        MediaPlayerSetVolumeMultiplierParams data = MediaPlayerSetVolumeMultiplierParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setVolumeMultiplier(data.multiplier);
                        return true;
                    }


                    case SET_PERSISTENT_STATE_ORDINAL: {

                        MediaPlayerSetPersistentStateParams data = MediaPlayerSetPersistentStateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setPersistentState(data.persistent);
                        return true;
                    }


                    case SET_POWER_EXPERIMENT_STATE_ORDINAL: {

                        MediaPlayerSetPowerExperimentStateParams data = MediaPlayerSetPowerExperimentStateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setPowerExperimentState(data.enabled);
                        return true;
                    }


                    case SET_AUDIO_SINK_ID_ORDINAL: {

                        MediaPlayerSetAudioSinkIdParams data = MediaPlayerSetAudioSinkIdParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setAudioSinkId(data.sinkId);
                        return true;
                    }


                    case SUSPEND_FOR_FRAME_CLOSED_ORDINAL: {

                        MediaPlayerSuspendForFrameClosedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().suspendForFrameClosed();
                        return true;
                    }


                    case REQUEST_MEDIA_REMOTING_ORDINAL: {

                        MediaPlayerRequestMediaRemotingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestMediaRemoting();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(getCore(), MediaPlayer_Internal.MANAGER, messageWithHeader, receiver);


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }
    }


    static final class MediaPlayerRequestPlayParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerRequestPlayParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestPlayParams() {
            this(0);
        }

        public static MediaPlayerRequestPlayParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestPlayParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestPlayParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestPlayParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestPlayParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class MediaPlayerRequestPauseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean triggeredByUser;

        private MediaPlayerRequestPauseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestPauseParams() {
            this(0);
        }

        public static MediaPlayerRequestPauseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestPauseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestPauseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestPauseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestPauseParams(elementsOrVersion);
                {

                    result.triggeredByUser = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.triggeredByUser, 8, 0);
        }
    }


    static final class MediaPlayerRequestSeekForwardParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.TimeDelta seekTime;

        private MediaPlayerRequestSeekForwardParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestSeekForwardParams() {
            this(0);
        }

        public static MediaPlayerRequestSeekForwardParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestSeekForwardParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestSeekForwardParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestSeekForwardParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestSeekForwardParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.seekTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.seekTime, 8, false);
        }
    }


    static final class MediaPlayerRequestSeekBackwardParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.TimeDelta seekTime;

        private MediaPlayerRequestSeekBackwardParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestSeekBackwardParams() {
            this(0);
        }

        public static MediaPlayerRequestSeekBackwardParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestSeekBackwardParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestSeekBackwardParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestSeekBackwardParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestSeekBackwardParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.seekTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.seekTime, 8, false);
        }
    }


    static final class MediaPlayerRequestSeekToParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.TimeDelta seekTime;

        private MediaPlayerRequestSeekToParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestSeekToParams() {
            this(0);
        }

        public static MediaPlayerRequestSeekToParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestSeekToParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestSeekToParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestSeekToParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestSeekToParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.seekTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.seekTime, 8, false);
        }
    }


    static final class MediaPlayerRequestEnterPictureInPictureParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerRequestEnterPictureInPictureParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestEnterPictureInPictureParams() {
            this(0);
        }

        public static MediaPlayerRequestEnterPictureInPictureParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestEnterPictureInPictureParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestEnterPictureInPictureParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestEnterPictureInPictureParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestEnterPictureInPictureParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class MediaPlayerRequestMuteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean mute;

        private MediaPlayerRequestMuteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestMuteParams() {
            this(0);
        }

        public static MediaPlayerRequestMuteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestMuteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestMuteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestMuteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestMuteParams(elementsOrVersion);
                {

                    result.mute = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.mute, 8, 0);
        }
    }


    static final class MediaPlayerSetVolumeMultiplierParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public double multiplier;

        private MediaPlayerSetVolumeMultiplierParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerSetVolumeMultiplierParams() {
            this(0);
        }

        public static MediaPlayerSetVolumeMultiplierParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerSetVolumeMultiplierParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerSetVolumeMultiplierParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerSetVolumeMultiplierParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerSetVolumeMultiplierParams(elementsOrVersion);
                {

                    result.multiplier = decoder0.readDouble(8);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.multiplier, 8);
        }
    }


    static final class MediaPlayerSetPersistentStateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean persistent;

        private MediaPlayerSetPersistentStateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerSetPersistentStateParams() {
            this(0);
        }

        public static MediaPlayerSetPersistentStateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerSetPersistentStateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerSetPersistentStateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerSetPersistentStateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerSetPersistentStateParams(elementsOrVersion);
                {

                    result.persistent = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.persistent, 8, 0);
        }
    }


    static final class MediaPlayerSetPowerExperimentStateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean enabled;

        private MediaPlayerSetPowerExperimentStateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerSetPowerExperimentStateParams() {
            this(0);
        }

        public static MediaPlayerSetPowerExperimentStateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerSetPowerExperimentStateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerSetPowerExperimentStateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerSetPowerExperimentStateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerSetPowerExperimentStateParams(elementsOrVersion);
                {

                    result.enabled = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.enabled, 8, 0);
        }
    }


    static final class MediaPlayerSetAudioSinkIdParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String sinkId;

        private MediaPlayerSetAudioSinkIdParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerSetAudioSinkIdParams() {
            this(0);
        }

        public static MediaPlayerSetAudioSinkIdParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerSetAudioSinkIdParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerSetAudioSinkIdParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerSetAudioSinkIdParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerSetAudioSinkIdParams(elementsOrVersion);
                {

                    result.sinkId = decoder0.readString(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.sinkId, 8, false);
        }
    }


    static final class MediaPlayerSuspendForFrameClosedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerSuspendForFrameClosedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerSuspendForFrameClosedParams() {
            this(0);
        }

        public static MediaPlayerSuspendForFrameClosedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerSuspendForFrameClosedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerSuspendForFrameClosedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerSuspendForFrameClosedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerSuspendForFrameClosedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class MediaPlayerRequestMediaRemotingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerRequestMediaRemotingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestMediaRemotingParams() {
            this(0);
        }

        public static MediaPlayerRequestMediaRemotingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestMediaRemotingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestMediaRemotingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestMediaRemotingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestMediaRemotingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


}
