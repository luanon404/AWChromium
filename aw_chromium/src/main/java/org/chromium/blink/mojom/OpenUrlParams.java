// OpenUrlParams.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/remote_frame.mojom
//

package org.chromium.blink.mojom;


public final class OpenUrlParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 128;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(128, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public org.chromium.url.mojom.Url url;
    public org.chromium.url.internal.mojom.Origin initiatorOrigin;
    public org.chromium.url.mojom.Url initiatorBaseUrl;
    public LocalFrameToken initiatorFrameToken;
    public org.chromium.network.mojom.UrlRequestBody postBody;
    public String extraHeaders;
    public Referrer referrer;
    public boolean isFormSubmission;
    public int disposition;
    public boolean shouldReplaceCurrentEntry;
    public boolean userGesture;
    public boolean isUnfencedTopNavigation;
    public int triggeringEventInfo;
    public BlobUrlToken blobUrlToken;
    public String hrefTranslate;
    public Impression impression;
    public NavigationDownloadPolicy downloadPolicy;
    public org.chromium.network.mojom.SourceLocation sourceLocation;
    public PolicyContainerHostKeepAliveHandle initiatorPolicyContainerKeepAliveHandle;
    public int initiatorActivationAndAdStatus;
    public boolean isContainerInitiated;

    private OpenUrlParams(int version) {
        super(STRUCT_SIZE, version);
        this.isUnfencedTopNavigation = (boolean) false;
        this.isContainerInitiated = (boolean) false;
    }

    public OpenUrlParams() {
        this(0);
    }

    public static OpenUrlParams deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static OpenUrlParams deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static OpenUrlParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        OpenUrlParams result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new OpenUrlParams(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.initiatorOrigin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                result.initiatorBaseUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                result.initiatorFrameToken = LocalFrameToken.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                result.postBody = org.chromium.network.mojom.UrlRequestBody.decode(decoder1);
                }
                {
                    
                result.extraHeaders = decoder0.readString(48, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, false);
                result.referrer = Referrer.decode(decoder1);
                }
                {
                    
                result.isFormSubmission = decoder0.readBoolean(64, 0);
                }
                {
                    
                result.shouldReplaceCurrentEntry = decoder0.readBoolean(64, 1);
                }
                {
                    
                result.userGesture = decoder0.readBoolean(64, 2);
                }
                {
                    
                result.isUnfencedTopNavigation = decoder0.readBoolean(64, 3);
                }
                {
                    
                result.isContainerInitiated = decoder0.readBoolean(64, 4);
                }
                {
                    
                result.disposition = decoder0.readInt(68);
                    org.chromium.ui.mojom.WindowOpenDisposition.validate(result.disposition);
                    result.disposition = org.chromium.ui.mojom.WindowOpenDisposition.toKnownValue(result.disposition);
                }
                {
                    
                result.triggeringEventInfo = decoder0.readInt(72);
                    TriggeringEventInfo.validate(result.triggeringEventInfo);
                    result.triggeringEventInfo = TriggeringEventInfo.toKnownValue(result.triggeringEventInfo);
                }
                {
                    
                result.blobUrlToken = decoder0.readServiceInterface(76, true, BlobUrlToken.MANAGER);
                }
                {
                    
                result.initiatorActivationAndAdStatus = decoder0.readInt(84);
                    NavigationInitiatorActivationAndAdStatus.validate(result.initiatorActivationAndAdStatus);
                    result.initiatorActivationAndAdStatus = NavigationInitiatorActivationAndAdStatus.toKnownValue(result.initiatorActivationAndAdStatus);
                }
                {
                    
                result.hrefTranslate = decoder0.readString(88, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(96, true);
                result.impression = Impression.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(104, false);
                result.downloadPolicy = NavigationDownloadPolicy.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(112, false);
                result.sourceLocation = org.chromium.network.mojom.SourceLocation.decode(decoder1);
                }
                {
                    
                result.initiatorPolicyContainerKeepAliveHandle = decoder0.readServiceInterface(120, true, PolicyContainerHostKeepAliveHandle.MANAGER);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.url, 8, false);
        
        encoder0.encode(this.initiatorOrigin, 16, false);
        
        encoder0.encode(this.initiatorBaseUrl, 24, true);
        
        encoder0.encode(this.initiatorFrameToken, 32, true);
        
        encoder0.encode(this.postBody, 40, true);
        
        encoder0.encode(this.extraHeaders, 48, false);
        
        encoder0.encode(this.referrer, 56, false);
        
        encoder0.encode(this.isFormSubmission, 64, 0);
        
        encoder0.encode(this.shouldReplaceCurrentEntry, 64, 1);
        
        encoder0.encode(this.userGesture, 64, 2);
        
        encoder0.encode(this.isUnfencedTopNavigation, 64, 3);
        
        encoder0.encode(this.isContainerInitiated, 64, 4);
        
        encoder0.encode(this.disposition, 68);
        
        encoder0.encode(this.triggeringEventInfo, 72);
        
        encoder0.encode(this.blobUrlToken, 76, true, BlobUrlToken.MANAGER);
        
        encoder0.encode(this.initiatorActivationAndAdStatus, 84);
        
        encoder0.encode(this.hrefTranslate, 88, false);
        
        encoder0.encode(this.impression, 96, true);
        
        encoder0.encode(this.downloadPolicy, 104, false);
        
        encoder0.encode(this.sourceLocation, 112, false);
        
        encoder0.encode(this.initiatorPolicyContainerKeepAliveHandle, 120, true, PolicyContainerHostKeepAliveHandle.MANAGER);
    }
}