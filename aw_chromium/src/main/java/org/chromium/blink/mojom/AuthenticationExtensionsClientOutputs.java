// AuthenticationExtensionsClientOutputs.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/webauthn/authenticator.mojom
//

package org.chromium.blink.mojom;


public final class AuthenticationExtensionsClientOutputs extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 56;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public boolean echoAppidExtension;
    public boolean appidExtension;
    public boolean echoUserVerificationMethods;
    public UvmEntry[] userVerificationMethods;
    public boolean echoPrf;
    public PrfValues prfResults;
    public boolean prfNotEvaluated;
    public boolean echoLargeBlob;
    public byte[] largeBlob;
    public boolean echoLargeBlobWritten;
    public boolean largeBlobWritten;
    public byte[] getCredBlob;
    public DevicePublicKeyResponse devicePublicKey;

    private AuthenticationExtensionsClientOutputs(int version) {
        super(STRUCT_SIZE, version);
    }

    public AuthenticationExtensionsClientOutputs() {
        this(0);
    }

    public static AuthenticationExtensionsClientOutputs deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static AuthenticationExtensionsClientOutputs deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static AuthenticationExtensionsClientOutputs decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        AuthenticationExtensionsClientOutputs result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new AuthenticationExtensionsClientOutputs(elementsOrVersion);
                {
                    
                result.echoAppidExtension = decoder0.readBoolean(8, 0);
                }
                {
                    
                result.appidExtension = decoder0.readBoolean(8, 1);
                }
                {
                    
                result.echoUserVerificationMethods = decoder0.readBoolean(8, 2);
                }
                {
                    
                result.echoPrf = decoder0.readBoolean(8, 3);
                }
                {
                    
                result.prfNotEvaluated = decoder0.readBoolean(8, 4);
                }
                {
                    
                result.echoLargeBlob = decoder0.readBoolean(8, 5);
                }
                {
                    
                result.echoLargeBlobWritten = decoder0.readBoolean(8, 6);
                }
                {
                    
                result.largeBlobWritten = decoder0.readBoolean(8, 7);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                if (decoder1 == null) {
                    result.userVerificationMethods = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.userVerificationMethods = new UvmEntry[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.userVerificationMethods[i1] = UvmEntry.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                result.prfResults = PrfValues.decode(decoder1);
                }
                {
                    
                result.largeBlob = decoder0.readBytes(32, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                }
                {
                    
                result.getCredBlob = decoder0.readBytes(40, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, true);
                result.devicePublicKey = DevicePublicKeyResponse.decode(decoder1);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.echoAppidExtension, 8, 0);
        
        encoder0.encode(this.appidExtension, 8, 1);
        
        encoder0.encode(this.echoUserVerificationMethods, 8, 2);
        
        encoder0.encode(this.echoPrf, 8, 3);
        
        encoder0.encode(this.prfNotEvaluated, 8, 4);
        
        encoder0.encode(this.echoLargeBlob, 8, 5);
        
        encoder0.encode(this.echoLargeBlobWritten, 8, 6);
        
        encoder0.encode(this.largeBlobWritten, 8, 7);
        
        if (this.userVerificationMethods == null) {
            encoder0.encodeNullPointer(16, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.userVerificationMethods.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.userVerificationMethods.length; ++i0) {
                
                encoder1.encode(this.userVerificationMethods[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.prfResults, 24, true);
        
        encoder0.encode(this.largeBlob, 32, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.getCredBlob, 40, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.devicePublicKey, 48, true);
    }
}