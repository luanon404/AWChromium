// AttributionDataHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/conversions/attribution_data_host.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;


class AttributionDataHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<AttributionDataHost, AttributionDataHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<AttributionDataHost, AttributionDataHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.AttributionDataHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, AttributionDataHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public AttributionDataHost[] buildArray(int size) {
          return new AttributionDataHost[size];
        }
    };


    private static final int SOURCE_DATA_AVAILABLE_ORDINAL = 0;

    private static final int TRIGGER_DATA_AVAILABLE_ORDINAL = 1;

    private static final int OS_SOURCE_DATA_AVAILABLE_ORDINAL = 2;

    private static final int OS_TRIGGER_DATA_AVAILABLE_ORDINAL = 3;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements AttributionDataHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void sourceDataAvailable(
org.chromium.attribution_reporting.mojom.SuitableOrigin reportingOrigin, org.chromium.attribution_reporting.mojom.SourceRegistration data) {

            AttributionDataHostSourceDataAvailableParams _message = new AttributionDataHostSourceDataAvailableParams();

            _message.reportingOrigin = reportingOrigin;

            _message.data = data;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SOURCE_DATA_AVAILABLE_ORDINAL)));

        }


        @Override
        public void triggerDataAvailable(
org.chromium.attribution_reporting.mojom.SuitableOrigin reportingOrigin, org.chromium.attribution_reporting.mojom.TriggerRegistration data, org.chromium.network.mojom.TriggerVerification[] verifications) {

            AttributionDataHostTriggerDataAvailableParams _message = new AttributionDataHostTriggerDataAvailableParams();

            _message.reportingOrigin = reportingOrigin;

            _message.data = data;

            _message.verifications = verifications;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TRIGGER_DATA_AVAILABLE_ORDINAL)));

        }


        @Override
        public void osSourceDataAvailable(
org.chromium.attribution_reporting.mojom.OsRegistration registration) {

            AttributionDataHostOsSourceDataAvailableParams _message = new AttributionDataHostOsSourceDataAvailableParams();

            _message.registration = registration;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(OS_SOURCE_DATA_AVAILABLE_ORDINAL)));

        }


        @Override
        public void osTriggerDataAvailable(
org.chromium.attribution_reporting.mojom.OsRegistration registration) {

            AttributionDataHostOsTriggerDataAvailableParams _message = new AttributionDataHostOsTriggerDataAvailableParams();

            _message.registration = registration;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(OS_TRIGGER_DATA_AVAILABLE_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<AttributionDataHost> {

        Stub(org.chromium.mojo.system.Core core, AttributionDataHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                AttributionDataHost_Internal.MANAGER, messageWithHeader);





                    case SOURCE_DATA_AVAILABLE_ORDINAL: {

                        AttributionDataHostSourceDataAvailableParams data =
                                AttributionDataHostSourceDataAvailableParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sourceDataAvailable(data.reportingOrigin, data.data);
                        return true;
                    }





                    case TRIGGER_DATA_AVAILABLE_ORDINAL: {

                        AttributionDataHostTriggerDataAvailableParams data =
                                AttributionDataHostTriggerDataAvailableParams.deserialize(messageWithHeader.getPayload());

                        getImpl().triggerDataAvailable(data.reportingOrigin, data.data, data.verifications);
                        return true;
                    }





                    case OS_SOURCE_DATA_AVAILABLE_ORDINAL: {

                        AttributionDataHostOsSourceDataAvailableParams data =
                                AttributionDataHostOsSourceDataAvailableParams.deserialize(messageWithHeader.getPayload());

                        getImpl().osSourceDataAvailable(data.registration);
                        return true;
                    }





                    case OS_TRIGGER_DATA_AVAILABLE_ORDINAL: {

                        AttributionDataHostOsTriggerDataAvailableParams data =
                                AttributionDataHostOsTriggerDataAvailableParams.deserialize(messageWithHeader.getPayload());

                        getImpl().osTriggerDataAvailable(data.registration);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), AttributionDataHost_Internal.MANAGER, messageWithHeader, receiver);










                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class AttributionDataHostSourceDataAvailableParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.attribution_reporting.mojom.SuitableOrigin reportingOrigin;
        public org.chromium.attribution_reporting.mojom.SourceRegistration data;

        private AttributionDataHostSourceDataAvailableParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AttributionDataHostSourceDataAvailableParams() {
            this(0);
        }

        public static AttributionDataHostSourceDataAvailableParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AttributionDataHostSourceDataAvailableParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AttributionDataHostSourceDataAvailableParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AttributionDataHostSourceDataAvailableParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AttributionDataHostSourceDataAvailableParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.reportingOrigin = org.chromium.attribution_reporting.mojom.SuitableOrigin.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.data = org.chromium.attribution_reporting.mojom.SourceRegistration.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.reportingOrigin, 8, false);
            
            encoder0.encode(this.data, 16, false);
        }
    }



    
    static final class AttributionDataHostTriggerDataAvailableParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.attribution_reporting.mojom.SuitableOrigin reportingOrigin;
        public org.chromium.attribution_reporting.mojom.TriggerRegistration data;
        public org.chromium.network.mojom.TriggerVerification[] verifications;

        private AttributionDataHostTriggerDataAvailableParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AttributionDataHostTriggerDataAvailableParams() {
            this(0);
        }

        public static AttributionDataHostTriggerDataAvailableParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AttributionDataHostTriggerDataAvailableParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AttributionDataHostTriggerDataAvailableParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AttributionDataHostTriggerDataAvailableParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AttributionDataHostTriggerDataAvailableParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.reportingOrigin = org.chromium.attribution_reporting.mojom.SuitableOrigin.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.data = org.chromium.attribution_reporting.mojom.TriggerRegistration.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.verifications = new org.chromium.network.mojom.TriggerVerification[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.verifications[i1] = org.chromium.network.mojom.TriggerVerification.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.reportingOrigin, 8, false);
            
            encoder0.encode(this.data, 16, false);
            
            if (this.verifications == null) {
                encoder0.encodeNullPointer(24, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.verifications.length, 24, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.verifications.length; ++i0) {
                    
                    encoder1.encode(this.verifications[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class AttributionDataHostOsSourceDataAvailableParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.attribution_reporting.mojom.OsRegistration registration;

        private AttributionDataHostOsSourceDataAvailableParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AttributionDataHostOsSourceDataAvailableParams() {
            this(0);
        }

        public static AttributionDataHostOsSourceDataAvailableParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AttributionDataHostOsSourceDataAvailableParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AttributionDataHostOsSourceDataAvailableParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AttributionDataHostOsSourceDataAvailableParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AttributionDataHostOsSourceDataAvailableParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.registration = org.chromium.attribution_reporting.mojom.OsRegistration.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.registration, 8, false);
        }
    }



    
    static final class AttributionDataHostOsTriggerDataAvailableParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.attribution_reporting.mojom.OsRegistration registration;

        private AttributionDataHostOsTriggerDataAvailableParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AttributionDataHostOsTriggerDataAvailableParams() {
            this(0);
        }

        public static AttributionDataHostOsTriggerDataAvailableParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AttributionDataHostOsTriggerDataAvailableParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AttributionDataHostOsTriggerDataAvailableParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AttributionDataHostOsTriggerDataAvailableParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AttributionDataHostOsTriggerDataAvailableParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.registration = org.chromium.attribution_reporting.mojom.OsRegistration.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.registration, 8, false);
        }
    }



}
