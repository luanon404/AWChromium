// FileSystemAccessChangeType.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/file_system_access/file_system_access_observer.mojom
//

package org.chromium.blink.mojom;


public final class FileSystemAccessChangeType extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int Created = 0;
        public static final int Deleted = 1;
        public static final int Errored = 2;
        public static final int Modified = 3;
        public static final int Moved = 4;
        public static final int Unsupported = 5;
    }

    private FileSystemAccessChangeTypeCreated mCreated;
    private FileSystemAccessChangeTypeDeleted mDeleted;
    private FileSystemAccessChangeTypeErrored mErrored;
    private FileSystemAccessChangeTypeModified mModified;
    private FileSystemAccessChangeTypeMoved mMoved;
    private FileSystemAccessChangeTypeUnsupported mUnsupported;

    public void setCreated(FileSystemAccessChangeTypeCreated created) {
        this.mTag = Tag.Created;
        this.mCreated = created;
    }

    public FileSystemAccessChangeTypeCreated getCreated() {
        assert this.mTag == Tag.Created;
        return this.mCreated;
    }

    public void setDeleted(FileSystemAccessChangeTypeDeleted deleted) {
        this.mTag = Tag.Deleted;
        this.mDeleted = deleted;
    }

    public FileSystemAccessChangeTypeDeleted getDeleted() {
        assert this.mTag == Tag.Deleted;
        return this.mDeleted;
    }

    public void setErrored(FileSystemAccessChangeTypeErrored errored) {
        this.mTag = Tag.Errored;
        this.mErrored = errored;
    }

    public FileSystemAccessChangeTypeErrored getErrored() {
        assert this.mTag == Tag.Errored;
        return this.mErrored;
    }

    public void setModified(FileSystemAccessChangeTypeModified modified) {
        this.mTag = Tag.Modified;
        this.mModified = modified;
    }

    public FileSystemAccessChangeTypeModified getModified() {
        assert this.mTag == Tag.Modified;
        return this.mModified;
    }

    public void setMoved(FileSystemAccessChangeTypeMoved moved) {
        this.mTag = Tag.Moved;
        this.mMoved = moved;
    }

    public FileSystemAccessChangeTypeMoved getMoved() {
        assert this.mTag == Tag.Moved;
        return this.mMoved;
    }

    public void setUnsupported(FileSystemAccessChangeTypeUnsupported unsupported) {
        this.mTag = Tag.Unsupported;
        this.mUnsupported = unsupported;
    }

    public FileSystemAccessChangeTypeUnsupported getUnsupported() {
        assert this.mTag == Tag.Unsupported;
        return this.mUnsupported;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.Created: {
                
                encoder0.encode(this.mCreated, offset + 8, false);
                break;
            }
            case Tag.Deleted: {
                
                encoder0.encode(this.mDeleted, offset + 8, false);
                break;
            }
            case Tag.Errored: {
                
                encoder0.encode(this.mErrored, offset + 8, false);
                break;
            }
            case Tag.Modified: {
                
                encoder0.encode(this.mModified, offset + 8, false);
                break;
            }
            case Tag.Moved: {
                
                encoder0.encode(this.mMoved, offset + 8, false);
                break;
            }
            case Tag.Unsupported: {
                
                encoder0.encode(this.mUnsupported, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static FileSystemAccessChangeType deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final FileSystemAccessChangeType decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        FileSystemAccessChangeType result = new FileSystemAccessChangeType();
        switch (dataHeader.elementsOrVersion) {
            case Tag.Created: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mCreated = FileSystemAccessChangeTypeCreated.decode(decoder1);
                result.mTag = Tag.Created;
                break;
            }
            case Tag.Deleted: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mDeleted = FileSystemAccessChangeTypeDeleted.decode(decoder1);
                result.mTag = Tag.Deleted;
                break;
            }
            case Tag.Errored: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mErrored = FileSystemAccessChangeTypeErrored.decode(decoder1);
                result.mTag = Tag.Errored;
                break;
            }
            case Tag.Modified: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mModified = FileSystemAccessChangeTypeModified.decode(decoder1);
                result.mTag = Tag.Modified;
                break;
            }
            case Tag.Moved: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mMoved = FileSystemAccessChangeTypeMoved.decode(decoder1);
                result.mTag = Tag.Moved;
                break;
            }
            case Tag.Unsupported: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mUnsupported = FileSystemAccessChangeTypeUnsupported.decode(decoder1);
                result.mTag = Tag.Unsupported;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}