// HdrMetadataSmpteSt2086.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     ui/gfx/mojom/hdr_metadata.mojom
//

package org.chromium.gfx.mojom;

public final class HdrMetadataSmpteSt2086 extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public org.chromium.skia.mojom.SkColorSpacePrimaries primaries;
    public float luminanceMax;
    public float luminanceMin;

    private HdrMetadataSmpteSt2086(int version) {
        super(STRUCT_SIZE, version);
    }

    public HdrMetadataSmpteSt2086() {
        this(0);
    }

    public static HdrMetadataSmpteSt2086 deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static HdrMetadataSmpteSt2086 deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static HdrMetadataSmpteSt2086 decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        HdrMetadataSmpteSt2086 result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new HdrMetadataSmpteSt2086(elementsOrVersion);
            {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                result.primaries = org.chromium.skia.mojom.SkColorSpacePrimaries.decode(decoder1);
            }
            {

                result.luminanceMax = decoder0.readFloat(16);
            }
            {

                result.luminanceMin = decoder0.readFloat(20);
            }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

        encoder0.encode(this.primaries, 8, false);

        encoder0.encode(this.luminanceMax, 16);

        encoder0.encode(this.luminanceMin, 20);
    }
}