// StructuredHeadersItem.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/structured_headers.mojom
//

package org.chromium.network.mojom;

public final class StructuredHeadersItem extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int NullValue = 0;
        public static final int IntegerValue = 1;
        public static final int DecimalValue = 2;
        public static final int StringValue = 3;
        public static final int TokenValue = 4;
        public static final int ByteSequenceValue = 5;
        public static final int BooleanValue = 6;
    }

    private byte mNullValue;
    private long mIntegerValue;
    private double mDecimalValue;
    private String mStringValue;
    private String mTokenValue;
    private org.chromium.mojo_base.mojom.ByteString mByteSequenceValue;
    private boolean mBooleanValue;

    public void setNullValue(byte nullValue) {
        this.mTag = Tag.NullValue;
        this.mNullValue = nullValue;
    }

    public byte getNullValue() {
        assert this.mTag == Tag.NullValue;
        return this.mNullValue;
    }

    public void setIntegerValue(long integerValue) {
        this.mTag = Tag.IntegerValue;
        this.mIntegerValue = integerValue;
    }

    public long getIntegerValue() {
        assert this.mTag == Tag.IntegerValue;
        return this.mIntegerValue;
    }

    public void setDecimalValue(double decimalValue) {
        this.mTag = Tag.DecimalValue;
        this.mDecimalValue = decimalValue;
    }

    public double getDecimalValue() {
        assert this.mTag == Tag.DecimalValue;
        return this.mDecimalValue;
    }

    public void setStringValue(String stringValue) {
        this.mTag = Tag.StringValue;
        this.mStringValue = stringValue;
    }

    public String getStringValue() {
        assert this.mTag == Tag.StringValue;
        return this.mStringValue;
    }

    public void setTokenValue(String tokenValue) {
        this.mTag = Tag.TokenValue;
        this.mTokenValue = tokenValue;
    }

    public String getTokenValue() {
        assert this.mTag == Tag.TokenValue;
        return this.mTokenValue;
    }

    public void setByteSequenceValue(org.chromium.mojo_base.mojom.ByteString byteSequenceValue) {
        this.mTag = Tag.ByteSequenceValue;
        this.mByteSequenceValue = byteSequenceValue;
    }

    public org.chromium.mojo_base.mojom.ByteString getByteSequenceValue() {
        assert this.mTag == Tag.ByteSequenceValue;
        return this.mByteSequenceValue;
    }

    public void setBooleanValue(boolean booleanValue) {
        this.mTag = Tag.BooleanValue;
        this.mBooleanValue = booleanValue;
    }

    public boolean getBooleanValue() {
        assert this.mTag == Tag.BooleanValue;
        return this.mBooleanValue;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.NullValue: {

                encoder0.encode(this.mNullValue, offset + 8);
                break;
            }
            case Tag.IntegerValue: {

                encoder0.encode(this.mIntegerValue, offset + 8);
                break;
            }
            case Tag.DecimalValue: {

                encoder0.encode(this.mDecimalValue, offset + 8);
                break;
            }
            case Tag.StringValue: {

                encoder0.encode(this.mStringValue, offset + 8, false);
                break;
            }
            case Tag.TokenValue: {

                encoder0.encode(this.mTokenValue, offset + 8, false);
                break;
            }
            case Tag.ByteSequenceValue: {

                encoder0.encode(this.mByteSequenceValue, offset + 8, false);
                break;
            }
            case Tag.BooleanValue: {

                encoder0.encode(this.mBooleanValue, offset + 8, 0);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static StructuredHeadersItem deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final StructuredHeadersItem decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        StructuredHeadersItem result = new StructuredHeadersItem();
        switch (dataHeader.elementsOrVersion) {
            case Tag.NullValue: {

                result.mNullValue = decoder0.readByte(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                result.mTag = Tag.NullValue;
                break;
            }
            case Tag.IntegerValue: {

                result.mIntegerValue = decoder0.readLong(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                result.mTag = Tag.IntegerValue;
                break;
            }
            case Tag.DecimalValue: {

                result.mDecimalValue = decoder0.readDouble(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                result.mTag = Tag.DecimalValue;
                break;
            }
            case Tag.StringValue: {

                result.mStringValue = decoder0.readString(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mTag = Tag.StringValue;
                break;
            }
            case Tag.TokenValue: {

                result.mTokenValue = decoder0.readString(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mTag = Tag.TokenValue;
                break;
            }
            case Tag.ByteSequenceValue: {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mByteSequenceValue = org.chromium.mojo_base.mojom.ByteString.decode(decoder1);
                result.mTag = Tag.ByteSequenceValue;
                break;
            }
            case Tag.BooleanValue: {

                result.mBooleanValue = decoder0.readBoolean(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, 0);
                result.mTag = Tag.BooleanValue;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}