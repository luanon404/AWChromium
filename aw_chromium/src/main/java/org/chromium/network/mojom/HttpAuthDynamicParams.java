// HttpAuthDynamicParams.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_service.mojom
//

package org.chromium.network.mojom;

import androidx.annotation.IntDef;


public final class HttpAuthDynamicParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 56;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public String[] allowedSchemes;
    public String[] patternsAllowedToUseAllSchemes;
    public String serverAllowlist;
    public String delegateAllowlist;
    public boolean delegateByKdcPolicy;
    public boolean negotiateDisableCnameLookup;
    public boolean enableNegotiatePort;
    public boolean ntlmV2Enabled;
    public String androidNegotiateAccountType;
    public boolean allowGssapiLibraryLoad;
    public boolean basicOverHttpEnabled;

    private HttpAuthDynamicParams(int version) {
        super(STRUCT_SIZE, version);
        this.delegateByKdcPolicy = (boolean) false;
        this.negotiateDisableCnameLookup = (boolean) false;
        this.enableNegotiatePort = (boolean) false;
        this.ntlmV2Enabled = (boolean) true;
        this.allowGssapiLibraryLoad = (boolean) true;
        this.basicOverHttpEnabled = (boolean) true;
    }

    public HttpAuthDynamicParams() {
        this(0);
    }

    public static HttpAuthDynamicParams deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static HttpAuthDynamicParams deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static HttpAuthDynamicParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        HttpAuthDynamicParams result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new HttpAuthDynamicParams(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                if (decoder1 == null) {
                    result.allowedSchemes = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.allowedSchemes = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.allowedSchemes[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.patternsAllowedToUseAllSchemes = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.patternsAllowedToUseAllSchemes[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }
                {
                    
                result.serverAllowlist = decoder0.readString(24, false);
                }
                {
                    
                result.delegateAllowlist = decoder0.readString(32, false);
                }
                {
                    
                result.delegateByKdcPolicy = decoder0.readBoolean(40, 0);
                }
                {
                    
                result.negotiateDisableCnameLookup = decoder0.readBoolean(40, 1);
                }
                {
                    
                result.enableNegotiatePort = decoder0.readBoolean(40, 2);
                }
                {
                    
                result.ntlmV2Enabled = decoder0.readBoolean(40, 3);
                }
                {
                    
                result.allowGssapiLibraryLoad = decoder0.readBoolean(40, 4);
                }
                {
                    
                result.basicOverHttpEnabled = decoder0.readBoolean(40, 5);
                }
                {
                    
                result.androidNegotiateAccountType = decoder0.readString(48, false);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        if (this.allowedSchemes == null) {
            encoder0.encodeNullPointer(8, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.allowedSchemes.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.allowedSchemes.length; ++i0) {
                
                encoder1.encode(this.allowedSchemes[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.patternsAllowedToUseAllSchemes == null) {
            encoder0.encodeNullPointer(16, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.patternsAllowedToUseAllSchemes.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.patternsAllowedToUseAllSchemes.length; ++i0) {
                
                encoder1.encode(this.patternsAllowedToUseAllSchemes[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.serverAllowlist, 24, false);
        
        encoder0.encode(this.delegateAllowlist, 32, false);
        
        encoder0.encode(this.delegateByKdcPolicy, 40, 0);
        
        encoder0.encode(this.negotiateDisableCnameLookup, 40, 1);
        
        encoder0.encode(this.enableNegotiatePort, 40, 2);
        
        encoder0.encode(this.ntlmV2Enabled, 40, 3);
        
        encoder0.encode(this.allowGssapiLibraryLoad, 40, 4);
        
        encoder0.encode(this.basicOverHttpEnabled, 40, 5);
        
        encoder0.encode(this.androidNegotiateAccountType, 48, false);
    }
}