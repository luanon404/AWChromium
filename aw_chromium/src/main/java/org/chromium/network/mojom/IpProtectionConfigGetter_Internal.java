// IpProtectionConfigGetter_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_context.mojom
//

package org.chromium.network.mojom;

class IpProtectionConfigGetter_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<IpProtectionConfigGetter, IpProtectionConfigGetter.Proxy> MANAGER = new org.chromium.mojo.bindings.Interface.Manager<IpProtectionConfigGetter, IpProtectionConfigGetter.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.IpProtectionConfigGetter";
        }

        @Override
        public int getVersion() {
            return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, IpProtectionConfigGetter impl) {
            return new Stub(core, impl);
        }

        @Override
        public IpProtectionConfigGetter[] buildArray(int size) {
            return new IpProtectionConfigGetter[size];
        }
    };


    private static final int TRY_GET_AUTH_TOKENS_ORDINAL = 0;

    private static final int GET_PROXY_LIST_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements IpProtectionConfigGetter.Proxy {

        Proxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void tryGetAuthTokens(int batchSize, int proxyLayer, TryGetAuthTokens_Response callback) {

            IpProtectionConfigGetterTryGetAuthTokensParams _message = new IpProtectionConfigGetterTryGetAuthTokensParams();

            _message.batchSize = batchSize;

            _message.proxyLayer = proxyLayer;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(TRY_GET_AUTH_TOKENS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new IpProtectionConfigGetterTryGetAuthTokensResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getProxyList(

                GetProxyList_Response callback) {

            IpProtectionConfigGetterGetProxyListParams _message = new IpProtectionConfigGetterGetProxyListParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_PROXY_LIST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new IpProtectionConfigGetterGetProxyListResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<IpProtectionConfigGetter> {

        Stub(org.chromium.mojo.system.Core core, IpProtectionConfigGetter impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(IpProtectionConfigGetter_Internal.MANAGER, messageWithHeader);


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(getCore(), IpProtectionConfigGetter_Internal.MANAGER, messageWithHeader, receiver);


                    case TRY_GET_AUTH_TOKENS_ORDINAL: {

                        IpProtectionConfigGetterTryGetAuthTokensParams data = IpProtectionConfigGetterTryGetAuthTokensParams.deserialize(messageWithHeader.getPayload());

                        getImpl().tryGetAuthTokens(data.batchSize, data.proxyLayer, new IpProtectionConfigGetterTryGetAuthTokensResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case GET_PROXY_LIST_ORDINAL: {

                        IpProtectionConfigGetterGetProxyListParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getProxyList(new IpProtectionConfigGetterGetProxyListResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }
    }


    static final class IpProtectionConfigGetterTryGetAuthTokensParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int batchSize;
        public int proxyLayer;

        private IpProtectionConfigGetterTryGetAuthTokensParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IpProtectionConfigGetterTryGetAuthTokensParams() {
            this(0);
        }

        public static IpProtectionConfigGetterTryGetAuthTokensParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IpProtectionConfigGetterTryGetAuthTokensParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IpProtectionConfigGetterTryGetAuthTokensParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IpProtectionConfigGetterTryGetAuthTokensParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IpProtectionConfigGetterTryGetAuthTokensParams(elementsOrVersion);
                {

                    result.batchSize = decoder0.readInt(8);
                }
                {

                    result.proxyLayer = decoder0.readInt(12);
                    IpProtectionProxyLayer.validate(result.proxyLayer);
                    result.proxyLayer = IpProtectionProxyLayer.toKnownValue(result.proxyLayer);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.batchSize, 8);

            encoder0.encode(this.proxyLayer, 12);
        }
    }


    static final class IpProtectionConfigGetterTryGetAuthTokensResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public BlindSignedAuthToken[] bsaTokens;
        public org.chromium.mojo_base.mojom.Time tryAgainAfter;

        private IpProtectionConfigGetterTryGetAuthTokensResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IpProtectionConfigGetterTryGetAuthTokensResponseParams() {
            this(0);
        }

        public static IpProtectionConfigGetterTryGetAuthTokensResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IpProtectionConfigGetterTryGetAuthTokensResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IpProtectionConfigGetterTryGetAuthTokensResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IpProtectionConfigGetterTryGetAuthTokensResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IpProtectionConfigGetterTryGetAuthTokensResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    if (decoder1 == null) {
                        result.bsaTokens = null;
                    } else {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.bsaTokens = new BlindSignedAuthToken[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.bsaTokens[i1] = BlindSignedAuthToken.decode(decoder2);
                        }
                    }
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.tryAgainAfter = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            if (this.bsaTokens == null) {
                encoder0.encodeNullPointer(8, true);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.bsaTokens.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.bsaTokens.length; ++i0) {

                    encoder1.encode(this.bsaTokens[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }

            encoder0.encode(this.tryAgainAfter, 16, true);
        }
    }

    static class IpProtectionConfigGetterTryGetAuthTokensResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final IpProtectionConfigGetter.TryGetAuthTokens_Response mCallback;

        IpProtectionConfigGetterTryGetAuthTokensResponseParamsForwardToCallback(IpProtectionConfigGetter.TryGetAuthTokens_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(TRY_GET_AUTH_TOKENS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                IpProtectionConfigGetterTryGetAuthTokensResponseParams response = IpProtectionConfigGetterTryGetAuthTokensResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.bsaTokens, response.tryAgainAfter);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class IpProtectionConfigGetterTryGetAuthTokensResponseParamsProxyToResponder implements IpProtectionConfigGetter.TryGetAuthTokens_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        IpProtectionConfigGetterTryGetAuthTokensResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(BlindSignedAuthToken[] bsaTokens, org.chromium.mojo_base.mojom.Time tryAgainAfter) {
            IpProtectionConfigGetterTryGetAuthTokensResponseParams _response = new IpProtectionConfigGetterTryGetAuthTokensResponseParams();

            _response.bsaTokens = bsaTokens;

            _response.tryAgainAfter = tryAgainAfter;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(TRY_GET_AUTH_TOKENS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class IpProtectionConfigGetterGetProxyListParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private IpProtectionConfigGetterGetProxyListParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IpProtectionConfigGetterGetProxyListParams() {
            this(0);
        }

        public static IpProtectionConfigGetterGetProxyListParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IpProtectionConfigGetterGetProxyListParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IpProtectionConfigGetterGetProxyListParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IpProtectionConfigGetterGetProxyListParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IpProtectionConfigGetterGetProxyListParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class IpProtectionConfigGetterGetProxyListResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String[] proxyList;

        private IpProtectionConfigGetterGetProxyListResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public IpProtectionConfigGetterGetProxyListResponseParams() {
            this(0);
        }

        public static IpProtectionConfigGetterGetProxyListResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static IpProtectionConfigGetterGetProxyListResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static IpProtectionConfigGetterGetProxyListResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            IpProtectionConfigGetterGetProxyListResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new IpProtectionConfigGetterGetProxyListResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    if (decoder1 == null) {
                        result.proxyList = null;
                    } else {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.proxyList = new String[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            result.proxyList[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        }
                    }
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            if (this.proxyList == null) {
                encoder0.encodeNullPointer(8, true);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.proxyList.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.proxyList.length; ++i0) {

                    encoder1.encode(this.proxyList[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class IpProtectionConfigGetterGetProxyListResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final IpProtectionConfigGetter.GetProxyList_Response mCallback;

        IpProtectionConfigGetterGetProxyListResponseParamsForwardToCallback(IpProtectionConfigGetter.GetProxyList_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_PROXY_LIST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                IpProtectionConfigGetterGetProxyListResponseParams response = IpProtectionConfigGetterGetProxyListResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.proxyList);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class IpProtectionConfigGetterGetProxyListResponseParamsProxyToResponder implements IpProtectionConfigGetter.GetProxyList_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        IpProtectionConfigGetterGetProxyListResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(String[] proxyList) {
            IpProtectionConfigGetterGetProxyListResponseParams _response = new IpProtectionConfigGetterGetProxyListResponseParams();

            _response.proxyList = proxyList;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(GET_PROXY_LIST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


}
