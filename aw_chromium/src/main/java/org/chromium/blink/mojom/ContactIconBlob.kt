// ContactIconBlob.java is auto generated by mojom_bindings_generator.py, do not edit
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/contacts/contacts_manager.mojom
//
package org.chromium.blink.mojom

import org.chromium.mojo.bindings.BindingsHelper
import org.chromium.mojo.bindings.DataHeader
import org.chromium.mojo.bindings.Decoder
import org.chromium.mojo.bindings.Encoder
import org.chromium.mojo.bindings.Message
import org.chromium.mojo.bindings.Struct
import java.nio.ByteBuffer

class ContactIconBlob private constructor(version: Int) : Struct(STRUCT_SIZE, version) {
    var mimeType: String? = null
    lateinit var data: ByteArray

    override fun encode(encoder: Encoder) {
        val encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO)
        encoder0.encode(mimeType, 8, false)
        encoder0.encode(
            data, 16, BindingsHelper.NOTHING_NULLABLE, BindingsHelper.UNSPECIFIED_ARRAY_LENGTH
        )
    }

    companion object {
        private const val STRUCT_SIZE = 24
        private val VERSION_ARRAY = arrayOf(DataHeader(24, 0))
        private val DEFAULT_STRUCT_INFO = VERSION_ARRAY[0]
        fun deserialize(message: Message?): ContactIconBlob? {
            return decode(Decoder(message))
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        fun deserialize(data: ByteBuffer?): ContactIconBlob? {
            return deserialize(
                Message(
                    data, ArrayList()
                )
            )
        }

        fun decode(decoder0: Decoder?): ContactIconBlob? {
            if (decoder0 == null) {
                return null
            }
            decoder0.increaseStackDepth()
            val result: ContactIconBlob
            try {
                val mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY)
                val elementsOrVersion = mainDataHeader.elementsOrVersion
                result = ContactIconBlob(elementsOrVersion)
                run { result.mimeType = decoder0.readString(8, false) }
                run {
                    result.data = decoder0.readBytes(
                        16, BindingsHelper.NOTHING_NULLABLE, BindingsHelper.UNSPECIFIED_ARRAY_LENGTH
                    )
                }
            } finally {
                decoder0.decreaseStackDepth()
            }
            return result
        }
    }
}