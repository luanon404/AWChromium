// WebPreferences.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/webpreferences/web_preferences.mojom
//

package org.chromium.blink.mojom;


public final class WebPreferences extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 288;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(288, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public java.util.Map<String, org.chromium.mojo_base.mojom.String16> standardFontFamilyMap;
    public java.util.Map<String, org.chromium.mojo_base.mojom.String16> fixedFontFamilyMap;
    public java.util.Map<String, org.chromium.mojo_base.mojom.String16> serifFontFamilyMap;
    public java.util.Map<String, org.chromium.mojo_base.mojom.String16> sansSerifFontFamilyMap;
    public java.util.Map<String, org.chromium.mojo_base.mojom.String16> cursiveFontFamilyMap;
    public java.util.Map<String, org.chromium.mojo_base.mojom.String16> fantasyFontFamilyMap;
    public java.util.Map<String, org.chromium.mojo_base.mojom.String16> mathFontFamilyMap;
    public int defaultFontSize;
    public int defaultFixedFontSize;
    public int minimumFontSize;
    public int minimumLogicalFontSize;
    public String defaultEncoding;
    public boolean contextMenuOnMouseUp;
    public boolean javascriptEnabled;
    public boolean webSecurityEnabled;
    public boolean loadsImagesAutomatically;
    public boolean imagesEnabled;
    public boolean pluginsEnabled;
    public boolean domPasteEnabled;
    public boolean shrinksStandaloneImagesToFit;
    public boolean textAreasAreResizable;
    public boolean allowScriptsToCloseWindows;
    public boolean remoteFontsEnabled;
    public boolean javascriptCanAccessClipboard;
    public boolean dnsPrefetchingEnabled;
    public boolean dataSaverEnabled;
    public boolean localStorageEnabled;
    public boolean databasesEnabled;
    public boolean tabsToLinks;
    public boolean disableIpcFloodingProtection;
    public boolean hyperlinkAuditingEnabled;
    public boolean allowUniversalAccessFromFileUrls;
    public boolean allowFileAccessFromFileUrls;
    public boolean webgl1Enabled;
    public boolean webgl2Enabled;
    public boolean pepper3dEnabled;
    public boolean privilegedWebglExtensionsEnabled;
    public boolean webglErrorsToConsoleEnabled;
    public boolean hideScrollbars;
    public boolean enableWebkitScrollbarStyling;
    public boolean accelerated2dCanvasEnabled;
    public boolean canvas2dLayersEnabled;
    public boolean antialiased2dCanvasDisabled;
    public boolean antialiasedClips2dCanvasEnabled;
    public boolean acceleratedFiltersEnabled;
    public boolean deferredFiltersEnabled;
    public boolean containerCullingEnabled;
    public boolean allowRunningInsecureContent;
    public boolean disableReadingFromCanvas;
    public boolean strictMixedContentChecking;
    public boolean strictPowerfulFeatureRestrictions;
    public boolean allowGeolocationOnInsecureOrigins;
    public boolean strictlyBlockBlockableMixedContent;
    public boolean blockMixedPluginContent;
    public boolean passwordEchoEnabled;
    public boolean shouldClearDocumentBackground;
    public boolean enableScrollAnimator;
    public boolean prefersReducedMotion;
    public boolean prefersReducedTransparency;
    public boolean invertedColors;
    public boolean touchEventFeatureDetectionEnabled;
    public int pointerEventsMaxTouchPoints;
    public int availablePointerTypes;
    public int primaryPointerType;
    public int outputDeviceUpdateAbilityType;
    public int availableHoverTypes;
    public int primaryHoverType;
    public boolean dontSendKeyEventsToJavascript;
    public boolean barrelButtonForDragEnabled;
    public boolean syncXhrInDocumentsEnabled;
    public boolean targetBlankImpliesNoOpenerEnabledWillBeRemoved;
    public boolean allowNonEmptyNavigatorPlugins;
    public int numberOfCpuCores;
    public int editingBehavior;
    public boolean supportsMultipleWindows;
    public boolean viewportEnabled;
    public boolean viewportMetaEnabled;
    public boolean autoZoomFocusedEditableToLegibleScale;
    public boolean shrinksViewportContentsToFit;
    public int viewportStyle;
    public boolean smoothScrollForFindEnabled;
    public boolean mainFrameResizesAreOrientationChanges;
    public boolean initializeAtMinimumPageScale;
    public boolean smartInsertDeleteEnabled;
    public boolean spatialNavigationEnabled;
    public boolean fakeNoAllocDirectCallForTestingEnabled;
    public int v8CacheOptions;
    public boolean recordWholeDocument;
    public boolean stylusHandwritingEnabled;
    public boolean cookieEnabled;
    public boolean acceleratedVideoDecodeEnabled;
    public int animationPolicy;
    public boolean userGestureRequiredForPresentation;
    public boolean textTracksEnabled;
    public String textTrackBackgroundColor;
    public String textTrackTextColor;
    public String textTrackTextSize;
    public String textTrackTextShadow;
    public String textTrackFontFamily;
    public String textTrackFontStyle;
    public String textTrackFontVariant;
    public String textTrackWindowColor;
    public String textTrackWindowRadius;
    public float textTrackMarginPercentage;
    public boolean immersiveModeEnabled;
    public boolean doubleTapToZoomEnabled;
    public boolean fullscreenSupported;
    public boolean textAutosizingEnabled;
    public org.chromium.url.mojom.Url webAppScope;
    public float fontScaleFactor;
    public int fontWeightAdjustment;
    public int textSizeContrastFactor;
    public float deviceScaleAdjustment;
    public boolean forceEnableZoom;
    public org.chromium.url.mojom.Url defaultVideoPosterUrl;
    public boolean supportDeprecatedTargetDensityDpi;
    public boolean useLegacyBackgroundSizeShorthandBehavior;
    public boolean wideViewportQuirk;
    public boolean useWideViewport;
    public boolean forceZeroLayoutHeight;
    public boolean viewportMetaMergeContentQuirk;
    public boolean viewportMetaNonUserScalableQuirk;
    public boolean viewportMetaZeroValuesQuirk;
    public boolean clobberUserAgentInitialScaleQuirk;
    public boolean ignoreMainFrameOverflowHiddenQuirk;
    public boolean reportScreenSizeInPhysicalPixelsQuirk;
    public boolean reuseGlobalForUnownedMainFrame;
    public boolean spellcheckEnabledByDefault;
    public boolean videoFullscreenOrientationLockEnabled;
    public boolean videoRotateToFullscreenEnabled;
    public boolean embeddedMediaExperienceEnabled;
    public boolean cssHexAlphaColorEnabled;
    public boolean scrollTopLeftInteropEnabled;
    public boolean disableAcceleratedSmallCanvases;
    public boolean disableWebauthn;
    public boolean forceDarkModeEnabled;
    public float defaultMinimumPageScaleFactor;
    public float defaultMaximumPageScaleFactor;
    public boolean hideDownloadUi;
    public boolean presentationReceiver;
    public boolean mediaControlsEnabled;
    public boolean doNotUpdateSelectionOnMutatingSelectionRange;
    public int autoplayPolicy;
    public boolean requireTransientActivationForGetDisplayMedia;
    public boolean requireTransientActivationForShowFileOrDirectoryPicker;
    public int preferredColorScheme;
    public int preferredContrast;
    public int lowPriorityIframesThreshold;
    public boolean pictureInPictureEnabled;
    public boolean translateServiceAvailable;
    public int networkQualityEstimatorWebHoldback;
    public boolean lazyLoadEnabled;
    public boolean allowMixedContentUpgrades;
    public boolean alwaysShowFocus;
    public boolean touchDragDropEnabled;
    public boolean webxrImmersiveArAllowed;
    public boolean rendererWideNamedFrameLookup;
    public boolean strictMimeTypeCheckForWorkerScriptsEnabled;
    public boolean modalContextMenu;

    private WebPreferences(int version) {
        super(STRUCT_SIZE, version);
        this.strictMimeTypeCheckForWorkerScriptsEnabled = (boolean) true;
        this.modalContextMenu = (boolean) true;
    }

    public WebPreferences() {
        this(0);
    }

    public static WebPreferences deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static WebPreferences deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static WebPreferences decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        WebPreferences result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new WebPreferences(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    org.chromium.mojo_base.mojom.String16[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
                            }
                        }
                    }
                    result.standardFontFamilyMap = new java.util.HashMap<String, org.chromium.mojo_base.mojom.String16>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.standardFontFamilyMap.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    org.chromium.mojo_base.mojom.String16[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
                            }
                        }
                    }
                    result.fixedFontFamilyMap = new java.util.HashMap<String, org.chromium.mojo_base.mojom.String16>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.fixedFontFamilyMap.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    org.chromium.mojo_base.mojom.String16[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
                            }
                        }
                    }
                    result.serifFontFamilyMap = new java.util.HashMap<String, org.chromium.mojo_base.mojom.String16>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.serifFontFamilyMap.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    org.chromium.mojo_base.mojom.String16[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
                            }
                        }
                    }
                    result.sansSerifFontFamilyMap = new java.util.HashMap<String, org.chromium.mojo_base.mojom.String16>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.sansSerifFontFamilyMap.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    org.chromium.mojo_base.mojom.String16[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
                            }
                        }
                    }
                    result.cursiveFontFamilyMap = new java.util.HashMap<String, org.chromium.mojo_base.mojom.String16>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.cursiveFontFamilyMap.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    org.chromium.mojo_base.mojom.String16[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
                            }
                        }
                    }
                    result.fantasyFontFamilyMap = new java.util.HashMap<String, org.chromium.mojo_base.mojom.String16>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.fantasyFontFamilyMap.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    org.chromium.mojo_base.mojom.String16[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new org.chromium.mojo_base.mojom.String16[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = org.chromium.mojo_base.mojom.String16.decode(decoder3);
                            }
                        }
                    }
                    result.mathFontFamilyMap = new java.util.HashMap<String, org.chromium.mojo_base.mojom.String16>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.mathFontFamilyMap.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                result.defaultFontSize = decoder0.readInt(64);
                }
                {
                    
                result.defaultFixedFontSize = decoder0.readInt(68);
                }
                {
                    
                result.minimumFontSize = decoder0.readInt(72);
                }
                {
                    
                result.minimumLogicalFontSize = decoder0.readInt(76);
                }
                {
                    
                result.defaultEncoding = decoder0.readString(80, false);
                }
                {
                    
                result.contextMenuOnMouseUp = decoder0.readBoolean(88, 0);
                }
                {
                    
                result.javascriptEnabled = decoder0.readBoolean(88, 1);
                }
                {
                    
                result.webSecurityEnabled = decoder0.readBoolean(88, 2);
                }
                {
                    
                result.loadsImagesAutomatically = decoder0.readBoolean(88, 3);
                }
                {
                    
                result.imagesEnabled = decoder0.readBoolean(88, 4);
                }
                {
                    
                result.pluginsEnabled = decoder0.readBoolean(88, 5);
                }
                {
                    
                result.domPasteEnabled = decoder0.readBoolean(88, 6);
                }
                {
                    
                result.shrinksStandaloneImagesToFit = decoder0.readBoolean(88, 7);
                }
                {
                    
                result.textAreasAreResizable = decoder0.readBoolean(89, 0);
                }
                {
                    
                result.allowScriptsToCloseWindows = decoder0.readBoolean(89, 1);
                }
                {
                    
                result.remoteFontsEnabled = decoder0.readBoolean(89, 2);
                }
                {
                    
                result.javascriptCanAccessClipboard = decoder0.readBoolean(89, 3);
                }
                {
                    
                result.dnsPrefetchingEnabled = decoder0.readBoolean(89, 4);
                }
                {
                    
                result.dataSaverEnabled = decoder0.readBoolean(89, 5);
                }
                {
                    
                result.localStorageEnabled = decoder0.readBoolean(89, 6);
                }
                {
                    
                result.databasesEnabled = decoder0.readBoolean(89, 7);
                }
                {
                    
                result.tabsToLinks = decoder0.readBoolean(90, 0);
                }
                {
                    
                result.disableIpcFloodingProtection = decoder0.readBoolean(90, 1);
                }
                {
                    
                result.hyperlinkAuditingEnabled = decoder0.readBoolean(90, 2);
                }
                {
                    
                result.allowUniversalAccessFromFileUrls = decoder0.readBoolean(90, 3);
                }
                {
                    
                result.allowFileAccessFromFileUrls = decoder0.readBoolean(90, 4);
                }
                {
                    
                result.webgl1Enabled = decoder0.readBoolean(90, 5);
                }
                {
                    
                result.webgl2Enabled = decoder0.readBoolean(90, 6);
                }
                {
                    
                result.pepper3dEnabled = decoder0.readBoolean(90, 7);
                }
                {
                    
                result.privilegedWebglExtensionsEnabled = decoder0.readBoolean(91, 0);
                }
                {
                    
                result.webglErrorsToConsoleEnabled = decoder0.readBoolean(91, 1);
                }
                {
                    
                result.hideScrollbars = decoder0.readBoolean(91, 2);
                }
                {
                    
                result.enableWebkitScrollbarStyling = decoder0.readBoolean(91, 3);
                }
                {
                    
                result.accelerated2dCanvasEnabled = decoder0.readBoolean(91, 4);
                }
                {
                    
                result.canvas2dLayersEnabled = decoder0.readBoolean(91, 5);
                }
                {
                    
                result.antialiased2dCanvasDisabled = decoder0.readBoolean(91, 6);
                }
                {
                    
                result.antialiasedClips2dCanvasEnabled = decoder0.readBoolean(91, 7);
                }
                {
                    
                result.acceleratedFiltersEnabled = decoder0.readBoolean(92, 0);
                }
                {
                    
                result.deferredFiltersEnabled = decoder0.readBoolean(92, 1);
                }
                {
                    
                result.containerCullingEnabled = decoder0.readBoolean(92, 2);
                }
                {
                    
                result.allowRunningInsecureContent = decoder0.readBoolean(92, 3);
                }
                {
                    
                result.disableReadingFromCanvas = decoder0.readBoolean(92, 4);
                }
                {
                    
                result.strictMixedContentChecking = decoder0.readBoolean(92, 5);
                }
                {
                    
                result.strictPowerfulFeatureRestrictions = decoder0.readBoolean(92, 6);
                }
                {
                    
                result.allowGeolocationOnInsecureOrigins = decoder0.readBoolean(92, 7);
                }
                {
                    
                result.strictlyBlockBlockableMixedContent = decoder0.readBoolean(93, 0);
                }
                {
                    
                result.blockMixedPluginContent = decoder0.readBoolean(93, 1);
                }
                {
                    
                result.passwordEchoEnabled = decoder0.readBoolean(93, 2);
                }
                {
                    
                result.shouldClearDocumentBackground = decoder0.readBoolean(93, 3);
                }
                {
                    
                result.enableScrollAnimator = decoder0.readBoolean(93, 4);
                }
                {
                    
                result.prefersReducedMotion = decoder0.readBoolean(93, 5);
                }
                {
                    
                result.prefersReducedTransparency = decoder0.readBoolean(93, 6);
                }
                {
                    
                result.invertedColors = decoder0.readBoolean(93, 7);
                }
                {
                    
                result.touchEventFeatureDetectionEnabled = decoder0.readBoolean(94, 0);
                }
                {
                    
                result.dontSendKeyEventsToJavascript = decoder0.readBoolean(94, 1);
                }
                {
                    
                result.barrelButtonForDragEnabled = decoder0.readBoolean(94, 2);
                }
                {
                    
                result.syncXhrInDocumentsEnabled = decoder0.readBoolean(94, 3);
                }
                {
                    
                result.targetBlankImpliesNoOpenerEnabledWillBeRemoved = decoder0.readBoolean(94, 4);
                }
                {
                    
                result.allowNonEmptyNavigatorPlugins = decoder0.readBoolean(94, 5);
                }
                {
                    
                result.supportsMultipleWindows = decoder0.readBoolean(94, 6);
                }
                {
                    
                result.viewportEnabled = decoder0.readBoolean(94, 7);
                }
                {
                    
                result.viewportMetaEnabled = decoder0.readBoolean(95, 0);
                }
                {
                    
                result.autoZoomFocusedEditableToLegibleScale = decoder0.readBoolean(95, 1);
                }
                {
                    
                result.shrinksViewportContentsToFit = decoder0.readBoolean(95, 2);
                }
                {
                    
                result.smoothScrollForFindEnabled = decoder0.readBoolean(95, 3);
                }
                {
                    
                result.mainFrameResizesAreOrientationChanges = decoder0.readBoolean(95, 4);
                }
                {
                    
                result.initializeAtMinimumPageScale = decoder0.readBoolean(95, 5);
                }
                {
                    
                result.smartInsertDeleteEnabled = decoder0.readBoolean(95, 6);
                }
                {
                    
                result.spatialNavigationEnabled = decoder0.readBoolean(95, 7);
                }
                {
                    
                result.pointerEventsMaxTouchPoints = decoder0.readInt(96);
                }
                {
                    
                result.availablePointerTypes = decoder0.readInt(100);
                }
                {
                    
                result.primaryPointerType = decoder0.readInt(104);
                    PointerType.validate(result.primaryPointerType);
                    result.primaryPointerType = PointerType.toKnownValue(result.primaryPointerType);
                }
                {
                    
                result.outputDeviceUpdateAbilityType = decoder0.readInt(108);
                    OutputDeviceUpdateAbilityType.validate(result.outputDeviceUpdateAbilityType);
                    result.outputDeviceUpdateAbilityType = OutputDeviceUpdateAbilityType.toKnownValue(result.outputDeviceUpdateAbilityType);
                }
                {
                    
                result.availableHoverTypes = decoder0.readInt(112);
                }
                {
                    
                result.primaryHoverType = decoder0.readInt(116);
                    HoverType.validate(result.primaryHoverType);
                    result.primaryHoverType = HoverType.toKnownValue(result.primaryHoverType);
                }
                {
                    
                result.numberOfCpuCores = decoder0.readInt(120);
                }
                {
                    
                result.editingBehavior = decoder0.readInt(124);
                    EditingBehavior.validate(result.editingBehavior);
                    result.editingBehavior = EditingBehavior.toKnownValue(result.editingBehavior);
                }
                {
                    
                result.viewportStyle = decoder0.readInt(128);
                    ViewportStyle.validate(result.viewportStyle);
                    result.viewportStyle = ViewportStyle.toKnownValue(result.viewportStyle);
                }
                {
                    
                result.fakeNoAllocDirectCallForTestingEnabled = decoder0.readBoolean(132, 0);
                }
                {
                    
                result.recordWholeDocument = decoder0.readBoolean(132, 1);
                }
                {
                    
                result.stylusHandwritingEnabled = decoder0.readBoolean(132, 2);
                }
                {
                    
                result.cookieEnabled = decoder0.readBoolean(132, 3);
                }
                {
                    
                result.acceleratedVideoDecodeEnabled = decoder0.readBoolean(132, 4);
                }
                {
                    
                result.userGestureRequiredForPresentation = decoder0.readBoolean(132, 5);
                }
                {
                    
                result.textTracksEnabled = decoder0.readBoolean(132, 6);
                }
                {
                    
                result.immersiveModeEnabled = decoder0.readBoolean(132, 7);
                }
                {
                    
                result.doubleTapToZoomEnabled = decoder0.readBoolean(133, 0);
                }
                {
                    
                result.fullscreenSupported = decoder0.readBoolean(133, 1);
                }
                {
                    
                result.textAutosizingEnabled = decoder0.readBoolean(133, 2);
                }
                {
                    
                result.forceEnableZoom = decoder0.readBoolean(133, 3);
                }
                {
                    
                result.supportDeprecatedTargetDensityDpi = decoder0.readBoolean(133, 4);
                }
                {
                    
                result.useLegacyBackgroundSizeShorthandBehavior = decoder0.readBoolean(133, 5);
                }
                {
                    
                result.wideViewportQuirk = decoder0.readBoolean(133, 6);
                }
                {
                    
                result.useWideViewport = decoder0.readBoolean(133, 7);
                }
                {
                    
                result.forceZeroLayoutHeight = decoder0.readBoolean(134, 0);
                }
                {
                    
                result.viewportMetaMergeContentQuirk = decoder0.readBoolean(134, 1);
                }
                {
                    
                result.viewportMetaNonUserScalableQuirk = decoder0.readBoolean(134, 2);
                }
                {
                    
                result.viewportMetaZeroValuesQuirk = decoder0.readBoolean(134, 3);
                }
                {
                    
                result.clobberUserAgentInitialScaleQuirk = decoder0.readBoolean(134, 4);
                }
                {
                    
                result.ignoreMainFrameOverflowHiddenQuirk = decoder0.readBoolean(134, 5);
                }
                {
                    
                result.reportScreenSizeInPhysicalPixelsQuirk = decoder0.readBoolean(134, 6);
                }
                {
                    
                result.reuseGlobalForUnownedMainFrame = decoder0.readBoolean(134, 7);
                }
                {
                    
                result.spellcheckEnabledByDefault = decoder0.readBoolean(135, 0);
                }
                {
                    
                result.videoFullscreenOrientationLockEnabled = decoder0.readBoolean(135, 1);
                }
                {
                    
                result.videoRotateToFullscreenEnabled = decoder0.readBoolean(135, 2);
                }
                {
                    
                result.embeddedMediaExperienceEnabled = decoder0.readBoolean(135, 3);
                }
                {
                    
                result.cssHexAlphaColorEnabled = decoder0.readBoolean(135, 4);
                }
                {
                    
                result.scrollTopLeftInteropEnabled = decoder0.readBoolean(135, 5);
                }
                {
                    
                result.disableAcceleratedSmallCanvases = decoder0.readBoolean(135, 6);
                }
                {
                    
                result.disableWebauthn = decoder0.readBoolean(135, 7);
                }
                {
                    
                result.v8CacheOptions = decoder0.readInt(136);
                    V8CacheOptions.validate(result.v8CacheOptions);
                    result.v8CacheOptions = V8CacheOptions.toKnownValue(result.v8CacheOptions);
                }
                {
                    
                result.animationPolicy = decoder0.readInt(140);
                    ImageAnimationPolicy.validate(result.animationPolicy);
                    result.animationPolicy = ImageAnimationPolicy.toKnownValue(result.animationPolicy);
                }
                {
                    
                result.textTrackBackgroundColor = decoder0.readString(144, false);
                }
                {
                    
                result.textTrackTextColor = decoder0.readString(152, false);
                }
                {
                    
                result.textTrackTextSize = decoder0.readString(160, false);
                }
                {
                    
                result.textTrackTextShadow = decoder0.readString(168, false);
                }
                {
                    
                result.textTrackFontFamily = decoder0.readString(176, false);
                }
                {
                    
                result.textTrackFontStyle = decoder0.readString(184, false);
                }
                {
                    
                result.textTrackFontVariant = decoder0.readString(192, false);
                }
                {
                    
                result.textTrackWindowColor = decoder0.readString(200, false);
                }
                {
                    
                result.textTrackWindowRadius = decoder0.readString(208, false);
                }
                {
                    
                result.textTrackMarginPercentage = decoder0.readFloat(216);
                }
                {
                    
                result.fontScaleFactor = decoder0.readFloat(220);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(224, false);
                result.webAppScope = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                result.fontWeightAdjustment = decoder0.readInt(232);
                }
                {
                    
                result.textSizeContrastFactor = decoder0.readInt(236);
                }
                {
                    
                result.deviceScaleAdjustment = decoder0.readFloat(240);
                }
                {
                    
                result.forceDarkModeEnabled = decoder0.readBoolean(244, 0);
                }
                {
                    
                result.hideDownloadUi = decoder0.readBoolean(244, 1);
                }
                {
                    
                result.presentationReceiver = decoder0.readBoolean(244, 2);
                }
                {
                    
                result.mediaControlsEnabled = decoder0.readBoolean(244, 3);
                }
                {
                    
                result.doNotUpdateSelectionOnMutatingSelectionRange = decoder0.readBoolean(244, 4);
                }
                {
                    
                result.requireTransientActivationForGetDisplayMedia = decoder0.readBoolean(244, 5);
                }
                {
                    
                result.requireTransientActivationForShowFileOrDirectoryPicker = decoder0.readBoolean(244, 6);
                }
                {
                    
                result.pictureInPictureEnabled = decoder0.readBoolean(244, 7);
                }
                {
                    
                result.translateServiceAvailable = decoder0.readBoolean(245, 0);
                }
                {
                    
                result.lazyLoadEnabled = decoder0.readBoolean(245, 1);
                }
                {
                    
                result.allowMixedContentUpgrades = decoder0.readBoolean(245, 2);
                }
                {
                    
                result.alwaysShowFocus = decoder0.readBoolean(245, 3);
                }
                {
                    
                result.touchDragDropEnabled = decoder0.readBoolean(245, 4);
                }
                {
                    
                result.webxrImmersiveArAllowed = decoder0.readBoolean(245, 5);
                }
                {
                    
                result.rendererWideNamedFrameLookup = decoder0.readBoolean(245, 6);
                }
                {
                    
                result.strictMimeTypeCheckForWorkerScriptsEnabled = decoder0.readBoolean(245, 7);
                }
                {
                    
                result.modalContextMenu = decoder0.readBoolean(246, 0);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(248, false);
                result.defaultVideoPosterUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                result.defaultMinimumPageScaleFactor = decoder0.readFloat(256);
                }
                {
                    
                result.defaultMaximumPageScaleFactor = decoder0.readFloat(260);
                }
                {
                    
                result.autoplayPolicy = decoder0.readInt(264);
                    AutoplayPolicy.validate(result.autoplayPolicy);
                    result.autoplayPolicy = AutoplayPolicy.toKnownValue(result.autoplayPolicy);
                }
                {
                    
                result.preferredColorScheme = decoder0.readInt(268);
                    PreferredColorScheme.validate(result.preferredColorScheme);
                    result.preferredColorScheme = PreferredColorScheme.toKnownValue(result.preferredColorScheme);
                }
                {
                    
                result.preferredContrast = decoder0.readInt(272);
                    PreferredContrast.validate(result.preferredContrast);
                    result.preferredContrast = PreferredContrast.toKnownValue(result.preferredContrast);
                }
                {
                    
                result.lowPriorityIframesThreshold = decoder0.readInt(276);
                    EffectiveConnectionType.validate(result.lowPriorityIframesThreshold);
                    result.lowPriorityIframesThreshold = EffectiveConnectionType.toKnownValue(result.lowPriorityIframesThreshold);
                }
                {
                    
                result.networkQualityEstimatorWebHoldback = decoder0.readInt(280);
                    EffectiveConnectionType.validate(result.networkQualityEstimatorWebHoldback);
                    result.networkQualityEstimatorWebHoldback = EffectiveConnectionType.toKnownValue(result.networkQualityEstimatorWebHoldback);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        if (this.standardFontFamilyMap == null) {
            encoder0.encodeNullPointer(8, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(8);
            int size0 = this.standardFontFamilyMap.size();
            String[] keys0 = new String[size0];
            org.chromium.mojo_base.mojom.String16[] values0 = new org.chromium.mojo_base.mojom.String16[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, org.chromium.mojo_base.mojom.String16> entry0 : this.standardFontFamilyMap.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        if (this.fixedFontFamilyMap == null) {
            encoder0.encodeNullPointer(16, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(16);
            int size0 = this.fixedFontFamilyMap.size();
            String[] keys0 = new String[size0];
            org.chromium.mojo_base.mojom.String16[] values0 = new org.chromium.mojo_base.mojom.String16[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, org.chromium.mojo_base.mojom.String16> entry0 : this.fixedFontFamilyMap.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        if (this.serifFontFamilyMap == null) {
            encoder0.encodeNullPointer(24, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(24);
            int size0 = this.serifFontFamilyMap.size();
            String[] keys0 = new String[size0];
            org.chromium.mojo_base.mojom.String16[] values0 = new org.chromium.mojo_base.mojom.String16[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, org.chromium.mojo_base.mojom.String16> entry0 : this.serifFontFamilyMap.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        if (this.sansSerifFontFamilyMap == null) {
            encoder0.encodeNullPointer(32, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(32);
            int size0 = this.sansSerifFontFamilyMap.size();
            String[] keys0 = new String[size0];
            org.chromium.mojo_base.mojom.String16[] values0 = new org.chromium.mojo_base.mojom.String16[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, org.chromium.mojo_base.mojom.String16> entry0 : this.sansSerifFontFamilyMap.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        if (this.cursiveFontFamilyMap == null) {
            encoder0.encodeNullPointer(40, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(40);
            int size0 = this.cursiveFontFamilyMap.size();
            String[] keys0 = new String[size0];
            org.chromium.mojo_base.mojom.String16[] values0 = new org.chromium.mojo_base.mojom.String16[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, org.chromium.mojo_base.mojom.String16> entry0 : this.cursiveFontFamilyMap.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        if (this.fantasyFontFamilyMap == null) {
            encoder0.encodeNullPointer(48, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(48);
            int size0 = this.fantasyFontFamilyMap.size();
            String[] keys0 = new String[size0];
            org.chromium.mojo_base.mojom.String16[] values0 = new org.chromium.mojo_base.mojom.String16[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, org.chromium.mojo_base.mojom.String16> entry0 : this.fantasyFontFamilyMap.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        if (this.mathFontFamilyMap == null) {
            encoder0.encodeNullPointer(56, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(56);
            int size0 = this.mathFontFamilyMap.size();
            String[] keys0 = new String[size0];
            org.chromium.mojo_base.mojom.String16[] values0 = new org.chromium.mojo_base.mojom.String16[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, org.chromium.mojo_base.mojom.String16> entry0 : this.mathFontFamilyMap.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        encoder0.encode(this.defaultFontSize, 64);
        
        encoder0.encode(this.defaultFixedFontSize, 68);
        
        encoder0.encode(this.minimumFontSize, 72);
        
        encoder0.encode(this.minimumLogicalFontSize, 76);
        
        encoder0.encode(this.defaultEncoding, 80, false);
        
        encoder0.encode(this.contextMenuOnMouseUp, 88, 0);
        
        encoder0.encode(this.javascriptEnabled, 88, 1);
        
        encoder0.encode(this.webSecurityEnabled, 88, 2);
        
        encoder0.encode(this.loadsImagesAutomatically, 88, 3);
        
        encoder0.encode(this.imagesEnabled, 88, 4);
        
        encoder0.encode(this.pluginsEnabled, 88, 5);
        
        encoder0.encode(this.domPasteEnabled, 88, 6);
        
        encoder0.encode(this.shrinksStandaloneImagesToFit, 88, 7);
        
        encoder0.encode(this.textAreasAreResizable, 89, 0);
        
        encoder0.encode(this.allowScriptsToCloseWindows, 89, 1);
        
        encoder0.encode(this.remoteFontsEnabled, 89, 2);
        
        encoder0.encode(this.javascriptCanAccessClipboard, 89, 3);
        
        encoder0.encode(this.dnsPrefetchingEnabled, 89, 4);
        
        encoder0.encode(this.dataSaverEnabled, 89, 5);
        
        encoder0.encode(this.localStorageEnabled, 89, 6);
        
        encoder0.encode(this.databasesEnabled, 89, 7);
        
        encoder0.encode(this.tabsToLinks, 90, 0);
        
        encoder0.encode(this.disableIpcFloodingProtection, 90, 1);
        
        encoder0.encode(this.hyperlinkAuditingEnabled, 90, 2);
        
        encoder0.encode(this.allowUniversalAccessFromFileUrls, 90, 3);
        
        encoder0.encode(this.allowFileAccessFromFileUrls, 90, 4);
        
        encoder0.encode(this.webgl1Enabled, 90, 5);
        
        encoder0.encode(this.webgl2Enabled, 90, 6);
        
        encoder0.encode(this.pepper3dEnabled, 90, 7);
        
        encoder0.encode(this.privilegedWebglExtensionsEnabled, 91, 0);
        
        encoder0.encode(this.webglErrorsToConsoleEnabled, 91, 1);
        
        encoder0.encode(this.hideScrollbars, 91, 2);
        
        encoder0.encode(this.enableWebkitScrollbarStyling, 91, 3);
        
        encoder0.encode(this.accelerated2dCanvasEnabled, 91, 4);
        
        encoder0.encode(this.canvas2dLayersEnabled, 91, 5);
        
        encoder0.encode(this.antialiased2dCanvasDisabled, 91, 6);
        
        encoder0.encode(this.antialiasedClips2dCanvasEnabled, 91, 7);
        
        encoder0.encode(this.acceleratedFiltersEnabled, 92, 0);
        
        encoder0.encode(this.deferredFiltersEnabled, 92, 1);
        
        encoder0.encode(this.containerCullingEnabled, 92, 2);
        
        encoder0.encode(this.allowRunningInsecureContent, 92, 3);
        
        encoder0.encode(this.disableReadingFromCanvas, 92, 4);
        
        encoder0.encode(this.strictMixedContentChecking, 92, 5);
        
        encoder0.encode(this.strictPowerfulFeatureRestrictions, 92, 6);
        
        encoder0.encode(this.allowGeolocationOnInsecureOrigins, 92, 7);
        
        encoder0.encode(this.strictlyBlockBlockableMixedContent, 93, 0);
        
        encoder0.encode(this.blockMixedPluginContent, 93, 1);
        
        encoder0.encode(this.passwordEchoEnabled, 93, 2);
        
        encoder0.encode(this.shouldClearDocumentBackground, 93, 3);
        
        encoder0.encode(this.enableScrollAnimator, 93, 4);
        
        encoder0.encode(this.prefersReducedMotion, 93, 5);
        
        encoder0.encode(this.prefersReducedTransparency, 93, 6);
        
        encoder0.encode(this.invertedColors, 93, 7);
        
        encoder0.encode(this.touchEventFeatureDetectionEnabled, 94, 0);
        
        encoder0.encode(this.dontSendKeyEventsToJavascript, 94, 1);
        
        encoder0.encode(this.barrelButtonForDragEnabled, 94, 2);
        
        encoder0.encode(this.syncXhrInDocumentsEnabled, 94, 3);
        
        encoder0.encode(this.targetBlankImpliesNoOpenerEnabledWillBeRemoved, 94, 4);
        
        encoder0.encode(this.allowNonEmptyNavigatorPlugins, 94, 5);
        
        encoder0.encode(this.supportsMultipleWindows, 94, 6);
        
        encoder0.encode(this.viewportEnabled, 94, 7);
        
        encoder0.encode(this.viewportMetaEnabled, 95, 0);
        
        encoder0.encode(this.autoZoomFocusedEditableToLegibleScale, 95, 1);
        
        encoder0.encode(this.shrinksViewportContentsToFit, 95, 2);
        
        encoder0.encode(this.smoothScrollForFindEnabled, 95, 3);
        
        encoder0.encode(this.mainFrameResizesAreOrientationChanges, 95, 4);
        
        encoder0.encode(this.initializeAtMinimumPageScale, 95, 5);
        
        encoder0.encode(this.smartInsertDeleteEnabled, 95, 6);
        
        encoder0.encode(this.spatialNavigationEnabled, 95, 7);
        
        encoder0.encode(this.pointerEventsMaxTouchPoints, 96);
        
        encoder0.encode(this.availablePointerTypes, 100);
        
        encoder0.encode(this.primaryPointerType, 104);
        
        encoder0.encode(this.outputDeviceUpdateAbilityType, 108);
        
        encoder0.encode(this.availableHoverTypes, 112);
        
        encoder0.encode(this.primaryHoverType, 116);
        
        encoder0.encode(this.numberOfCpuCores, 120);
        
        encoder0.encode(this.editingBehavior, 124);
        
        encoder0.encode(this.viewportStyle, 128);
        
        encoder0.encode(this.fakeNoAllocDirectCallForTestingEnabled, 132, 0);
        
        encoder0.encode(this.recordWholeDocument, 132, 1);
        
        encoder0.encode(this.stylusHandwritingEnabled, 132, 2);
        
        encoder0.encode(this.cookieEnabled, 132, 3);
        
        encoder0.encode(this.acceleratedVideoDecodeEnabled, 132, 4);
        
        encoder0.encode(this.userGestureRequiredForPresentation, 132, 5);
        
        encoder0.encode(this.textTracksEnabled, 132, 6);
        
        encoder0.encode(this.immersiveModeEnabled, 132, 7);
        
        encoder0.encode(this.doubleTapToZoomEnabled, 133, 0);
        
        encoder0.encode(this.fullscreenSupported, 133, 1);
        
        encoder0.encode(this.textAutosizingEnabled, 133, 2);
        
        encoder0.encode(this.forceEnableZoom, 133, 3);
        
        encoder0.encode(this.supportDeprecatedTargetDensityDpi, 133, 4);
        
        encoder0.encode(this.useLegacyBackgroundSizeShorthandBehavior, 133, 5);
        
        encoder0.encode(this.wideViewportQuirk, 133, 6);
        
        encoder0.encode(this.useWideViewport, 133, 7);
        
        encoder0.encode(this.forceZeroLayoutHeight, 134, 0);
        
        encoder0.encode(this.viewportMetaMergeContentQuirk, 134, 1);
        
        encoder0.encode(this.viewportMetaNonUserScalableQuirk, 134, 2);
        
        encoder0.encode(this.viewportMetaZeroValuesQuirk, 134, 3);
        
        encoder0.encode(this.clobberUserAgentInitialScaleQuirk, 134, 4);
        
        encoder0.encode(this.ignoreMainFrameOverflowHiddenQuirk, 134, 5);
        
        encoder0.encode(this.reportScreenSizeInPhysicalPixelsQuirk, 134, 6);
        
        encoder0.encode(this.reuseGlobalForUnownedMainFrame, 134, 7);
        
        encoder0.encode(this.spellcheckEnabledByDefault, 135, 0);
        
        encoder0.encode(this.videoFullscreenOrientationLockEnabled, 135, 1);
        
        encoder0.encode(this.videoRotateToFullscreenEnabled, 135, 2);
        
        encoder0.encode(this.embeddedMediaExperienceEnabled, 135, 3);
        
        encoder0.encode(this.cssHexAlphaColorEnabled, 135, 4);
        
        encoder0.encode(this.scrollTopLeftInteropEnabled, 135, 5);
        
        encoder0.encode(this.disableAcceleratedSmallCanvases, 135, 6);
        
        encoder0.encode(this.disableWebauthn, 135, 7);
        
        encoder0.encode(this.v8CacheOptions, 136);
        
        encoder0.encode(this.animationPolicy, 140);
        
        encoder0.encode(this.textTrackBackgroundColor, 144, false);
        
        encoder0.encode(this.textTrackTextColor, 152, false);
        
        encoder0.encode(this.textTrackTextSize, 160, false);
        
        encoder0.encode(this.textTrackTextShadow, 168, false);
        
        encoder0.encode(this.textTrackFontFamily, 176, false);
        
        encoder0.encode(this.textTrackFontStyle, 184, false);
        
        encoder0.encode(this.textTrackFontVariant, 192, false);
        
        encoder0.encode(this.textTrackWindowColor, 200, false);
        
        encoder0.encode(this.textTrackWindowRadius, 208, false);
        
        encoder0.encode(this.textTrackMarginPercentage, 216);
        
        encoder0.encode(this.fontScaleFactor, 220);
        
        encoder0.encode(this.webAppScope, 224, false);
        
        encoder0.encode(this.fontWeightAdjustment, 232);
        
        encoder0.encode(this.textSizeContrastFactor, 236);
        
        encoder0.encode(this.deviceScaleAdjustment, 240);
        
        encoder0.encode(this.forceDarkModeEnabled, 244, 0);
        
        encoder0.encode(this.hideDownloadUi, 244, 1);
        
        encoder0.encode(this.presentationReceiver, 244, 2);
        
        encoder0.encode(this.mediaControlsEnabled, 244, 3);
        
        encoder0.encode(this.doNotUpdateSelectionOnMutatingSelectionRange, 244, 4);
        
        encoder0.encode(this.requireTransientActivationForGetDisplayMedia, 244, 5);
        
        encoder0.encode(this.requireTransientActivationForShowFileOrDirectoryPicker, 244, 6);
        
        encoder0.encode(this.pictureInPictureEnabled, 244, 7);
        
        encoder0.encode(this.translateServiceAvailable, 245, 0);
        
        encoder0.encode(this.lazyLoadEnabled, 245, 1);
        
        encoder0.encode(this.allowMixedContentUpgrades, 245, 2);
        
        encoder0.encode(this.alwaysShowFocus, 245, 3);
        
        encoder0.encode(this.touchDragDropEnabled, 245, 4);
        
        encoder0.encode(this.webxrImmersiveArAllowed, 245, 5);
        
        encoder0.encode(this.rendererWideNamedFrameLookup, 245, 6);
        
        encoder0.encode(this.strictMimeTypeCheckForWorkerScriptsEnabled, 245, 7);
        
        encoder0.encode(this.modalContextMenu, 246, 0);
        
        encoder0.encode(this.defaultVideoPosterUrl, 248, false);
        
        encoder0.encode(this.defaultMinimumPageScaleFactor, 256);
        
        encoder0.encode(this.defaultMaximumPageScaleFactor, 260);
        
        encoder0.encode(this.autoplayPolicy, 264);
        
        encoder0.encode(this.preferredColorScheme, 268);
        
        encoder0.encode(this.preferredContrast, 272);
        
        encoder0.encode(this.lowPriorityIframesThreshold, 276);
        
        encoder0.encode(this.networkQualityEstimatorWebHoldback, 280);
    }
}