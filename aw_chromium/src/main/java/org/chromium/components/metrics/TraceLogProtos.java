// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace_log.proto

package org.chromium.components.metrics;

public final class TraceLogProtos {
    private TraceLogProtos() {
    }

    public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public interface TraceLogOrBuilder extends
            // @@protoc_insertion_point(interface_extends:metrics.TraceLog)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <pre>
         * Client uploads the trace data as a byte buffer.
         * </pre>
         *
         * <code>optional bytes raw_data = 1;</code>
         *
         * @return Whether the rawData field is set.
         */
        boolean hasRawData();

        /**
         * <pre>
         * Client uploads the trace data as a byte buffer.
         * </pre>
         *
         * <code>optional bytes raw_data = 1;</code>
         *
         * @return The rawData.
         */
        com.google.protobuf.ByteString getRawData();

        /**
         * <pre>
         * Some clients compress trace data before upload.
         * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
         * will contain the compressed trace.
         * </pre>
         *
         * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
         *
         * @return Whether the compressionType field is set.
         */
        boolean hasCompressionType();

        /**
         * <pre>
         * Some clients compress trace data before upload.
         * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
         * will contain the compressed trace.
         * </pre>
         *
         * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
         *
         * @return The compressionType.
         */
        org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType getCompressionType();
    }

    /**
     * <pre>
     * Wrapper for the uploaded trace data, and parsed trace as stored in the logs.
     * Next ID: 6
     * </pre>
     * <p>
     * Protobuf type {@code metrics.TraceLog}
     */
    public static final class TraceLog extends com.google.protobuf.GeneratedMessageLite<TraceLog, TraceLog.Builder> implements
            // @@protoc_insertion_point(message_implements:metrics.TraceLog)
            TraceLogOrBuilder {
        private TraceLog() {
            rawData_ = com.google.protobuf.ByteString.EMPTY;
        }

        /**
         * Protobuf enum {@code metrics.TraceLog.CompressionType}
         */
        public enum CompressionType implements com.google.protobuf.Internal.EnumLite {
            /**
             * <code>COMPRESSION_TYPE_NONE = 0;</code>
             */
            COMPRESSION_TYPE_NONE(0),
            /**
             * <code>COMPRESSION_TYPE_ZLIB = 1;</code>
             */
            COMPRESSION_TYPE_ZLIB(1),
            ;

            /**
             * <code>COMPRESSION_TYPE_NONE = 0;</code>
             */
            public static final int COMPRESSION_TYPE_NONE_VALUE = 0;
            /**
             * <code>COMPRESSION_TYPE_ZLIB = 1;</code>
             */
            public static final int COMPRESSION_TYPE_ZLIB_VALUE = 1;


            @java.lang.Override
            public final int getNumber() {
                return value;
            }

            /**
             * @param value The number of the enum to look for.
             * @return The enum associated with the given number.
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static CompressionType valueOf(int value) {
                return forNumber(value);
            }

            public static CompressionType forNumber(int value) {
                switch (value) {
                    case 0:
                        return COMPRESSION_TYPE_NONE;
                    case 1:
                        return COMPRESSION_TYPE_ZLIB;
                    default:
                        return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<CompressionType> internalGetValueMap() {
                return internalValueMap;
            }

            private static final com.google.protobuf.Internal.EnumLiteMap<CompressionType> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<CompressionType>() {
                @java.lang.Override
                public CompressionType findValueByNumber(int number) {
                    return CompressionType.forNumber(number);
                }
            };

            public static com.google.protobuf.Internal.EnumVerifier internalGetVerifier() {
                return CompressionTypeVerifier.INSTANCE;
            }

            private static final class CompressionTypeVerifier implements com.google.protobuf.Internal.EnumVerifier {
                static final com.google.protobuf.Internal.EnumVerifier INSTANCE = new CompressionTypeVerifier();

                @java.lang.Override
                public boolean isInRange(int number) {
                    return CompressionType.forNumber(number) != null;
                }
            }

            private final int value;

            CompressionType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:metrics.TraceLog.CompressionType)
        }

        private int bitField0_;
        public static final int RAW_DATA_FIELD_NUMBER = 1;
        private com.google.protobuf.ByteString rawData_;

        /**
         * <pre>
         * Client uploads the trace data as a byte buffer.
         * </pre>
         *
         * <code>optional bytes raw_data = 1;</code>
         *
         * @return Whether the rawData field is set.
         */
        @java.lang.Override
        public boolean hasRawData() {
            return ((bitField0_ & 0x00000001) != 0);
        }

        /**
         * <pre>
         * Client uploads the trace data as a byte buffer.
         * </pre>
         *
         * <code>optional bytes raw_data = 1;</code>
         *
         * @return The rawData.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getRawData() {
            return rawData_;
        }

        /**
         * <pre>
         * Client uploads the trace data as a byte buffer.
         * </pre>
         *
         * <code>optional bytes raw_data = 1;</code>
         *
         * @param value The rawData to set.
         */
        private void setRawData(com.google.protobuf.ByteString value) {
            value.getClass();
            bitField0_ |= 0x00000001;
            rawData_ = value;
        }

        /**
         * <pre>
         * Client uploads the trace data as a byte buffer.
         * </pre>
         *
         * <code>optional bytes raw_data = 1;</code>
         */
        private void clearRawData() {
            bitField0_ = (bitField0_ & ~0x00000001);
            rawData_ = getDefaultInstance().getRawData();
        }

        public static final int COMPRESSION_TYPE_FIELD_NUMBER = 5;
        private int compressionType_;

        /**
         * <pre>
         * Some clients compress trace data before upload.
         * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
         * will contain the compressed trace.
         * </pre>
         *
         * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
         *
         * @return Whether the compressionType field is set.
         */
        @java.lang.Override
        public boolean hasCompressionType() {
            return ((bitField0_ & 0x00000002) != 0);
        }

        /**
         * <pre>
         * Some clients compress trace data before upload.
         * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
         * will contain the compressed trace.
         * </pre>
         *
         * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
         *
         * @return The compressionType.
         */
        @java.lang.Override
        public org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType getCompressionType() {
            org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType result = org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType.forNumber(compressionType_);
            return result == null ? org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType.COMPRESSION_TYPE_NONE : result;
        }

        /**
         * <pre>
         * Some clients compress trace data before upload.
         * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
         * will contain the compressed trace.
         * </pre>
         *
         * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
         *
         * @param value The compressionType to set.
         */
        private void setCompressionType(org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType value) {
            compressionType_ = value.getNumber();
            bitField0_ |= 0x00000002;
        }

        /**
         * <pre>
         * Some clients compress trace data before upload.
         * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
         * will contain the compressed trace.
         * </pre>
         *
         * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
         */
        private void clearCompressionType() {
            bitField0_ = (bitField0_ & ~0x00000002);
            compressionType_ = 0;
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(com.google.protobuf.ByteString data, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data, extensionRegistry);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(java.io.InputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseDelimitedFrom(java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog parseFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return (Builder) DEFAULT_INSTANCE.createBuilder();
        }

        public static Builder newBuilder(org.chromium.components.metrics.TraceLogProtos.TraceLog prototype) {
            return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
        }

        /**
         * <pre>
         * Wrapper for the uploaded trace data, and parsed trace as stored in the logs.
         * Next ID: 6
         * </pre>
         * <p>
         * Protobuf type {@code metrics.TraceLog}
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<org.chromium.components.metrics.TraceLogProtos.TraceLog, Builder> implements
                // @@protoc_insertion_point(builder_implements:metrics.TraceLog)
                org.chromium.components.metrics.TraceLogProtos.TraceLogOrBuilder {
            // Construct using org.chromium.components.metrics.TraceLogProtos.TraceLog.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <pre>
             * Client uploads the trace data as a byte buffer.
             * </pre>
             *
             * <code>optional bytes raw_data = 1;</code>
             *
             * @return Whether the rawData field is set.
             */
            @java.lang.Override
            public boolean hasRawData() {
                return instance.hasRawData();
            }

            /**
             * <pre>
             * Client uploads the trace data as a byte buffer.
             * </pre>
             *
             * <code>optional bytes raw_data = 1;</code>
             *
             * @return The rawData.
             */
            @java.lang.Override
            public com.google.protobuf.ByteString getRawData() {
                return instance.getRawData();
            }

            /**
             * <pre>
             * Client uploads the trace data as a byte buffer.
             * </pre>
             *
             * <code>optional bytes raw_data = 1;</code>
             *
             * @param value The rawData to set.
             * @return This builder for chaining.
             */
            public Builder setRawData(com.google.protobuf.ByteString value) {
                copyOnWrite();
                instance.setRawData(value);
                return this;
            }

            /**
             * <pre>
             * Client uploads the trace data as a byte buffer.
             * </pre>
             *
             * <code>optional bytes raw_data = 1;</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearRawData() {
                copyOnWrite();
                instance.clearRawData();
                return this;
            }

            /**
             * <pre>
             * Some clients compress trace data before upload.
             * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
             * will contain the compressed trace.
             * </pre>
             *
             * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
             *
             * @return Whether the compressionType field is set.
             */
            @java.lang.Override
            public boolean hasCompressionType() {
                return instance.hasCompressionType();
            }

            /**
             * <pre>
             * Some clients compress trace data before upload.
             * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
             * will contain the compressed trace.
             * </pre>
             *
             * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
             *
             * @return The compressionType.
             */
            @java.lang.Override
            public org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType getCompressionType() {
                return instance.getCompressionType();
            }

            /**
             * <pre>
             * Some clients compress trace data before upload.
             * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
             * will contain the compressed trace.
             * </pre>
             *
             * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
             *
             * @param value The enum numeric value on the wire for compressionType to set.
             * @return This builder for chaining.
             */
            public Builder setCompressionType(org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType value) {
                copyOnWrite();
                instance.setCompressionType(value);
                return this;
            }

            /**
             * <pre>
             * Some clients compress trace data before upload.
             * If this field has a value other than COMPRESSION_TYPE_NONE, |raw_data|
             * will contain the compressed trace.
             * </pre>
             *
             * <code>optional .metrics.TraceLog.CompressionType compression_type = 5 [default = COMPRESSION_TYPE_NONE];</code>
             *
             * @return This builder for chaining.
             */
            public Builder clearCompressionType() {
                copyOnWrite();
                instance.clearCompressionType();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:metrics.TraceLog)
        }

        @java.lang.Override
        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(com.google.protobuf.GeneratedMessageLite.MethodToInvoke method, java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new org.chromium.components.metrics.TraceLogProtos.TraceLog();
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case BUILD_MESSAGE_INFO: {
                    java.lang.Object[] objects = new java.lang.Object[]{"bitField0_", "rawData_", "compressionType_", org.chromium.components.metrics.TraceLogProtos.TraceLog.CompressionType.internalGetVerifier(),};
                    java.lang.String info = "\u0001\u0002\u0000\u0001\u0001\u0005\u0002\u0000\u0000\u0000\u0001\u100a\u0000\u0005" + "\u100c\u0001";
                    return newMessageInfo(DEFAULT_INSTANCE, info, objects);
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    com.google.protobuf.Parser<org.chromium.components.metrics.TraceLogProtos.TraceLog> parser = PARSER;
                    if (parser == null) {
                        synchronized (org.chromium.components.metrics.TraceLogProtos.TraceLog.class) {
                            parser = PARSER;
                            if (parser == null) {
                                parser = new DefaultInstanceBasedParser<org.chromium.components.metrics.TraceLogProtos.TraceLog>(DEFAULT_INSTANCE);
                                PARSER = parser;
                            }
                        }
                    }
                    return parser;
                }
                case GET_MEMOIZED_IS_INITIALIZED: {
                    return (byte) 1;
                }
                case SET_MEMOIZED_IS_INITIALIZED: {
                    return null;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:metrics.TraceLog)
        private static final org.chromium.components.metrics.TraceLogProtos.TraceLog DEFAULT_INSTANCE;

        static {
            TraceLog defaultInstance = new TraceLog();
            // New instances are implicitly immutable so no need to make
            // immutable.
            DEFAULT_INSTANCE = defaultInstance;
            com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(TraceLog.class, defaultInstance);
        }

        public static org.chromium.components.metrics.TraceLogProtos.TraceLog getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<TraceLog> PARSER;

        public static com.google.protobuf.Parser<TraceLog> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }
    }


    static {
    }

    // @@protoc_insertion_point(outer_class_scope)
}
