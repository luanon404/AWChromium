//
// This file was generated by third_party/jni_zero/jni_generator.py
//
package org.chromium.ui.base;

import org.jni_zero.CheckDiscard;
import org.jni_zero.GEN_JNI;
import org.jni_zero.JniStaticTestMocker;
import org.jni_zero.NativeLibraryLoadedStatus;

@CheckDiscard("crbug.com/993421")
class WindowAndroidJni implements WindowAndroid.Natives {
    private static WindowAndroid.Natives testInstance;

    public static final JniStaticTestMocker<WindowAndroid.Natives> TEST_HOOKS = new JniStaticTestMocker<WindowAndroid.Natives>() {
        @Override
        public void setInstanceForTesting(WindowAndroid.Natives instance) {
            if (!GEN_JNI.TESTING_ENABLED) {
                throw new RuntimeException("Tried to set a JNI mock when mocks aren't enabled!");
            }
            testInstance = instance;
        }
    };

    @Override
    public void destroy(long nativeWindowAndroid, WindowAndroid caller) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_destroy(nativeWindowAndroid, caller);
    }

    @Override
    public long init(WindowAndroid caller, int displayId, float scrollFactor, boolean windowIsWideColorGamut) {
        return (long) GEN_JNI.org_chromium_ui_base_WindowAndroid_init(caller, displayId, scrollFactor, windowIsWideColorGamut);
    }

    @Override
    public void onActivityStarted(long nativeWindowAndroid, WindowAndroid caller) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_onActivityStarted(nativeWindowAndroid, caller);
    }

    @Override
    public void onActivityStopped(long nativeWindowAndroid, WindowAndroid caller) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_onActivityStopped(nativeWindowAndroid, caller);
    }

    @Override
    public void onOverlayTransformUpdated(long nativeWindowAndroid, WindowAndroid caller) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_onOverlayTransformUpdated(nativeWindowAndroid, caller);
    }

    @Override
    public void onSupportedRefreshRatesUpdated(long nativeWindowAndroid, WindowAndroid caller, float[] supportedRefreshRates) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_onSupportedRefreshRatesUpdated(nativeWindowAndroid, caller, supportedRefreshRates);
    }

    @Override
    public void onUpdateRefreshRate(long nativeWindowAndroid, WindowAndroid caller, float refreshRate) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_onUpdateRefreshRate(nativeWindowAndroid, caller, refreshRate);
    }

    @Override
    public void onVisibilityChanged(long nativeWindowAndroid, WindowAndroid caller, boolean visible) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_onVisibilityChanged(nativeWindowAndroid, caller, visible);
    }

    @Override
    public void sendUnfoldLatencyBeginTimestamp(long nativeWindowAndroid, long beginTimestampMs) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_sendUnfoldLatencyBeginTimestamp(nativeWindowAndroid, beginTimestampMs);
    }

    @Override
    public void setVSyncPaused(long nativeWindowAndroid, WindowAndroid caller, boolean paused) {
        GEN_JNI.org_chromium_ui_base_WindowAndroid_setVSyncPaused(nativeWindowAndroid, caller, paused);
    }

    public static WindowAndroid.Natives get() {
        if (GEN_JNI.TESTING_ENABLED) {
            if (testInstance != null) {
                return testInstance;
            }
            if (GEN_JNI.REQUIRE_MOCK) {
                throw new UnsupportedOperationException("No mock found for the native implementation of WindowAndroid.Natives. " + "The current configuration requires implementations be mocked.");
            }
        }
        NativeLibraryLoadedStatus.checkLoaded();
        return new WindowAndroidJni();
    }
}
