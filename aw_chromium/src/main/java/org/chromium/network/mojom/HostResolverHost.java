// HostResolverHost.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/host_resolver.mojom
//

package org.chromium.network.mojom;

import androidx.annotation.IntDef;


public final class HostResolverHost extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int SchemeHostPort = 0;
        public static final int HostPortPair = 1;
    };
    private org.chromium.url.mojom.SchemeHostPort mSchemeHostPort;
    private HostPortPair mHostPortPair;

    public void setSchemeHostPort(org.chromium.url.mojom.SchemeHostPort schemeHostPort) {
        this.mTag = Tag.SchemeHostPort;
        this.mSchemeHostPort = schemeHostPort;
    }

    public org.chromium.url.mojom.SchemeHostPort getSchemeHostPort() {
        assert this.mTag == Tag.SchemeHostPort;
        return this.mSchemeHostPort;
    }

    public void setHostPortPair(HostPortPair hostPortPair) {
        this.mTag = Tag.HostPortPair;
        this.mHostPortPair = hostPortPair;
    }

    public HostPortPair getHostPortPair() {
        assert this.mTag == Tag.HostPortPair;
        return this.mHostPortPair;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.SchemeHostPort: {
                
                encoder0.encode(this.mSchemeHostPort, offset + 8, false);
                break;
            }
            case Tag.HostPortPair: {
                
                encoder0.encode(this.mHostPortPair, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static HostResolverHost deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final HostResolverHost decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        HostResolverHost result = new HostResolverHost();
        switch (dataHeader.elementsOrVersion) {
            case Tag.SchemeHostPort: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mSchemeHostPort = org.chromium.url.mojom.SchemeHostPort.decode(decoder1);
                result.mTag = Tag.SchemeHostPort;
                break;
            }
            case Tag.HostPortPair: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mHostPortPair = HostPortPair.decode(decoder1);
                result.mTag = Tag.HostPortPair;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}