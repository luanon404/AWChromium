// MediaStreamDispatcherHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/mediastream/media_stream.mojom
//

package org.chromium.blink.mojom;


class MediaStreamDispatcherHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<MediaStreamDispatcherHost, MediaStreamDispatcherHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<MediaStreamDispatcherHost, MediaStreamDispatcherHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.MediaStreamDispatcherHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, MediaStreamDispatcherHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public MediaStreamDispatcherHost[] buildArray(int size) {
          return new MediaStreamDispatcherHost[size];
        }
    };


    private static final int GENERATE_STREAMS_ORDINAL = 0;

    private static final int CANCEL_REQUEST_ORDINAL = 1;

    private static final int STOP_STREAM_DEVICE_ORDINAL = 2;

    private static final int OPEN_DEVICE_ORDINAL = 3;

    private static final int CLOSE_DEVICE_ORDINAL = 4;

    private static final int SET_CAPTURING_LINK_SECURED_ORDINAL = 5;

    private static final int ON_STREAM_STARTED_ORDINAL = 6;

    private static final int GET_OPEN_DEVICE_ORDINAL = 7;

    private static final int KEEP_DEVICE_ALIVE_FOR_TRANSFER_ORDINAL = 8;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements MediaStreamDispatcherHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void generateStreams(
int requestId, StreamControls controls, boolean userGesture, StreamSelectionInfo audioStreamSelectionInfo, 
GenerateStreams_Response callback) {

            MediaStreamDispatcherHostGenerateStreamsParams _message = new MediaStreamDispatcherHostGenerateStreamsParams();

            _message.requestId = requestId;

            _message.controls = controls;

            _message.userGesture = userGesture;

            _message.audioStreamSelectionInfo = audioStreamSelectionInfo;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GENERATE_STREAMS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaStreamDispatcherHostGenerateStreamsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void cancelRequest(
int requestId) {

            MediaStreamDispatcherHostCancelRequestParams _message = new MediaStreamDispatcherHostCancelRequestParams();

            _message.requestId = requestId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CANCEL_REQUEST_ORDINAL)));

        }


        @Override
        public void stopStreamDevice(
String deviceId, org.chromium.mojo_base.mojom.UnguessableToken sessionId) {

            MediaStreamDispatcherHostStopStreamDeviceParams _message = new MediaStreamDispatcherHostStopStreamDeviceParams();

            _message.deviceId = deviceId;

            _message.sessionId = sessionId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(STOP_STREAM_DEVICE_ORDINAL)));

        }


        @Override
        public void openDevice(
int requestId, String deviceId, int type, 
OpenDevice_Response callback) {

            MediaStreamDispatcherHostOpenDeviceParams _message = new MediaStreamDispatcherHostOpenDeviceParams();

            _message.requestId = requestId;

            _message.deviceId = deviceId;

            _message.type = type;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    OPEN_DEVICE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaStreamDispatcherHostOpenDeviceResponseParamsForwardToCallback(callback));

        }


        @Override
        public void closeDevice(
String label) {

            MediaStreamDispatcherHostCloseDeviceParams _message = new MediaStreamDispatcherHostCloseDeviceParams();

            _message.label = label;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CLOSE_DEVICE_ORDINAL)));

        }


        @Override
        public void setCapturingLinkSecured(
org.chromium.mojo_base.mojom.UnguessableToken sessionId, int type, boolean isSecure) {

            MediaStreamDispatcherHostSetCapturingLinkSecuredParams _message = new MediaStreamDispatcherHostSetCapturingLinkSecuredParams();

            _message.sessionId = sessionId;

            _message.type = type;

            _message.isSecure = isSecure;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_CAPTURING_LINK_SECURED_ORDINAL)));

        }


        @Override
        public void onStreamStarted(
String label) {

            MediaStreamDispatcherHostOnStreamStartedParams _message = new MediaStreamDispatcherHostOnStreamStartedParams();

            _message.label = label;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_STREAM_STARTED_ORDINAL)));

        }


        @Override
        public void getOpenDevice(
int requestId, org.chromium.mojo_base.mojom.UnguessableToken sessionId, org.chromium.mojo_base.mojom.UnguessableToken transferId, 
GetOpenDevice_Response callback) {

            MediaStreamDispatcherHostGetOpenDeviceParams _message = new MediaStreamDispatcherHostGetOpenDeviceParams();

            _message.requestId = requestId;

            _message.sessionId = sessionId;

            _message.transferId = transferId;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_OPEN_DEVICE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaStreamDispatcherHostGetOpenDeviceResponseParamsForwardToCallback(callback));

        }


        @Override
        public void keepDeviceAliveForTransfer(
org.chromium.mojo_base.mojom.UnguessableToken sessionId, org.chromium.mojo_base.mojom.UnguessableToken transferId, 
KeepDeviceAliveForTransfer_Response callback) {

            MediaStreamDispatcherHostKeepDeviceAliveForTransferParams _message = new MediaStreamDispatcherHostKeepDeviceAliveForTransferParams();

            _message.sessionId = sessionId;

            _message.transferId = transferId;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    KEEP_DEVICE_ALIVE_FOR_TRANSFER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<MediaStreamDispatcherHost> {

        Stub(org.chromium.mojo.system.Core core, MediaStreamDispatcherHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                MediaStreamDispatcherHost_Internal.MANAGER, messageWithHeader);







                    case CANCEL_REQUEST_ORDINAL: {

                        MediaStreamDispatcherHostCancelRequestParams data =
                                MediaStreamDispatcherHostCancelRequestParams.deserialize(messageWithHeader.getPayload());

                        getImpl().cancelRequest(data.requestId);
                        return true;
                    }





                    case STOP_STREAM_DEVICE_ORDINAL: {

                        MediaStreamDispatcherHostStopStreamDeviceParams data =
                                MediaStreamDispatcherHostStopStreamDeviceParams.deserialize(messageWithHeader.getPayload());

                        getImpl().stopStreamDevice(data.deviceId, data.sessionId);
                        return true;
                    }







                    case CLOSE_DEVICE_ORDINAL: {

                        MediaStreamDispatcherHostCloseDeviceParams data =
                                MediaStreamDispatcherHostCloseDeviceParams.deserialize(messageWithHeader.getPayload());

                        getImpl().closeDevice(data.label);
                        return true;
                    }





                    case SET_CAPTURING_LINK_SECURED_ORDINAL: {

                        MediaStreamDispatcherHostSetCapturingLinkSecuredParams data =
                                MediaStreamDispatcherHostSetCapturingLinkSecuredParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setCapturingLinkSecured(data.sessionId, data.type, data.isSecure);
                        return true;
                    }





                    case ON_STREAM_STARTED_ORDINAL: {

                        MediaStreamDispatcherHostOnStreamStartedParams data =
                                MediaStreamDispatcherHostOnStreamStartedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onStreamStarted(data.label);
                        return true;
                    }






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), MediaStreamDispatcherHost_Internal.MANAGER, messageWithHeader, receiver);







                    case GENERATE_STREAMS_ORDINAL: {

                        MediaStreamDispatcherHostGenerateStreamsParams data =
                                MediaStreamDispatcherHostGenerateStreamsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().generateStreams(data.requestId, data.controls, data.userGesture, data.audioStreamSelectionInfo, new MediaStreamDispatcherHostGenerateStreamsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }











                    case OPEN_DEVICE_ORDINAL: {

                        MediaStreamDispatcherHostOpenDeviceParams data =
                                MediaStreamDispatcherHostOpenDeviceParams.deserialize(messageWithHeader.getPayload());

                        getImpl().openDevice(data.requestId, data.deviceId, data.type, new MediaStreamDispatcherHostOpenDeviceResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }













                    case GET_OPEN_DEVICE_ORDINAL: {

                        MediaStreamDispatcherHostGetOpenDeviceParams data =
                                MediaStreamDispatcherHostGetOpenDeviceParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getOpenDevice(data.requestId, data.sessionId, data.transferId, new MediaStreamDispatcherHostGetOpenDeviceResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case KEEP_DEVICE_ALIVE_FOR_TRANSFER_ORDINAL: {

                        MediaStreamDispatcherHostKeepDeviceAliveForTransferParams data =
                                MediaStreamDispatcherHostKeepDeviceAliveForTransferParams.deserialize(messageWithHeader.getPayload());

                        getImpl().keepDeviceAliveForTransfer(data.sessionId, data.transferId, new MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }
    }


    
    static final class MediaStreamDispatcherHostGenerateStreamsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int requestId;
        public StreamControls controls;
        public boolean userGesture;
        public StreamSelectionInfo audioStreamSelectionInfo;

        private MediaStreamDispatcherHostGenerateStreamsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostGenerateStreamsParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostGenerateStreamsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostGenerateStreamsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostGenerateStreamsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostGenerateStreamsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostGenerateStreamsParams(elementsOrVersion);
                    {
                        
                    result.requestId = decoder0.readInt(8);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(12, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.controls = StreamControls.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.audioStreamSelectionInfo = StreamSelectionInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.requestId, 8);
            
            encoder0.encode(this.userGesture, 12, 0);
            
            encoder0.encode(this.controls, 16, false);
            
            encoder0.encode(this.audioStreamSelectionInfo, 24, false);
        }
    }



    
    static final class MediaStreamDispatcherHostGenerateStreamsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public String label;
        public StreamDevicesSet streamDevices;
        public boolean panTiltZoomAllowed;

        private MediaStreamDispatcherHostGenerateStreamsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostGenerateStreamsResponseParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostGenerateStreamsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostGenerateStreamsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostGenerateStreamsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostGenerateStreamsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostGenerateStreamsResponseParams(elementsOrVersion);
                    {
                        
                    result.result = decoder0.readInt(8);
                        MediaStreamRequestResult.validate(result.result);
                        result.result = MediaStreamRequestResult.toKnownValue(result.result);
                    }
                    {
                        
                    result.panTiltZoomAllowed = decoder0.readBoolean(12, 0);
                    }
                    {
                        
                    result.label = decoder0.readString(16, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.streamDevices = StreamDevicesSet.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8);
            
            encoder0.encode(this.panTiltZoomAllowed, 12, 0);
            
            encoder0.encode(this.label, 16, false);
            
            encoder0.encode(this.streamDevices, 24, true);
        }
    }

    static class MediaStreamDispatcherHostGenerateStreamsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaStreamDispatcherHost.GenerateStreams_Response mCallback;

        MediaStreamDispatcherHostGenerateStreamsResponseParamsForwardToCallback(MediaStreamDispatcherHost.GenerateStreams_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GENERATE_STREAMS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaStreamDispatcherHostGenerateStreamsResponseParams response = MediaStreamDispatcherHostGenerateStreamsResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.label, response.streamDevices, response.panTiltZoomAllowed);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaStreamDispatcherHostGenerateStreamsResponseParamsProxyToResponder implements MediaStreamDispatcherHost.GenerateStreams_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaStreamDispatcherHostGenerateStreamsResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, String label, StreamDevicesSet streamDevices, Boolean panTiltZoomAllowed) {
            MediaStreamDispatcherHostGenerateStreamsResponseParams _response = new MediaStreamDispatcherHostGenerateStreamsResponseParams();

            _response.result = result;

            _response.label = label;

            _response.streamDevices = streamDevices;

            _response.panTiltZoomAllowed = panTiltZoomAllowed;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GENERATE_STREAMS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaStreamDispatcherHostCancelRequestParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int requestId;

        private MediaStreamDispatcherHostCancelRequestParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostCancelRequestParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostCancelRequestParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostCancelRequestParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostCancelRequestParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostCancelRequestParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostCancelRequestParams(elementsOrVersion);
                    {
                        
                    result.requestId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.requestId, 8);
        }
    }



    
    static final class MediaStreamDispatcherHostStopStreamDeviceParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String deviceId;
        public org.chromium.mojo_base.mojom.UnguessableToken sessionId;

        private MediaStreamDispatcherHostStopStreamDeviceParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostStopStreamDeviceParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostStopStreamDeviceParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostStopStreamDeviceParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostStopStreamDeviceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostStopStreamDeviceParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostStopStreamDeviceParams(elementsOrVersion);
                    {
                        
                    result.deviceId = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.sessionId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.deviceId, 8, false);
            
            encoder0.encode(this.sessionId, 16, true);
        }
    }



    
    static final class MediaStreamDispatcherHostOpenDeviceParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int requestId;
        public String deviceId;
        public int type;

        private MediaStreamDispatcherHostOpenDeviceParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostOpenDeviceParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostOpenDeviceParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostOpenDeviceParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostOpenDeviceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostOpenDeviceParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostOpenDeviceParams(elementsOrVersion);
                    {
                        
                    result.requestId = decoder0.readInt(8);
                    }
                    {
                        
                    result.type = decoder0.readInt(12);
                        MediaStreamType.validate(result.type);
                        result.type = MediaStreamType.toKnownValue(result.type);
                    }
                    {
                        
                    result.deviceId = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.requestId, 8);
            
            encoder0.encode(this.type, 12);
            
            encoder0.encode(this.deviceId, 16, false);
        }
    }



    
    static final class MediaStreamDispatcherHostOpenDeviceResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public String label;
        public MediaStreamDevice device;

        private MediaStreamDispatcherHostOpenDeviceResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostOpenDeviceResponseParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostOpenDeviceResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostOpenDeviceResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostOpenDeviceResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostOpenDeviceResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostOpenDeviceResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.label = decoder0.readString(16, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.device = MediaStreamDevice.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.label, 16, false);
            
            encoder0.encode(this.device, 24, false);
        }
    }

    static class MediaStreamDispatcherHostOpenDeviceResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaStreamDispatcherHost.OpenDevice_Response mCallback;

        MediaStreamDispatcherHostOpenDeviceResponseParamsForwardToCallback(MediaStreamDispatcherHost.OpenDevice_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(OPEN_DEVICE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaStreamDispatcherHostOpenDeviceResponseParams response = MediaStreamDispatcherHostOpenDeviceResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.label, response.device);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaStreamDispatcherHostOpenDeviceResponseParamsProxyToResponder implements MediaStreamDispatcherHost.OpenDevice_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaStreamDispatcherHostOpenDeviceResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, String label, MediaStreamDevice device) {
            MediaStreamDispatcherHostOpenDeviceResponseParams _response = new MediaStreamDispatcherHostOpenDeviceResponseParams();

            _response.success = success;

            _response.label = label;

            _response.device = device;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    OPEN_DEVICE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaStreamDispatcherHostCloseDeviceParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String label;

        private MediaStreamDispatcherHostCloseDeviceParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostCloseDeviceParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostCloseDeviceParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostCloseDeviceParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostCloseDeviceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostCloseDeviceParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostCloseDeviceParams(elementsOrVersion);
                    {
                        
                    result.label = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.label, 8, false);
        }
    }



    
    static final class MediaStreamDispatcherHostSetCapturingLinkSecuredParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken sessionId;
        public int type;
        public boolean isSecure;

        private MediaStreamDispatcherHostSetCapturingLinkSecuredParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostSetCapturingLinkSecuredParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostSetCapturingLinkSecuredParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostSetCapturingLinkSecuredParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostSetCapturingLinkSecuredParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostSetCapturingLinkSecuredParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostSetCapturingLinkSecuredParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.sessionId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    result.type = decoder0.readInt(16);
                        MediaStreamType.validate(result.type);
                        result.type = MediaStreamType.toKnownValue(result.type);
                    }
                    {
                        
                    result.isSecure = decoder0.readBoolean(20, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.sessionId, 8, true);
            
            encoder0.encode(this.type, 16);
            
            encoder0.encode(this.isSecure, 20, 0);
        }
    }



    
    static final class MediaStreamDispatcherHostOnStreamStartedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String label;

        private MediaStreamDispatcherHostOnStreamStartedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostOnStreamStartedParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostOnStreamStartedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostOnStreamStartedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostOnStreamStartedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostOnStreamStartedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostOnStreamStartedParams(elementsOrVersion);
                    {
                        
                    result.label = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.label, 8, false);
        }
    }



    
    static final class MediaStreamDispatcherHostGetOpenDeviceParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int requestId;
        public org.chromium.mojo_base.mojom.UnguessableToken sessionId;
        public org.chromium.mojo_base.mojom.UnguessableToken transferId;

        private MediaStreamDispatcherHostGetOpenDeviceParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostGetOpenDeviceParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostGetOpenDeviceParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostGetOpenDeviceParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostGetOpenDeviceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostGetOpenDeviceParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostGetOpenDeviceParams(elementsOrVersion);
                    {
                        
                    result.requestId = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.sessionId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.transferId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.requestId, 8);
            
            encoder0.encode(this.sessionId, 16, false);
            
            encoder0.encode(this.transferId, 24, false);
        }
    }



    
    static final class MediaStreamDispatcherHostGetOpenDeviceResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public GetOpenDeviceResponse response;

        private MediaStreamDispatcherHostGetOpenDeviceResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostGetOpenDeviceResponseParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostGetOpenDeviceResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostGetOpenDeviceResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostGetOpenDeviceResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostGetOpenDeviceResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostGetOpenDeviceResponseParams(elementsOrVersion);
                    {
                        
                    result.result = decoder0.readInt(8);
                        MediaStreamRequestResult.validate(result.result);
                        result.result = MediaStreamRequestResult.toKnownValue(result.result);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.response = GetOpenDeviceResponse.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8);
            
            encoder0.encode(this.response, 16, true);
        }
    }

    static class MediaStreamDispatcherHostGetOpenDeviceResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaStreamDispatcherHost.GetOpenDevice_Response mCallback;

        MediaStreamDispatcherHostGetOpenDeviceResponseParamsForwardToCallback(MediaStreamDispatcherHost.GetOpenDevice_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_OPEN_DEVICE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                MediaStreamDispatcherHostGetOpenDeviceResponseParams response = MediaStreamDispatcherHostGetOpenDeviceResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.response);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaStreamDispatcherHostGetOpenDeviceResponseParamsProxyToResponder implements MediaStreamDispatcherHost.GetOpenDevice_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaStreamDispatcherHostGetOpenDeviceResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, GetOpenDeviceResponse response) {
            MediaStreamDispatcherHostGetOpenDeviceResponseParams _response = new MediaStreamDispatcherHostGetOpenDeviceResponseParams();

            _response.result = result;

            _response.response = response;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_OPEN_DEVICE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaStreamDispatcherHostKeepDeviceAliveForTransferParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken sessionId;
        public org.chromium.mojo_base.mojom.UnguessableToken transferId;

        private MediaStreamDispatcherHostKeepDeviceAliveForTransferParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostKeepDeviceAliveForTransferParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostKeepDeviceAliveForTransferParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostKeepDeviceAliveForTransferParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostKeepDeviceAliveForTransferParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostKeepDeviceAliveForTransferParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostKeepDeviceAliveForTransferParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sessionId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.transferId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.sessionId, 8, false);
            
            encoder0.encode(this.transferId, 16, false);
        }
    }



    
    static final class MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean deviceFound;

        private MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams() {
            this(0);
        }

        public static MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams(elementsOrVersion);
                    {
                        
                    result.deviceFound = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.deviceFound, 8, 0);
        }
    }

    static class MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaStreamDispatcherHost.KeepDeviceAliveForTransfer_Response mCallback;

        MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParamsForwardToCallback(MediaStreamDispatcherHost.KeepDeviceAliveForTransfer_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(KEEP_DEVICE_ALIVE_FOR_TRANSFER_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams response = MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.deviceFound);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParamsProxyToResponder implements MediaStreamDispatcherHost.KeepDeviceAliveForTransfer_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean deviceFound) {
            MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams _response = new MediaStreamDispatcherHostKeepDeviceAliveForTransferResponseParams();

            _response.deviceFound = deviceFound;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    KEEP_DEVICE_ALIVE_FOR_TRANSFER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
