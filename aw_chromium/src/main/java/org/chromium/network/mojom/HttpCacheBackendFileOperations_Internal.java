// HttpCacheBackendFileOperations_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/http_cache_backend_file_operations.mojom
//

package org.chromium.network.mojom;

class HttpCacheBackendFileOperations_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<HttpCacheBackendFileOperations, HttpCacheBackendFileOperations.Proxy> MANAGER = new org.chromium.mojo.bindings.Interface.Manager<HttpCacheBackendFileOperations, HttpCacheBackendFileOperations.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.HttpCacheBackendFileOperations";
        }

        @Override
        public int getVersion() {
            return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, HttpCacheBackendFileOperations impl) {
            return new Stub(core, impl);
        }

        @Override
        public HttpCacheBackendFileOperations[] buildArray(int size) {
            return new HttpCacheBackendFileOperations[size];
        }
    };


    private static final int CREATE_DIRECTORY_ORDINAL = 0;

    private static final int PATH_EXISTS_ORDINAL = 1;

    private static final int DIRECTORY_EXISTS_ORDINAL = 2;

    private static final int OPEN_FILE_ORDINAL = 3;

    private static final int DELETE_FILE_ORDINAL = 4;

    private static final int RENAME_FILE_ORDINAL = 5;

    private static final int GET_FILE_INFO_ORDINAL = 6;

    private static final int ENUMERATE_FILES_ORDINAL = 7;

    private static final int CLEANUP_DIRECTORY_ORDINAL = 8;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements HttpCacheBackendFileOperations.Proxy {

        Proxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createDirectory(org.chromium.mojo_base.mojom.FilePath path, CreateDirectory_Response callback) {

            HttpCacheBackendFileOperationsCreateDirectoryParams _message = new HttpCacheBackendFileOperationsCreateDirectoryParams();

            _message.path = path;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_DIRECTORY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new HttpCacheBackendFileOperationsCreateDirectoryResponseParamsForwardToCallback(callback));

        }


        @Override
        public void pathExists(org.chromium.mojo_base.mojom.FilePath path, PathExists_Response callback) {

            HttpCacheBackendFileOperationsPathExistsParams _message = new HttpCacheBackendFileOperationsPathExistsParams();

            _message.path = path;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(PATH_EXISTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new HttpCacheBackendFileOperationsPathExistsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void directoryExists(org.chromium.mojo_base.mojom.FilePath path, DirectoryExists_Response callback) {

            HttpCacheBackendFileOperationsDirectoryExistsParams _message = new HttpCacheBackendFileOperationsDirectoryExistsParams();

            _message.path = path;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(DIRECTORY_EXISTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new HttpCacheBackendFileOperationsDirectoryExistsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void openFile(org.chromium.mojo_base.mojom.FilePath path, int flags, OpenFile_Response callback) {

            HttpCacheBackendFileOperationsOpenFileParams _message = new HttpCacheBackendFileOperationsOpenFileParams();

            _message.path = path;

            _message.flags = flags;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(OPEN_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new HttpCacheBackendFileOperationsOpenFileResponseParamsForwardToCallback(callback));

        }


        @Override
        public void deleteFile(org.chromium.mojo_base.mojom.FilePath path, int mode, DeleteFile_Response callback) {

            HttpCacheBackendFileOperationsDeleteFileParams _message = new HttpCacheBackendFileOperationsDeleteFileParams();

            _message.path = path;

            _message.mode = mode;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(DELETE_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new HttpCacheBackendFileOperationsDeleteFileResponseParamsForwardToCallback(callback));

        }


        @Override
        public void renameFile(org.chromium.mojo_base.mojom.FilePath fromPath, org.chromium.mojo_base.mojom.FilePath toPath, RenameFile_Response callback) {

            HttpCacheBackendFileOperationsRenameFileParams _message = new HttpCacheBackendFileOperationsRenameFileParams();

            _message.fromPath = fromPath;

            _message.toPath = toPath;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(RENAME_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new HttpCacheBackendFileOperationsRenameFileResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getFileInfo(org.chromium.mojo_base.mojom.FilePath path, GetFileInfo_Response callback) {

            HttpCacheBackendFileOperationsGetFileInfoParams _message = new HttpCacheBackendFileOperationsGetFileInfoParams();

            _message.path = path;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_FILE_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new HttpCacheBackendFileOperationsGetFileInfoResponseParamsForwardToCallback(callback));

        }


        @Override
        public void enumerateFiles(org.chromium.mojo_base.mojom.FilePath path, org.chromium.mojo.bindings.InterfaceRequest<FileEnumerator> receiver) {

            HttpCacheBackendFileOperationsEnumerateFilesParams _message = new HttpCacheBackendFileOperationsEnumerateFilesParams();

            _message.path = path;

            _message.receiver = receiver;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(ENUMERATE_FILES_ORDINAL)));

        }


        @Override
        public void cleanupDirectory(org.chromium.mojo_base.mojom.FilePath path, CleanupDirectory_Response callback) {

            HttpCacheBackendFileOperationsCleanupDirectoryParams _message = new HttpCacheBackendFileOperationsCleanupDirectoryParams();

            _message.path = path;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEANUP_DIRECTORY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new HttpCacheBackendFileOperationsCleanupDirectoryResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<HttpCacheBackendFileOperations> {

        Stub(org.chromium.mojo.system.Core core, HttpCacheBackendFileOperations impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(HttpCacheBackendFileOperations_Internal.MANAGER, messageWithHeader);


                    case ENUMERATE_FILES_ORDINAL: {

                        HttpCacheBackendFileOperationsEnumerateFilesParams data = HttpCacheBackendFileOperationsEnumerateFilesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enumerateFiles(data.path, data.receiver);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(getCore(), HttpCacheBackendFileOperations_Internal.MANAGER, messageWithHeader, receiver);


                    case CREATE_DIRECTORY_ORDINAL: {

                        HttpCacheBackendFileOperationsCreateDirectoryParams data = HttpCacheBackendFileOperationsCreateDirectoryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createDirectory(data.path, new HttpCacheBackendFileOperationsCreateDirectoryResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case PATH_EXISTS_ORDINAL: {

                        HttpCacheBackendFileOperationsPathExistsParams data = HttpCacheBackendFileOperationsPathExistsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().pathExists(data.path, new HttpCacheBackendFileOperationsPathExistsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case DIRECTORY_EXISTS_ORDINAL: {

                        HttpCacheBackendFileOperationsDirectoryExistsParams data = HttpCacheBackendFileOperationsDirectoryExistsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().directoryExists(data.path, new HttpCacheBackendFileOperationsDirectoryExistsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case OPEN_FILE_ORDINAL: {

                        HttpCacheBackendFileOperationsOpenFileParams data = HttpCacheBackendFileOperationsOpenFileParams.deserialize(messageWithHeader.getPayload());

                        getImpl().openFile(data.path, data.flags, new HttpCacheBackendFileOperationsOpenFileResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case DELETE_FILE_ORDINAL: {

                        HttpCacheBackendFileOperationsDeleteFileParams data = HttpCacheBackendFileOperationsDeleteFileParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteFile(data.path, data.mode, new HttpCacheBackendFileOperationsDeleteFileResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case RENAME_FILE_ORDINAL: {

                        HttpCacheBackendFileOperationsRenameFileParams data = HttpCacheBackendFileOperationsRenameFileParams.deserialize(messageWithHeader.getPayload());

                        getImpl().renameFile(data.fromPath, data.toPath, new HttpCacheBackendFileOperationsRenameFileResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case GET_FILE_INFO_ORDINAL: {

                        HttpCacheBackendFileOperationsGetFileInfoParams data = HttpCacheBackendFileOperationsGetFileInfoParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getFileInfo(data.path, new HttpCacheBackendFileOperationsGetFileInfoResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEANUP_DIRECTORY_ORDINAL: {

                        HttpCacheBackendFileOperationsCleanupDirectoryParams data = HttpCacheBackendFileOperationsCleanupDirectoryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().cleanupDirectory(data.path, new HttpCacheBackendFileOperationsCleanupDirectoryResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }
    }


    static final class HttpCacheBackendFileOperationsCreateDirectoryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath path;

        private HttpCacheBackendFileOperationsCreateDirectoryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsCreateDirectoryParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsCreateDirectoryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsCreateDirectoryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsCreateDirectoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsCreateDirectoryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsCreateDirectoryParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.path = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.path, 8, false);
        }
    }


    static final class HttpCacheBackendFileOperationsCreateDirectoryResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean result;

        private HttpCacheBackendFileOperationsCreateDirectoryResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsCreateDirectoryResponseParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsCreateDirectoryResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsCreateDirectoryResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsCreateDirectoryResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsCreateDirectoryResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsCreateDirectoryResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8, 0);
        }
    }

    static class HttpCacheBackendFileOperationsCreateDirectoryResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final HttpCacheBackendFileOperations.CreateDirectory_Response mCallback;

        HttpCacheBackendFileOperationsCreateDirectoryResponseParamsForwardToCallback(HttpCacheBackendFileOperations.CreateDirectory_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_DIRECTORY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                HttpCacheBackendFileOperationsCreateDirectoryResponseParams response = HttpCacheBackendFileOperationsCreateDirectoryResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class HttpCacheBackendFileOperationsCreateDirectoryResponseParamsProxyToResponder implements HttpCacheBackendFileOperations.CreateDirectory_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        HttpCacheBackendFileOperationsCreateDirectoryResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean result) {
            HttpCacheBackendFileOperationsCreateDirectoryResponseParams _response = new HttpCacheBackendFileOperationsCreateDirectoryResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CREATE_DIRECTORY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class HttpCacheBackendFileOperationsPathExistsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath path;

        private HttpCacheBackendFileOperationsPathExistsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsPathExistsParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsPathExistsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsPathExistsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsPathExistsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsPathExistsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsPathExistsParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.path = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.path, 8, false);
        }
    }


    static final class HttpCacheBackendFileOperationsPathExistsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean result;

        private HttpCacheBackendFileOperationsPathExistsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsPathExistsResponseParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsPathExistsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsPathExistsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsPathExistsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsPathExistsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsPathExistsResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8, 0);
        }
    }

    static class HttpCacheBackendFileOperationsPathExistsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final HttpCacheBackendFileOperations.PathExists_Response mCallback;

        HttpCacheBackendFileOperationsPathExistsResponseParamsForwardToCallback(HttpCacheBackendFileOperations.PathExists_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(PATH_EXISTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                HttpCacheBackendFileOperationsPathExistsResponseParams response = HttpCacheBackendFileOperationsPathExistsResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class HttpCacheBackendFileOperationsPathExistsResponseParamsProxyToResponder implements HttpCacheBackendFileOperations.PathExists_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        HttpCacheBackendFileOperationsPathExistsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean result) {
            HttpCacheBackendFileOperationsPathExistsResponseParams _response = new HttpCacheBackendFileOperationsPathExistsResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(PATH_EXISTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class HttpCacheBackendFileOperationsDirectoryExistsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath path;

        private HttpCacheBackendFileOperationsDirectoryExistsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsDirectoryExistsParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsDirectoryExistsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsDirectoryExistsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsDirectoryExistsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsDirectoryExistsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsDirectoryExistsParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.path = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.path, 8, false);
        }
    }


    static final class HttpCacheBackendFileOperationsDirectoryExistsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean result;

        private HttpCacheBackendFileOperationsDirectoryExistsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsDirectoryExistsResponseParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsDirectoryExistsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsDirectoryExistsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsDirectoryExistsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsDirectoryExistsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsDirectoryExistsResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8, 0);
        }
    }

    static class HttpCacheBackendFileOperationsDirectoryExistsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final HttpCacheBackendFileOperations.DirectoryExists_Response mCallback;

        HttpCacheBackendFileOperationsDirectoryExistsResponseParamsForwardToCallback(HttpCacheBackendFileOperations.DirectoryExists_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DIRECTORY_EXISTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                HttpCacheBackendFileOperationsDirectoryExistsResponseParams response = HttpCacheBackendFileOperationsDirectoryExistsResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class HttpCacheBackendFileOperationsDirectoryExistsResponseParamsProxyToResponder implements HttpCacheBackendFileOperations.DirectoryExists_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        HttpCacheBackendFileOperationsDirectoryExistsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean result) {
            HttpCacheBackendFileOperationsDirectoryExistsResponseParams _response = new HttpCacheBackendFileOperationsDirectoryExistsResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(DIRECTORY_EXISTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class HttpCacheBackendFileOperationsOpenFileParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath path;
        public int flags;

        private HttpCacheBackendFileOperationsOpenFileParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsOpenFileParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsOpenFileParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsOpenFileParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsOpenFileParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsOpenFileParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsOpenFileParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.path = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {

                    result.flags = decoder0.readInt(16);
                    HttpCacheBackendOpenFileFlags.validate(result.flags);
                    result.flags = HttpCacheBackendOpenFileFlags.toKnownValue(result.flags);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.path, 8, false);

            encoder0.encode(this.flags, 16);
        }
    }


    static final class HttpCacheBackendFileOperationsOpenFileResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.File file;
        public int error;

        private HttpCacheBackendFileOperationsOpenFileResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsOpenFileResponseParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsOpenFileResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsOpenFileResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsOpenFileResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsOpenFileResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsOpenFileResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.file = org.chromium.mojo_base.mojom.File.decode(decoder1);
                }
                {

                    result.error = decoder0.readInt(16);
                    org.chromium.mojo_base.mojom.FileError.validate(result.error);
                    result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.file, 8, true);

            encoder0.encode(this.error, 16);
        }
    }

    static class HttpCacheBackendFileOperationsOpenFileResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final HttpCacheBackendFileOperations.OpenFile_Response mCallback;

        HttpCacheBackendFileOperationsOpenFileResponseParamsForwardToCallback(HttpCacheBackendFileOperations.OpenFile_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(OPEN_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                HttpCacheBackendFileOperationsOpenFileResponseParams response = HttpCacheBackendFileOperationsOpenFileResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.file, response.error);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class HttpCacheBackendFileOperationsOpenFileResponseParamsProxyToResponder implements HttpCacheBackendFileOperations.OpenFile_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        HttpCacheBackendFileOperationsOpenFileResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.mojo_base.mojom.File file, Integer error) {
            HttpCacheBackendFileOperationsOpenFileResponseParams _response = new HttpCacheBackendFileOperationsOpenFileResponseParams();

            _response.file = file;

            _response.error = error;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(OPEN_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class HttpCacheBackendFileOperationsDeleteFileParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath path;
        public int mode;

        private HttpCacheBackendFileOperationsDeleteFileParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsDeleteFileParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsDeleteFileParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsDeleteFileParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsDeleteFileParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsDeleteFileParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsDeleteFileParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.path = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {

                    result.mode = decoder0.readInt(16);
                    HttpCacheBackendDeleteFileMode.validate(result.mode);
                    result.mode = HttpCacheBackendDeleteFileMode.toKnownValue(result.mode);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.path, 8, false);

            encoder0.encode(this.mode, 16);
        }
    }


    static final class HttpCacheBackendFileOperationsDeleteFileResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean result;

        private HttpCacheBackendFileOperationsDeleteFileResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsDeleteFileResponseParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsDeleteFileResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsDeleteFileResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsDeleteFileResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsDeleteFileResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsDeleteFileResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8, 0);
        }
    }

    static class HttpCacheBackendFileOperationsDeleteFileResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final HttpCacheBackendFileOperations.DeleteFile_Response mCallback;

        HttpCacheBackendFileOperationsDeleteFileResponseParamsForwardToCallback(HttpCacheBackendFileOperations.DeleteFile_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DELETE_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                HttpCacheBackendFileOperationsDeleteFileResponseParams response = HttpCacheBackendFileOperationsDeleteFileResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class HttpCacheBackendFileOperationsDeleteFileResponseParamsProxyToResponder implements HttpCacheBackendFileOperations.DeleteFile_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        HttpCacheBackendFileOperationsDeleteFileResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean result) {
            HttpCacheBackendFileOperationsDeleteFileResponseParams _response = new HttpCacheBackendFileOperationsDeleteFileResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(DELETE_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class HttpCacheBackendFileOperationsRenameFileParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath fromPath;
        public org.chromium.mojo_base.mojom.FilePath toPath;

        private HttpCacheBackendFileOperationsRenameFileParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsRenameFileParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsRenameFileParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsRenameFileParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsRenameFileParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsRenameFileParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsRenameFileParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.fromPath = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.toPath = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.fromPath, 8, false);

            encoder0.encode(this.toPath, 16, false);
        }
    }


    static final class HttpCacheBackendFileOperationsRenameFileResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int error;

        private HttpCacheBackendFileOperationsRenameFileResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsRenameFileResponseParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsRenameFileResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsRenameFileResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsRenameFileResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsRenameFileResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsRenameFileResponseParams(elementsOrVersion);
                {

                    result.error = decoder0.readInt(8);
                    org.chromium.mojo_base.mojom.FileError.validate(result.error);
                    result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.error, 8);
        }
    }

    static class HttpCacheBackendFileOperationsRenameFileResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final HttpCacheBackendFileOperations.RenameFile_Response mCallback;

        HttpCacheBackendFileOperationsRenameFileResponseParamsForwardToCallback(HttpCacheBackendFileOperations.RenameFile_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RENAME_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                HttpCacheBackendFileOperationsRenameFileResponseParams response = HttpCacheBackendFileOperationsRenameFileResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.error);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class HttpCacheBackendFileOperationsRenameFileResponseParamsProxyToResponder implements HttpCacheBackendFileOperations.RenameFile_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        HttpCacheBackendFileOperationsRenameFileResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer error) {
            HttpCacheBackendFileOperationsRenameFileResponseParams _response = new HttpCacheBackendFileOperationsRenameFileResponseParams();

            _response.error = error;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(RENAME_FILE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class HttpCacheBackendFileOperationsGetFileInfoParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath path;

        private HttpCacheBackendFileOperationsGetFileInfoParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsGetFileInfoParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsGetFileInfoParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsGetFileInfoParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsGetFileInfoParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsGetFileInfoParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsGetFileInfoParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.path = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.path, 8, false);
        }
    }


    static final class HttpCacheBackendFileOperationsGetFileInfoResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FileInfo info;

        private HttpCacheBackendFileOperationsGetFileInfoResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsGetFileInfoResponseParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsGetFileInfoResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsGetFileInfoResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsGetFileInfoResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsGetFileInfoResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsGetFileInfoResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.info = org.chromium.mojo_base.mojom.FileInfo.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.info, 8, true);
        }
    }

    static class HttpCacheBackendFileOperationsGetFileInfoResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final HttpCacheBackendFileOperations.GetFileInfo_Response mCallback;

        HttpCacheBackendFileOperationsGetFileInfoResponseParamsForwardToCallback(HttpCacheBackendFileOperations.GetFileInfo_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_FILE_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                HttpCacheBackendFileOperationsGetFileInfoResponseParams response = HttpCacheBackendFileOperationsGetFileInfoResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.info);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class HttpCacheBackendFileOperationsGetFileInfoResponseParamsProxyToResponder implements HttpCacheBackendFileOperations.GetFileInfo_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        HttpCacheBackendFileOperationsGetFileInfoResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.mojo_base.mojom.FileInfo info) {
            HttpCacheBackendFileOperationsGetFileInfoResponseParams _response = new HttpCacheBackendFileOperationsGetFileInfoResponseParams();

            _response.info = info;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(GET_FILE_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class HttpCacheBackendFileOperationsEnumerateFilesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath path;
        public org.chromium.mojo.bindings.InterfaceRequest<FileEnumerator> receiver;

        private HttpCacheBackendFileOperationsEnumerateFilesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsEnumerateFilesParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsEnumerateFilesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsEnumerateFilesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsEnumerateFilesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsEnumerateFilesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsEnumerateFilesParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.path = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }
                {

                    result.receiver = decoder0.readInterfaceRequest(16, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.path, 8, false);

            encoder0.encode(this.receiver, 16, false);
        }
    }


    static final class HttpCacheBackendFileOperationsCleanupDirectoryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.FilePath path;

        private HttpCacheBackendFileOperationsCleanupDirectoryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsCleanupDirectoryParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsCleanupDirectoryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsCleanupDirectoryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsCleanupDirectoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsCleanupDirectoryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsCleanupDirectoryParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.path = org.chromium.mojo_base.mojom.FilePath.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.path, 8, false);
        }
    }


    static final class HttpCacheBackendFileOperationsCleanupDirectoryResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean result;

        private HttpCacheBackendFileOperationsCleanupDirectoryResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public HttpCacheBackendFileOperationsCleanupDirectoryResponseParams() {
            this(0);
        }

        public static HttpCacheBackendFileOperationsCleanupDirectoryResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static HttpCacheBackendFileOperationsCleanupDirectoryResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static HttpCacheBackendFileOperationsCleanupDirectoryResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            HttpCacheBackendFileOperationsCleanupDirectoryResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new HttpCacheBackendFileOperationsCleanupDirectoryResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8, 0);
        }
    }

    static class HttpCacheBackendFileOperationsCleanupDirectoryResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final HttpCacheBackendFileOperations.CleanupDirectory_Response mCallback;

        HttpCacheBackendFileOperationsCleanupDirectoryResponseParamsForwardToCallback(HttpCacheBackendFileOperations.CleanupDirectory_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEANUP_DIRECTORY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                HttpCacheBackendFileOperationsCleanupDirectoryResponseParams response = HttpCacheBackendFileOperationsCleanupDirectoryResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class HttpCacheBackendFileOperationsCleanupDirectoryResponseParamsProxyToResponder implements HttpCacheBackendFileOperations.CleanupDirectory_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        HttpCacheBackendFileOperationsCleanupDirectoryResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean result) {
            HttpCacheBackendFileOperationsCleanupDirectoryResponseParams _response = new HttpCacheBackendFileOperationsCleanupDirectoryResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEANUP_DIRECTORY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


}
