// LocalFrameHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;


class LocalFrameHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<LocalFrameHost, LocalFrameHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<LocalFrameHost, LocalFrameHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.LocalFrameHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, LocalFrameHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public LocalFrameHost[] buildArray(int size) {
          return new LocalFrameHost[size];
        }
    };


    private static final int ENTER_FULLSCREEN_ORDINAL = 0;

    private static final int EXIT_FULLSCREEN_ORDINAL = 1;

    private static final int FULLSCREEN_STATE_CHANGED_ORDINAL = 2;

    private static final int MAXIMIZE_ORDINAL = 3;

    private static final int MINIMIZE_ORDINAL = 4;

    private static final int RESTORE_ORDINAL = 5;

    private static final int REGISTER_PROTOCOL_HANDLER_ORDINAL = 6;

    private static final int UNREGISTER_PROTOCOL_HANDLER_ORDINAL = 7;

    private static final int DID_DISPLAY_INSECURE_CONTENT_ORDINAL = 8;

    private static final int DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL = 9;

    private static final int MAIN_DOCUMENT_ELEMENT_AVAILABLE_ORDINAL = 10;

    private static final int SET_NEEDS_OCCLUSION_TRACKING_ORDINAL = 11;

    private static final int SET_VIRTUAL_KEYBOARD_MODE_ORDINAL = 12;

    private static final int VISIBILITY_CHANGED_ORDINAL = 13;

    private static final int DID_CHANGE_THEME_COLOR_ORDINAL = 14;

    private static final int DID_CHANGE_BACKGROUND_COLOR_ORDINAL = 15;

    private static final int DID_FAIL_LOAD_WITH_ERROR_ORDINAL = 16;

    private static final int DID_FOCUS_FRAME_ORDINAL = 17;

    private static final int DID_CALL_FOCUS_ORDINAL = 18;

    private static final int ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL = 19;

    private static final int ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL = 20;

    private static final int SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL = 21;

    private static final int HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL = 22;

    private static final int SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL = 23;

    private static final int BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL = 24;

    private static final int START_LOADING_FOR_ASYNC_NAVIGATION_API_COMMIT_ORDINAL = 25;

    private static final int DID_BLOCK_NAVIGATION_ORDINAL = 26;

    private static final int DID_CHANGE_LOAD_PROGRESS_ORDINAL = 27;

    private static final int DID_FINISH_LOAD_ORDINAL = 28;

    private static final int DISPATCH_LOAD_ORDINAL = 29;

    private static final int GO_TO_ENTRY_AT_OFFSET_ORDINAL = 30;

    private static final int NAVIGATE_TO_NAVIGATION_API_KEY_ORDINAL = 31;

    private static final int NAVIGATE_EVENT_HANDLER_PRESENCE_CHANGED_ORDINAL = 32;

    private static final int UPDATE_TITLE_ORDINAL = 33;

    private static final int UPDATE_USER_ACTIVATION_STATE_ORDINAL = 34;

    private static final int DID_CONSUME_HISTORY_USER_ACTIVATION_ORDINAL = 35;

    private static final int HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL = 36;

    private static final int HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL = 37;

    private static final int DOCUMENT_ON_LOAD_COMPLETED_ORDINAL = 38;

    private static final int FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL = 39;

    private static final int DID_DISPATCH_DOM_CONTENT_LOADED_EVENT_ORDINAL = 40;

    private static final int RUN_MODAL_ALERT_DIALOG_ORDINAL = 41;

    private static final int RUN_MODAL_CONFIRM_DIALOG_ORDINAL = 42;

    private static final int RUN_MODAL_PROMPT_DIALOG_ORDINAL = 43;

    private static final int RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL = 44;

    private static final int UPDATE_FAVICON_URL_ORDINAL = 45;

    private static final int DOWNLOAD_URL_ORDINAL = 46;

    private static final int FOCUSED_ELEMENT_CHANGED_ORDINAL = 47;

    private static final int TEXT_SELECTION_CHANGED_ORDINAL = 48;

    private static final int SHOW_POPUP_MENU_ORDINAL = 49;

    private static final int CREATE_NEW_POPUP_WIDGET_ORDINAL = 50;

    private static final int SHOW_CONTEXT_MENU_ORDINAL = 51;

    private static final int DID_LOAD_RESOURCE_FROM_MEMORY_CACHE_ORDINAL = 52;

    private static final int DID_CHANGE_FRAME_OWNER_PROPERTIES_ORDINAL = 53;

    private static final int DID_CHANGE_OPENER_ORDINAL = 54;

    private static final int DID_CHANGE_FRAME_POLICY_ORDINAL = 55;

    private static final int DID_CHANGE_IFRAME_ATTRIBUTES_ORDINAL = 56;

    private static final int CAPTURE_PAINT_PREVIEW_OF_SUBFRAME_ORDINAL = 57;

    private static final int SET_CLOSE_LISTENER_ORDINAL = 58;

    private static final int DETACH_ORDINAL = 59;

    private static final int GET_KEEP_ALIVE_HANDLE_FACTORY_ORDINAL = 60;

    private static final int DID_ADD_MESSAGE_TO_CONSOLE_ORDINAL = 61;

    private static final int FRAME_SIZE_CHANGED_ORDINAL = 62;

    private static final int DID_INFER_COLOR_SCHEME_ORDINAL = 63;

    private static final int DID_CHANGE_SRC_DOC_ORDINAL = 64;

    private static final int RECEIVED_DELEGATED_CAPABILITY_ORDINAL = 65;

    private static final int SEND_FENCED_FRAME_REPORTING_BEACON_ORDINAL = 66;

    private static final int SEND_FENCED_FRAME_REPORTING_BEACON_TO_CUSTOM_URL_ORDINAL = 67;

    private static final int SEND_LEGACY_TECH_EVENT_ORDINAL = 68;

    private static final int SET_FENCED_FRAME_AUTOMATIC_BEACON_REPORT_EVENT_DATA_ORDINAL = 69;

    private static final int SEND_PRIVATE_AGGREGATION_REQUESTS_FOR_FENCED_FRAME_EVENT_ORDINAL = 70;

    private static final int CREATE_PORTAL_ORDINAL = 71;

    private static final int ADOPT_PORTAL_ORDINAL = 72;

    private static final int CREATE_FENCED_FRAME_ORDINAL = 73;

    private static final int ON_VIEW_TRANSITION_OPT_IN_CHANGED_ORDINAL = 74;

    private static final int START_DRAGGING_ORDINAL = 75;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements LocalFrameHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void enterFullscreen(
FullscreenOptions options, 
EnterFullscreen_Response callback) {

            LocalFrameHostEnterFullscreenParams _message = new LocalFrameHostEnterFullscreenParams();

            _message.options = options;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ENTER_FULLSCREEN_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostEnterFullscreenResponseParamsForwardToCallback(callback));

        }


        @Override
        public void exitFullscreen(
) {

            LocalFrameHostExitFullscreenParams _message = new LocalFrameHostExitFullscreenParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(EXIT_FULLSCREEN_ORDINAL)));

        }


        @Override
        public void fullscreenStateChanged(
boolean isFullscreen, FullscreenOptions options) {

            LocalFrameHostFullscreenStateChangedParams _message = new LocalFrameHostFullscreenStateChangedParams();

            _message.isFullscreen = isFullscreen;

            _message.options = options;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FULLSCREEN_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void maximize(
) {

            LocalFrameHostMaximizeParams _message = new LocalFrameHostMaximizeParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(MAXIMIZE_ORDINAL)));

        }


        @Override
        public void minimize(
) {

            LocalFrameHostMinimizeParams _message = new LocalFrameHostMinimizeParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(MINIMIZE_ORDINAL)));

        }


        @Override
        public void restore(
) {

            LocalFrameHostRestoreParams _message = new LocalFrameHostRestoreParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RESTORE_ORDINAL)));

        }


        @Override
        public void registerProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, boolean userGesture) {

            LocalFrameHostRegisterProtocolHandlerParams _message = new LocalFrameHostRegisterProtocolHandlerParams();

            _message.scheme = scheme;

            _message.url = url;

            _message.userGesture = userGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REGISTER_PROTOCOL_HANDLER_ORDINAL)));

        }


        @Override
        public void unregisterProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, boolean userGesture) {

            LocalFrameHostUnregisterProtocolHandlerParams _message = new LocalFrameHostUnregisterProtocolHandlerParams();

            _message.scheme = scheme;

            _message.url = url;

            _message.userGesture = userGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UNREGISTER_PROTOCOL_HANDLER_ORDINAL)));

        }


        @Override
        public void didDisplayInsecureContent(
) {

            LocalFrameHostDidDisplayInsecureContentParams _message = new LocalFrameHostDidDisplayInsecureContentParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_DISPLAY_INSECURE_CONTENT_ORDINAL)));

        }


        @Override
        public void didContainInsecureFormAction(
) {

            LocalFrameHostDidContainInsecureFormActionParams _message = new LocalFrameHostDidContainInsecureFormActionParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL)));

        }


        @Override
        public void mainDocumentElementAvailable(
boolean usesTemporaryZoomLevel) {

            LocalFrameHostMainDocumentElementAvailableParams _message = new LocalFrameHostMainDocumentElementAvailableParams();

            _message.usesTemporaryZoomLevel = usesTemporaryZoomLevel;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(MAIN_DOCUMENT_ELEMENT_AVAILABLE_ORDINAL)));

        }


        @Override
        public void setNeedsOcclusionTracking(
boolean needsTracking) {

            LocalFrameHostSetNeedsOcclusionTrackingParams _message = new LocalFrameHostSetNeedsOcclusionTrackingParams();

            _message.needsTracking = needsTracking;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_NEEDS_OCCLUSION_TRACKING_ORDINAL)));

        }


        @Override
        public void setVirtualKeyboardMode(
int type) {

            LocalFrameHostSetVirtualKeyboardModeParams _message = new LocalFrameHostSetVirtualKeyboardModeParams();

            _message.type = type;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_VIRTUAL_KEYBOARD_MODE_ORDINAL)));

        }


        @Override
        public void visibilityChanged(
int visibility) {

            LocalFrameHostVisibilityChangedParams _message = new LocalFrameHostVisibilityChangedParams();

            _message.visibility = visibility;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(VISIBILITY_CHANGED_ORDINAL)));

        }


        @Override
        public void didChangeThemeColor(
org.chromium.skia.mojom.SkColor themeColor) {

            LocalFrameHostDidChangeThemeColorParams _message = new LocalFrameHostDidChangeThemeColorParams();

            _message.themeColor = themeColor;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_THEME_COLOR_ORDINAL)));

        }


        @Override
        public void didChangeBackgroundColor(
org.chromium.skia.mojom.SkColor4f backgroundColor, boolean colorAdjust) {

            LocalFrameHostDidChangeBackgroundColorParams _message = new LocalFrameHostDidChangeBackgroundColorParams();

            _message.backgroundColor = backgroundColor;

            _message.colorAdjust = colorAdjust;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_BACKGROUND_COLOR_ORDINAL)));

        }


        @Override
        public void didFailLoadWithError(
org.chromium.url.mojom.Url url, int errorCode) {

            LocalFrameHostDidFailLoadWithErrorParams _message = new LocalFrameHostDidFailLoadWithErrorParams();

            _message.url = url;

            _message.errorCode = errorCode;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FAIL_LOAD_WITH_ERROR_ORDINAL)));

        }


        @Override
        public void didFocusFrame(
) {

            LocalFrameHostDidFocusFrameParams _message = new LocalFrameHostDidFocusFrameParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FOCUS_FRAME_ORDINAL)));

        }


        @Override
        public void didCallFocus(
) {

            LocalFrameHostDidCallFocusParams _message = new LocalFrameHostDidCallFocusParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CALL_FOCUS_ORDINAL)));

        }


        @Override
        public void enforceInsecureRequestPolicy(
int policyBitmap) {

            LocalFrameHostEnforceInsecureRequestPolicyParams _message = new LocalFrameHostEnforceInsecureRequestPolicyParams();

            _message.policyBitmap = policyBitmap;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL)));

        }


        @Override
        public void enforceInsecureNavigationsSet(
int[] set) {

            LocalFrameHostEnforceInsecureNavigationsSetParams _message = new LocalFrameHostEnforceInsecureNavigationsSetParams();

            _message.set = set;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL)));

        }


        @Override
        public void suddenTerminationDisablerChanged(
boolean present, int disablerType) {

            LocalFrameHostSuddenTerminationDisablerChangedParams _message = new LocalFrameHostSuddenTerminationDisablerChangedParams();

            _message.present = present;

            _message.disablerType = disablerType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL)));

        }


        @Override
        public void hadStickyUserActivationBeforeNavigationChanged(
boolean hasGesture) {

            LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams _message = new LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams();

            _message.hasGesture = hasGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL)));

        }


        @Override
        public void scrollRectToVisibleInParentFrame(
org.chromium.gfx.mojom.RectF rectToScroll, ScrollIntoViewParams params) {

            LocalFrameHostScrollRectToVisibleInParentFrameParams _message = new LocalFrameHostScrollRectToVisibleInParentFrameParams();

            _message.rectToScroll = rectToScroll;

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL)));

        }


        @Override
        public void bubbleLogicalScrollInParentFrame(
int direction, int granularity) {

            LocalFrameHostBubbleLogicalScrollInParentFrameParams _message = new LocalFrameHostBubbleLogicalScrollInParentFrameParams();

            _message.direction = direction;

            _message.granularity = granularity;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL)));

        }


        @Override
        public void startLoadingForAsyncNavigationApiCommit(
) {

            LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams _message = new LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(START_LOADING_FOR_ASYNC_NAVIGATION_API_COMMIT_ORDINAL)));

        }


        @Override
        public void didBlockNavigation(
org.chromium.url.mojom.Url blockedUrl, org.chromium.url.mojom.Url initiatorUrl, int reason) {

            LocalFrameHostDidBlockNavigationParams _message = new LocalFrameHostDidBlockNavigationParams();

            _message.blockedUrl = blockedUrl;

            _message.initiatorUrl = initiatorUrl;

            _message.reason = reason;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_BLOCK_NAVIGATION_ORDINAL)));

        }


        @Override
        public void didChangeLoadProgress(
double loadProgress) {

            LocalFrameHostDidChangeLoadProgressParams _message = new LocalFrameHostDidChangeLoadProgressParams();

            _message.loadProgress = loadProgress;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_LOAD_PROGRESS_ORDINAL)));

        }


        @Override
        public void didFinishLoad(
org.chromium.url.mojom.Url validatedUrl) {

            LocalFrameHostDidFinishLoadParams _message = new LocalFrameHostDidFinishLoadParams();

            _message.validatedUrl = validatedUrl;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FINISH_LOAD_ORDINAL)));

        }


        @Override
        public void dispatchLoad(
) {

            LocalFrameHostDispatchLoadParams _message = new LocalFrameHostDispatchLoadParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISPATCH_LOAD_ORDINAL)));

        }


        @Override
        public void goToEntryAtOffset(
int offset, boolean hasUserGesture, TaskAttributionId softNavigationHeuristicsTaskId) {

            LocalFrameHostGoToEntryAtOffsetParams _message = new LocalFrameHostGoToEntryAtOffsetParams();

            _message.offset = offset;

            _message.hasUserGesture = hasUserGesture;

            _message.softNavigationHeuristicsTaskId = softNavigationHeuristicsTaskId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GO_TO_ENTRY_AT_OFFSET_ORDINAL)));

        }


        @Override
        public void navigateToNavigationApiKey(
String key, boolean hasUserGesture, TaskAttributionId softNavigationHeuristicsTaskId) {

            LocalFrameHostNavigateToNavigationApiKeyParams _message = new LocalFrameHostNavigateToNavigationApiKeyParams();

            _message.key = key;

            _message.hasUserGesture = hasUserGesture;

            _message.softNavigationHeuristicsTaskId = softNavigationHeuristicsTaskId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(NAVIGATE_TO_NAVIGATION_API_KEY_ORDINAL)));

        }


        @Override
        public void navigateEventHandlerPresenceChanged(
boolean present) {

            LocalFrameHostNavigateEventHandlerPresenceChangedParams _message = new LocalFrameHostNavigateEventHandlerPresenceChangedParams();

            _message.present = present;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(NAVIGATE_EVENT_HANDLER_PRESENCE_CHANGED_ORDINAL)));

        }


        @Override
        public void updateTitle(
org.chromium.mojo_base.mojom.String16 title, int titleDirection) {

            LocalFrameHostUpdateTitleParams _message = new LocalFrameHostUpdateTitleParams();

            _message.title = title;

            _message.titleDirection = titleDirection;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_TITLE_ORDINAL)));

        }


        @Override
        public void updateUserActivationState(
int updateType, int notificationType) {

            LocalFrameHostUpdateUserActivationStateParams _message = new LocalFrameHostUpdateUserActivationStateParams();

            _message.updateType = updateType;

            _message.notificationType = notificationType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_USER_ACTIVATION_STATE_ORDINAL)));

        }


        @Override
        public void didConsumeHistoryUserActivation(
) {

            LocalFrameHostDidConsumeHistoryUserActivationParams _message = new LocalFrameHostDidConsumeHistoryUserActivationParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CONSUME_HISTORY_USER_ACTIVATION_ORDINAL)));

        }


        @Override
        public void handleAccessibilityFindInPageResult(
FindInPageResultAxParams params) {

            LocalFrameHostHandleAccessibilityFindInPageResultParams _message = new LocalFrameHostHandleAccessibilityFindInPageResultParams();

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL)));

        }


        @Override
        public void handleAccessibilityFindInPageTermination(
) {

            LocalFrameHostHandleAccessibilityFindInPageTerminationParams _message = new LocalFrameHostHandleAccessibilityFindInPageTerminationParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL)));

        }


        @Override
        public void documentOnLoadCompleted(
) {

            LocalFrameHostDocumentOnLoadCompletedParams _message = new LocalFrameHostDocumentOnLoadCompletedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DOCUMENT_ON_LOAD_COMPLETED_ORDINAL)));

        }


        @Override
        public void forwardResourceTimingToParent(
ResourceTimingInfo timing) {

            LocalFrameHostForwardResourceTimingToParentParams _message = new LocalFrameHostForwardResourceTimingToParentParams();

            _message.timing = timing;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL)));

        }


        @Override
        public void didDispatchDomContentLoadedEvent(
) {

            LocalFrameHostDidDispatchDomContentLoadedEventParams _message = new LocalFrameHostDidDispatchDomContentLoadedEventParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_DISPATCH_DOM_CONTENT_LOADED_EVENT_ORDINAL)));

        }


        @Override
        public void runModalAlertDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, boolean disableThirdPartySubframeSuppresion, 
RunModalAlertDialog_Response callback) {

            LocalFrameHostRunModalAlertDialogParams _message = new LocalFrameHostRunModalAlertDialogParams();

            _message.alertMessage = alertMessage;

            _message.disableThirdPartySubframeSuppresion = disableThirdPartySubframeSuppresion;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runModalConfirmDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, boolean disableThirdPartySubframeSuppresion, 
RunModalConfirmDialog_Response callback) {

            LocalFrameHostRunModalConfirmDialogParams _message = new LocalFrameHostRunModalConfirmDialogParams();

            _message.alertMessage = alertMessage;

            _message.disableThirdPartySubframeSuppresion = disableThirdPartySubframeSuppresion;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runModalPromptDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, org.chromium.mojo_base.mojom.String16 defaultValue, boolean disableThirdPartySubframeSuppresion, 
RunModalPromptDialog_Response callback) {

            LocalFrameHostRunModalPromptDialogParams _message = new LocalFrameHostRunModalPromptDialogParams();

            _message.alertMessage = alertMessage;

            _message.defaultValue = defaultValue;

            _message.disableThirdPartySubframeSuppresion = disableThirdPartySubframeSuppresion;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runBeforeUnloadConfirm(
boolean isReload, 
RunBeforeUnloadConfirm_Response callback) {

            LocalFrameHostRunBeforeUnloadConfirmParams _message = new LocalFrameHostRunBeforeUnloadConfirmParams();

            _message.isReload = isReload;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback(callback));

        }


        @Override
        public void updateFaviconUrl(
FaviconUrl[] faviconUrls) {

            LocalFrameHostUpdateFaviconUrlParams _message = new LocalFrameHostUpdateFaviconUrlParams();

            _message.faviconUrls = faviconUrls;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_FAVICON_URL_ORDINAL)));

        }


        @Override
        public void downloadUrl(
DownloadUrlParams params) {

            LocalFrameHostDownloadUrlParams _message = new LocalFrameHostDownloadUrlParams();

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DOWNLOAD_URL_ORDINAL)));

        }


        @Override
        public void focusedElementChanged(
boolean isEditableElement, boolean isRichlyEditableElement, org.chromium.gfx.mojom.Rect boundsInFrameWidget, int focusType) {

            LocalFrameHostFocusedElementChangedParams _message = new LocalFrameHostFocusedElementChangedParams();

            _message.isEditableElement = isEditableElement;

            _message.isRichlyEditableElement = isRichlyEditableElement;

            _message.boundsInFrameWidget = boundsInFrameWidget;

            _message.focusType = focusType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FOCUSED_ELEMENT_CHANGED_ORDINAL)));

        }


        @Override
        public void textSelectionChanged(
org.chromium.mojo_base.mojom.BigString16 text, int offset, org.chromium.gfx.mojom.Range range) {

            LocalFrameHostTextSelectionChangedParams _message = new LocalFrameHostTextSelectionChangedParams();

            _message.text = text;

            _message.offset = offset;

            _message.range = range;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TEXT_SELECTION_CHANGED_ORDINAL)));

        }


        @Override
        public void showPopupMenu(
PopupMenuClient popupClient, org.chromium.gfx.mojom.Rect bounds, int itemHeight, double fontSize, int selectedItem, MenuItem[] menuItems, boolean rightAligned, boolean allowMultipleSelection) {

            LocalFrameHostShowPopupMenuParams _message = new LocalFrameHostShowPopupMenuParams();

            _message.popupClient = popupClient;

            _message.bounds = bounds;

            _message.itemHeight = itemHeight;

            _message.fontSize = fontSize;

            _message.selectedItem = selectedItem;

            _message.menuItems = menuItems;

            _message.rightAligned = rightAligned;

            _message.allowMultipleSelection = allowMultipleSelection;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SHOW_POPUP_MENU_ORDINAL)));

        }


        @Override
        public void createNewPopupWidget(
org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported popupHost, org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported blinkWidgetHost, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported blinkWidget) {

            LocalFrameHostCreateNewPopupWidgetParams _message = new LocalFrameHostCreateNewPopupWidgetParams();

            _message.popupHost = popupHost;

            _message.blinkWidgetHost = blinkWidgetHost;

            _message.blinkWidget = blinkWidget;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_NEW_POPUP_WIDGET_ORDINAL)));

        }


        @Override
        public void showContextMenu(
org.chromium.mojo.bindings.AssociatedInterfaceNotSupported client, UntrustworthyContextMenuParams params) {

            LocalFrameHostShowContextMenuParams _message = new LocalFrameHostShowContextMenuParams();

            _message.client = client;

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SHOW_CONTEXT_MENU_ORDINAL)));

        }


        @Override
        public void didLoadResourceFromMemoryCache(
org.chromium.url.mojom.Url url, String httpMethod, String mimeType, int requestDestination, boolean includeCredentials) {

            LocalFrameHostDidLoadResourceFromMemoryCacheParams _message = new LocalFrameHostDidLoadResourceFromMemoryCacheParams();

            _message.url = url;

            _message.httpMethod = httpMethod;

            _message.mimeType = mimeType;

            _message.requestDestination = requestDestination;

            _message.includeCredentials = includeCredentials;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_LOAD_RESOURCE_FROM_MEMORY_CACHE_ORDINAL)));

        }


        @Override
        public void didChangeFrameOwnerProperties(
FrameToken childFrameToken, FrameOwnerProperties frameOwnerProperties) {

            LocalFrameHostDidChangeFrameOwnerPropertiesParams _message = new LocalFrameHostDidChangeFrameOwnerPropertiesParams();

            _message.childFrameToken = childFrameToken;

            _message.frameOwnerProperties = frameOwnerProperties;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_FRAME_OWNER_PROPERTIES_ORDINAL)));

        }


        @Override
        public void didChangeOpener(
LocalFrameToken openerFrame) {

            LocalFrameHostDidChangeOpenerParams _message = new LocalFrameHostDidChangeOpenerParams();

            _message.openerFrame = openerFrame;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_OPENER_ORDINAL)));

        }


        @Override
        public void didChangeFramePolicy(
FrameToken childFrameToken, FramePolicy framePolicy) {

            LocalFrameHostDidChangeFramePolicyParams _message = new LocalFrameHostDidChangeFramePolicyParams();

            _message.childFrameToken = childFrameToken;

            _message.framePolicy = framePolicy;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_FRAME_POLICY_ORDINAL)));

        }


        @Override
        public void didChangeIframeAttributes(
FrameToken childFrameToken, IframeAttributes attributes) {

            LocalFrameHostDidChangeIframeAttributesParams _message = new LocalFrameHostDidChangeIframeAttributesParams();

            _message.childFrameToken = childFrameToken;

            _message.attributes = attributes;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_IFRAME_ATTRIBUTES_ORDINAL)));

        }


        @Override
        public void capturePaintPreviewOfSubframe(
org.chromium.gfx.mojom.Rect clipRect, org.chromium.mojo_base.mojom.UnguessableToken guid) {

            LocalFrameHostCapturePaintPreviewOfSubframeParams _message = new LocalFrameHostCapturePaintPreviewOfSubframeParams();

            _message.clipRect = clipRect;

            _message.guid = guid;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CAPTURE_PAINT_PREVIEW_OF_SUBFRAME_ORDINAL)));

        }


        @Override
        public void setCloseListener(
CloseListener listener) {

            LocalFrameHostSetCloseListenerParams _message = new LocalFrameHostSetCloseListenerParams();

            _message.listener = listener;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_CLOSE_LISTENER_ORDINAL)));

        }


        @Override
        public void detach(
) {

            LocalFrameHostDetachParams _message = new LocalFrameHostDetachParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DETACH_ORDINAL)));

        }


        @Override
        public void getKeepAliveHandleFactory(
org.chromium.mojo.bindings.InterfaceRequest<KeepAliveHandleFactory> factory) {

            LocalFrameHostGetKeepAliveHandleFactoryParams _message = new LocalFrameHostGetKeepAliveHandleFactoryParams();

            _message.factory = factory;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_KEEP_ALIVE_HANDLE_FACTORY_ORDINAL)));

        }


        @Override
        public void didAddMessageToConsole(
int logLevel, org.chromium.mojo_base.mojom.BigString16 msg, int lineNumber, org.chromium.mojo_base.mojom.String16 sourceId, org.chromium.mojo_base.mojom.BigString16 untrustedStackTrace) {

            LocalFrameHostDidAddMessageToConsoleParams _message = new LocalFrameHostDidAddMessageToConsoleParams();

            _message.logLevel = logLevel;

            _message.msg = msg;

            _message.lineNumber = lineNumber;

            _message.sourceId = sourceId;

            _message.untrustedStackTrace = untrustedStackTrace;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_ADD_MESSAGE_TO_CONSOLE_ORDINAL)));

        }


        @Override
        public void frameSizeChanged(
org.chromium.gfx.mojom.Size size) {

            LocalFrameHostFrameSizeChangedParams _message = new LocalFrameHostFrameSizeChangedParams();

            _message.size = size;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FRAME_SIZE_CHANGED_ORDINAL)));

        }


        @Override
        public void didInferColorScheme(
int colorScheme) {

            LocalFrameHostDidInferColorSchemeParams _message = new LocalFrameHostDidInferColorSchemeParams();

            _message.colorScheme = colorScheme;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_INFER_COLOR_SCHEME_ORDINAL)));

        }


        @Override
        public void didChangeSrcDoc(
FrameToken childFrameToken, String srcdocValue) {

            LocalFrameHostDidChangeSrcDocParams _message = new LocalFrameHostDidChangeSrcDocParams();

            _message.childFrameToken = childFrameToken;

            _message.srcdocValue = srcdocValue;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_SRC_DOC_ORDINAL)));

        }


        @Override
        public void receivedDelegatedCapability(
int delegatedCapability) {

            LocalFrameHostReceivedDelegatedCapabilityParams _message = new LocalFrameHostReceivedDelegatedCapabilityParams();

            _message.delegatedCapability = delegatedCapability;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RECEIVED_DELEGATED_CAPABILITY_ORDINAL)));

        }


        @Override
        public void sendFencedFrameReportingBeacon(
String eventData, String eventType, int[] destinations, org.chromium.network.mojom.AttributionReportingRuntimeFeatures attributionReportingRuntimeFeatures) {

            LocalFrameHostSendFencedFrameReportingBeaconParams _message = new LocalFrameHostSendFencedFrameReportingBeaconParams();

            _message.eventData = eventData;

            _message.eventType = eventType;

            _message.destinations = destinations;

            _message.attributionReportingRuntimeFeatures = attributionReportingRuntimeFeatures;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SEND_FENCED_FRAME_REPORTING_BEACON_ORDINAL)));

        }


        @Override
        public void sendFencedFrameReportingBeaconToCustomUrl(
org.chromium.url.mojom.Url destinationUrl, org.chromium.network.mojom.AttributionReportingRuntimeFeatures attributionReportingRuntimeFeatures) {

            LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams _message = new LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams();

            _message.destinationUrl = destinationUrl;

            _message.attributionReportingRuntimeFeatures = attributionReportingRuntimeFeatures;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SEND_FENCED_FRAME_REPORTING_BEACON_TO_CUSTOM_URL_ORDINAL)));

        }


        @Override
        public void sendLegacyTechEvent(
String type, LegacyTechEventCodeLocation codeLocation) {

            LocalFrameHostSendLegacyTechEventParams _message = new LocalFrameHostSendLegacyTechEventParams();

            _message.type = type;

            _message.codeLocation = codeLocation;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SEND_LEGACY_TECH_EVENT_ORDINAL)));

        }


        @Override
        public void setFencedFrameAutomaticBeaconReportEventData(
String eventData, int[] destinations, org.chromium.network.mojom.AttributionReportingRuntimeFeatures attributionReportingRuntimeFeatures, boolean once) {

            LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams _message = new LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams();

            _message.eventData = eventData;

            _message.destinations = destinations;

            _message.attributionReportingRuntimeFeatures = attributionReportingRuntimeFeatures;

            _message.once = once;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_FENCED_FRAME_AUTOMATIC_BEACON_REPORT_EVENT_DATA_ORDINAL)));

        }


        @Override
        public void sendPrivateAggregationRequestsForFencedFrameEvent(
String eventType) {

            LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams _message = new LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams();

            _message.eventType = eventType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SEND_PRIVATE_AGGREGATION_REQUESTS_FOR_FENCED_FRAME_EVENT_ORDINAL)));

        }


        @Override
        public void createPortal(
org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported portal, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported client, RemoteFrameInterfacesFromRenderer remoteFrameInterfaces, 
CreatePortal_Response callback) {

            LocalFrameHostCreatePortalParams _message = new LocalFrameHostCreatePortalParams();

            _message.portal = portal;

            _message.client = client;

            _message.remoteFrameInterfaces = remoteFrameInterfaces;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_PORTAL_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostCreatePortalResponseParamsForwardToCallback(callback));

        }


        @Override
        public void adoptPortal(
PortalToken portalToken, RemoteFrameInterfacesFromRenderer remoteFrameInterfaces, 
AdoptPortal_Response callback) {

            LocalFrameHostAdoptPortalParams _message = new LocalFrameHostAdoptPortalParams();

            _message.portalToken = portalToken;

            _message.remoteFrameInterfaces = remoteFrameInterfaces;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ADOPT_PORTAL_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostAdoptPortalResponseParamsForwardToCallback(callback));

        }


        @Override
        public void createFencedFrame(
org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported fencedFrame, RemoteFrameInterfacesFromRenderer remoteFrameInterfaces, RemoteFrameToken frameToken, org.chromium.mojo_base.mojom.UnguessableToken devtoolsFrameToken) {

            LocalFrameHostCreateFencedFrameParams _message = new LocalFrameHostCreateFencedFrameParams();

            _message.fencedFrame = fencedFrame;

            _message.remoteFrameInterfaces = remoteFrameInterfaces;

            _message.frameToken = frameToken;

            _message.devtoolsFrameToken = devtoolsFrameToken;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_FENCED_FRAME_ORDINAL)));

        }


        @Override
        public void onViewTransitionOptInChanged(
int viewTransitionOptIn) {

            LocalFrameHostOnViewTransitionOptInChangedParams _message = new LocalFrameHostOnViewTransitionOptInChangedParams();

            _message.viewTransitionOptIn = viewTransitionOptIn;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_VIEW_TRANSITION_OPT_IN_CHANGED_ORDINAL)));

        }


        @Override
        public void startDragging(
DragData dragData, AllowedDragOperations operationsAllowed, org.chromium.skia.mojom.BitmapN32 image, org.chromium.gfx.mojom.Vector2d cursorOffsetInDip, org.chromium.gfx.mojom.Rect dragObjRectInDip, DragEventSourceInfo eventInfo) {

            LocalFrameHostStartDraggingParams _message = new LocalFrameHostStartDraggingParams();

            _message.dragData = dragData;

            _message.operationsAllowed = operationsAllowed;

            _message.image = image;

            _message.cursorOffsetInDip = cursorOffsetInDip;

            _message.dragObjRectInDip = dragObjRectInDip;

            _message.eventInfo = eventInfo;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(START_DRAGGING_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<LocalFrameHost> {

        Stub(org.chromium.mojo.system.Core core, LocalFrameHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                LocalFrameHost_Internal.MANAGER, messageWithHeader);







                    case EXIT_FULLSCREEN_ORDINAL: {

                        LocalFrameHostExitFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().exitFullscreen();
                        return true;
                    }





                    case FULLSCREEN_STATE_CHANGED_ORDINAL: {

                        LocalFrameHostFullscreenStateChangedParams data =
                                LocalFrameHostFullscreenStateChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().fullscreenStateChanged(data.isFullscreen, data.options);
                        return true;
                    }





                    case MAXIMIZE_ORDINAL: {

                        LocalFrameHostMaximizeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().maximize();
                        return true;
                    }





                    case MINIMIZE_ORDINAL: {

                        LocalFrameHostMinimizeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().minimize();
                        return true;
                    }





                    case RESTORE_ORDINAL: {

                        LocalFrameHostRestoreParams.deserialize(messageWithHeader.getPayload());

                        getImpl().restore();
                        return true;
                    }





                    case REGISTER_PROTOCOL_HANDLER_ORDINAL: {

                        LocalFrameHostRegisterProtocolHandlerParams data =
                                LocalFrameHostRegisterProtocolHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().registerProtocolHandler(data.scheme, data.url, data.userGesture);
                        return true;
                    }





                    case UNREGISTER_PROTOCOL_HANDLER_ORDINAL: {

                        LocalFrameHostUnregisterProtocolHandlerParams data =
                                LocalFrameHostUnregisterProtocolHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().unregisterProtocolHandler(data.scheme, data.url, data.userGesture);
                        return true;
                    }





                    case DID_DISPLAY_INSECURE_CONTENT_ORDINAL: {

                        LocalFrameHostDidDisplayInsecureContentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didDisplayInsecureContent();
                        return true;
                    }





                    case DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL: {

                        LocalFrameHostDidContainInsecureFormActionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didContainInsecureFormAction();
                        return true;
                    }





                    case MAIN_DOCUMENT_ELEMENT_AVAILABLE_ORDINAL: {

                        LocalFrameHostMainDocumentElementAvailableParams data =
                                LocalFrameHostMainDocumentElementAvailableParams.deserialize(messageWithHeader.getPayload());

                        getImpl().mainDocumentElementAvailable(data.usesTemporaryZoomLevel);
                        return true;
                    }





                    case SET_NEEDS_OCCLUSION_TRACKING_ORDINAL: {

                        LocalFrameHostSetNeedsOcclusionTrackingParams data =
                                LocalFrameHostSetNeedsOcclusionTrackingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setNeedsOcclusionTracking(data.needsTracking);
                        return true;
                    }





                    case SET_VIRTUAL_KEYBOARD_MODE_ORDINAL: {

                        LocalFrameHostSetVirtualKeyboardModeParams data =
                                LocalFrameHostSetVirtualKeyboardModeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setVirtualKeyboardMode(data.type);
                        return true;
                    }





                    case VISIBILITY_CHANGED_ORDINAL: {

                        LocalFrameHostVisibilityChangedParams data =
                                LocalFrameHostVisibilityChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().visibilityChanged(data.visibility);
                        return true;
                    }





                    case DID_CHANGE_THEME_COLOR_ORDINAL: {

                        LocalFrameHostDidChangeThemeColorParams data =
                                LocalFrameHostDidChangeThemeColorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeThemeColor(data.themeColor);
                        return true;
                    }





                    case DID_CHANGE_BACKGROUND_COLOR_ORDINAL: {

                        LocalFrameHostDidChangeBackgroundColorParams data =
                                LocalFrameHostDidChangeBackgroundColorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeBackgroundColor(data.backgroundColor, data.colorAdjust);
                        return true;
                    }





                    case DID_FAIL_LOAD_WITH_ERROR_ORDINAL: {

                        LocalFrameHostDidFailLoadWithErrorParams data =
                                LocalFrameHostDidFailLoadWithErrorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFailLoadWithError(data.url, data.errorCode);
                        return true;
                    }





                    case DID_FOCUS_FRAME_ORDINAL: {

                        LocalFrameHostDidFocusFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFocusFrame();
                        return true;
                    }





                    case DID_CALL_FOCUS_ORDINAL: {

                        LocalFrameHostDidCallFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didCallFocus();
                        return true;
                    }





                    case ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL: {

                        LocalFrameHostEnforceInsecureRequestPolicyParams data =
                                LocalFrameHostEnforceInsecureRequestPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureRequestPolicy(data.policyBitmap);
                        return true;
                    }





                    case ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL: {

                        LocalFrameHostEnforceInsecureNavigationsSetParams data =
                                LocalFrameHostEnforceInsecureNavigationsSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureNavigationsSet(data.set);
                        return true;
                    }





                    case SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL: {

                        LocalFrameHostSuddenTerminationDisablerChangedParams data =
                                LocalFrameHostSuddenTerminationDisablerChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().suddenTerminationDisablerChanged(data.present, data.disablerType);
                        return true;
                    }





                    case HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL: {

                        LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams data =
                                LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().hadStickyUserActivationBeforeNavigationChanged(data.hasGesture);
                        return true;
                    }





                    case SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL: {

                        LocalFrameHostScrollRectToVisibleInParentFrameParams data =
                                LocalFrameHostScrollRectToVisibleInParentFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().scrollRectToVisibleInParentFrame(data.rectToScroll, data.params);
                        return true;
                    }





                    case BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL: {

                        LocalFrameHostBubbleLogicalScrollInParentFrameParams data =
                                LocalFrameHostBubbleLogicalScrollInParentFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bubbleLogicalScrollInParentFrame(data.direction, data.granularity);
                        return true;
                    }





                    case START_LOADING_FOR_ASYNC_NAVIGATION_API_COMMIT_ORDINAL: {

                        LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams.deserialize(messageWithHeader.getPayload());

                        getImpl().startLoadingForAsyncNavigationApiCommit();
                        return true;
                    }





                    case DID_BLOCK_NAVIGATION_ORDINAL: {

                        LocalFrameHostDidBlockNavigationParams data =
                                LocalFrameHostDidBlockNavigationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didBlockNavigation(data.blockedUrl, data.initiatorUrl, data.reason);
                        return true;
                    }





                    case DID_CHANGE_LOAD_PROGRESS_ORDINAL: {

                        LocalFrameHostDidChangeLoadProgressParams data =
                                LocalFrameHostDidChangeLoadProgressParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeLoadProgress(data.loadProgress);
                        return true;
                    }





                    case DID_FINISH_LOAD_ORDINAL: {

                        LocalFrameHostDidFinishLoadParams data =
                                LocalFrameHostDidFinishLoadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFinishLoad(data.validatedUrl);
                        return true;
                    }





                    case DISPATCH_LOAD_ORDINAL: {

                        LocalFrameHostDispatchLoadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dispatchLoad();
                        return true;
                    }





                    case GO_TO_ENTRY_AT_OFFSET_ORDINAL: {

                        LocalFrameHostGoToEntryAtOffsetParams data =
                                LocalFrameHostGoToEntryAtOffsetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().goToEntryAtOffset(data.offset, data.hasUserGesture, data.softNavigationHeuristicsTaskId);
                        return true;
                    }





                    case NAVIGATE_TO_NAVIGATION_API_KEY_ORDINAL: {

                        LocalFrameHostNavigateToNavigationApiKeyParams data =
                                LocalFrameHostNavigateToNavigationApiKeyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().navigateToNavigationApiKey(data.key, data.hasUserGesture, data.softNavigationHeuristicsTaskId);
                        return true;
                    }





                    case NAVIGATE_EVENT_HANDLER_PRESENCE_CHANGED_ORDINAL: {

                        LocalFrameHostNavigateEventHandlerPresenceChangedParams data =
                                LocalFrameHostNavigateEventHandlerPresenceChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().navigateEventHandlerPresenceChanged(data.present);
                        return true;
                    }





                    case UPDATE_TITLE_ORDINAL: {

                        LocalFrameHostUpdateTitleParams data =
                                LocalFrameHostUpdateTitleParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateTitle(data.title, data.titleDirection);
                        return true;
                    }





                    case UPDATE_USER_ACTIVATION_STATE_ORDINAL: {

                        LocalFrameHostUpdateUserActivationStateParams data =
                                LocalFrameHostUpdateUserActivationStateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateUserActivationState(data.updateType, data.notificationType);
                        return true;
                    }





                    case DID_CONSUME_HISTORY_USER_ACTIVATION_ORDINAL: {

                        LocalFrameHostDidConsumeHistoryUserActivationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didConsumeHistoryUserActivation();
                        return true;
                    }





                    case HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL: {

                        LocalFrameHostHandleAccessibilityFindInPageResultParams data =
                                LocalFrameHostHandleAccessibilityFindInPageResultParams.deserialize(messageWithHeader.getPayload());

                        getImpl().handleAccessibilityFindInPageResult(data.params);
                        return true;
                    }





                    case HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL: {

                        LocalFrameHostHandleAccessibilityFindInPageTerminationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().handleAccessibilityFindInPageTermination();
                        return true;
                    }





                    case DOCUMENT_ON_LOAD_COMPLETED_ORDINAL: {

                        LocalFrameHostDocumentOnLoadCompletedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().documentOnLoadCompleted();
                        return true;
                    }





                    case FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL: {

                        LocalFrameHostForwardResourceTimingToParentParams data =
                                LocalFrameHostForwardResourceTimingToParentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().forwardResourceTimingToParent(data.timing);
                        return true;
                    }





                    case DID_DISPATCH_DOM_CONTENT_LOADED_EVENT_ORDINAL: {

                        LocalFrameHostDidDispatchDomContentLoadedEventParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didDispatchDomContentLoadedEvent();
                        return true;
                    }













                    case UPDATE_FAVICON_URL_ORDINAL: {

                        LocalFrameHostUpdateFaviconUrlParams data =
                                LocalFrameHostUpdateFaviconUrlParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateFaviconUrl(data.faviconUrls);
                        return true;
                    }





                    case DOWNLOAD_URL_ORDINAL: {

                        LocalFrameHostDownloadUrlParams data =
                                LocalFrameHostDownloadUrlParams.deserialize(messageWithHeader.getPayload());

                        getImpl().downloadUrl(data.params);
                        return true;
                    }





                    case FOCUSED_ELEMENT_CHANGED_ORDINAL: {

                        LocalFrameHostFocusedElementChangedParams data =
                                LocalFrameHostFocusedElementChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().focusedElementChanged(data.isEditableElement, data.isRichlyEditableElement, data.boundsInFrameWidget, data.focusType);
                        return true;
                    }





                    case TEXT_SELECTION_CHANGED_ORDINAL: {

                        LocalFrameHostTextSelectionChangedParams data =
                                LocalFrameHostTextSelectionChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().textSelectionChanged(data.text, data.offset, data.range);
                        return true;
                    }





                    case SHOW_POPUP_MENU_ORDINAL: {

                        LocalFrameHostShowPopupMenuParams data =
                                LocalFrameHostShowPopupMenuParams.deserialize(messageWithHeader.getPayload());

                        getImpl().showPopupMenu(data.popupClient, data.bounds, data.itemHeight, data.fontSize, data.selectedItem, data.menuItems, data.rightAligned, data.allowMultipleSelection);
                        return true;
                    }





                    case CREATE_NEW_POPUP_WIDGET_ORDINAL: {

                        LocalFrameHostCreateNewPopupWidgetParams data =
                                LocalFrameHostCreateNewPopupWidgetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createNewPopupWidget(data.popupHost, data.blinkWidgetHost, data.blinkWidget);
                        return true;
                    }





                    case SHOW_CONTEXT_MENU_ORDINAL: {

                        LocalFrameHostShowContextMenuParams data =
                                LocalFrameHostShowContextMenuParams.deserialize(messageWithHeader.getPayload());

                        getImpl().showContextMenu(data.client, data.params);
                        return true;
                    }





                    case DID_LOAD_RESOURCE_FROM_MEMORY_CACHE_ORDINAL: {

                        LocalFrameHostDidLoadResourceFromMemoryCacheParams data =
                                LocalFrameHostDidLoadResourceFromMemoryCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didLoadResourceFromMemoryCache(data.url, data.httpMethod, data.mimeType, data.requestDestination, data.includeCredentials);
                        return true;
                    }





                    case DID_CHANGE_FRAME_OWNER_PROPERTIES_ORDINAL: {

                        LocalFrameHostDidChangeFrameOwnerPropertiesParams data =
                                LocalFrameHostDidChangeFrameOwnerPropertiesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeFrameOwnerProperties(data.childFrameToken, data.frameOwnerProperties);
                        return true;
                    }





                    case DID_CHANGE_OPENER_ORDINAL: {

                        LocalFrameHostDidChangeOpenerParams data =
                                LocalFrameHostDidChangeOpenerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeOpener(data.openerFrame);
                        return true;
                    }





                    case DID_CHANGE_FRAME_POLICY_ORDINAL: {

                        LocalFrameHostDidChangeFramePolicyParams data =
                                LocalFrameHostDidChangeFramePolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeFramePolicy(data.childFrameToken, data.framePolicy);
                        return true;
                    }





                    case DID_CHANGE_IFRAME_ATTRIBUTES_ORDINAL: {

                        LocalFrameHostDidChangeIframeAttributesParams data =
                                LocalFrameHostDidChangeIframeAttributesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeIframeAttributes(data.childFrameToken, data.attributes);
                        return true;
                    }





                    case CAPTURE_PAINT_PREVIEW_OF_SUBFRAME_ORDINAL: {

                        LocalFrameHostCapturePaintPreviewOfSubframeParams data =
                                LocalFrameHostCapturePaintPreviewOfSubframeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().capturePaintPreviewOfSubframe(data.clipRect, data.guid);
                        return true;
                    }





                    case SET_CLOSE_LISTENER_ORDINAL: {

                        LocalFrameHostSetCloseListenerParams data =
                                LocalFrameHostSetCloseListenerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setCloseListener(data.listener);
                        return true;
                    }





                    case DETACH_ORDINAL: {

                        LocalFrameHostDetachParams.deserialize(messageWithHeader.getPayload());

                        getImpl().detach();
                        return true;
                    }





                    case GET_KEEP_ALIVE_HANDLE_FACTORY_ORDINAL: {

                        LocalFrameHostGetKeepAliveHandleFactoryParams data =
                                LocalFrameHostGetKeepAliveHandleFactoryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getKeepAliveHandleFactory(data.factory);
                        return true;
                    }





                    case DID_ADD_MESSAGE_TO_CONSOLE_ORDINAL: {

                        LocalFrameHostDidAddMessageToConsoleParams data =
                                LocalFrameHostDidAddMessageToConsoleParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didAddMessageToConsole(data.logLevel, data.msg, data.lineNumber, data.sourceId, data.untrustedStackTrace);
                        return true;
                    }





                    case FRAME_SIZE_CHANGED_ORDINAL: {

                        LocalFrameHostFrameSizeChangedParams data =
                                LocalFrameHostFrameSizeChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().frameSizeChanged(data.size);
                        return true;
                    }





                    case DID_INFER_COLOR_SCHEME_ORDINAL: {

                        LocalFrameHostDidInferColorSchemeParams data =
                                LocalFrameHostDidInferColorSchemeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didInferColorScheme(data.colorScheme);
                        return true;
                    }





                    case DID_CHANGE_SRC_DOC_ORDINAL: {

                        LocalFrameHostDidChangeSrcDocParams data =
                                LocalFrameHostDidChangeSrcDocParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeSrcDoc(data.childFrameToken, data.srcdocValue);
                        return true;
                    }





                    case RECEIVED_DELEGATED_CAPABILITY_ORDINAL: {

                        LocalFrameHostReceivedDelegatedCapabilityParams data =
                                LocalFrameHostReceivedDelegatedCapabilityParams.deserialize(messageWithHeader.getPayload());

                        getImpl().receivedDelegatedCapability(data.delegatedCapability);
                        return true;
                    }





                    case SEND_FENCED_FRAME_REPORTING_BEACON_ORDINAL: {

                        LocalFrameHostSendFencedFrameReportingBeaconParams data =
                                LocalFrameHostSendFencedFrameReportingBeaconParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sendFencedFrameReportingBeacon(data.eventData, data.eventType, data.destinations, data.attributionReportingRuntimeFeatures);
                        return true;
                    }





                    case SEND_FENCED_FRAME_REPORTING_BEACON_TO_CUSTOM_URL_ORDINAL: {

                        LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams data =
                                LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sendFencedFrameReportingBeaconToCustomUrl(data.destinationUrl, data.attributionReportingRuntimeFeatures);
                        return true;
                    }





                    case SEND_LEGACY_TECH_EVENT_ORDINAL: {

                        LocalFrameHostSendLegacyTechEventParams data =
                                LocalFrameHostSendLegacyTechEventParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sendLegacyTechEvent(data.type, data.codeLocation);
                        return true;
                    }





                    case SET_FENCED_FRAME_AUTOMATIC_BEACON_REPORT_EVENT_DATA_ORDINAL: {

                        LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams data =
                                LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setFencedFrameAutomaticBeaconReportEventData(data.eventData, data.destinations, data.attributionReportingRuntimeFeatures, data.once);
                        return true;
                    }





                    case SEND_PRIVATE_AGGREGATION_REQUESTS_FOR_FENCED_FRAME_EVENT_ORDINAL: {

                        LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams data =
                                LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sendPrivateAggregationRequestsForFencedFrameEvent(data.eventType);
                        return true;
                    }









                    case CREATE_FENCED_FRAME_ORDINAL: {

                        LocalFrameHostCreateFencedFrameParams data =
                                LocalFrameHostCreateFencedFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createFencedFrame(data.fencedFrame, data.remoteFrameInterfaces, data.frameToken, data.devtoolsFrameToken);
                        return true;
                    }





                    case ON_VIEW_TRANSITION_OPT_IN_CHANGED_ORDINAL: {

                        LocalFrameHostOnViewTransitionOptInChangedParams data =
                                LocalFrameHostOnViewTransitionOptInChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onViewTransitionOptInChanged(data.viewTransitionOptIn);
                        return true;
                    }





                    case START_DRAGGING_ORDINAL: {

                        LocalFrameHostStartDraggingParams data =
                                LocalFrameHostStartDraggingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().startDragging(data.dragData, data.operationsAllowed, data.image, data.cursorOffsetInDip, data.dragObjRectInDip, data.eventInfo);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), LocalFrameHost_Internal.MANAGER, messageWithHeader, receiver);







                    case ENTER_FULLSCREEN_ORDINAL: {

                        LocalFrameHostEnterFullscreenParams data =
                                LocalFrameHostEnterFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enterFullscreen(data.options, new LocalFrameHostEnterFullscreenResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }























































































                    case RUN_MODAL_ALERT_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalAlertDialogParams data =
                                LocalFrameHostRunModalAlertDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalAlertDialog(data.alertMessage, data.disableThirdPartySubframeSuppresion, new LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_MODAL_CONFIRM_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalConfirmDialogParams data =
                                LocalFrameHostRunModalConfirmDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalConfirmDialog(data.alertMessage, data.disableThirdPartySubframeSuppresion, new LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_MODAL_PROMPT_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalPromptDialogParams data =
                                LocalFrameHostRunModalPromptDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalPromptDialog(data.alertMessage, data.defaultValue, data.disableThirdPartySubframeSuppresion, new LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL: {

                        LocalFrameHostRunBeforeUnloadConfirmParams data =
                                LocalFrameHostRunBeforeUnloadConfirmParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runBeforeUnloadConfirm(data.isReload, new LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }



























































                    case CREATE_PORTAL_ORDINAL: {

                        LocalFrameHostCreatePortalParams data =
                                LocalFrameHostCreatePortalParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createPortal(data.portal, data.client, data.remoteFrameInterfaces, new LocalFrameHostCreatePortalResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ADOPT_PORTAL_ORDINAL: {

                        LocalFrameHostAdoptPortalParams data =
                                LocalFrameHostAdoptPortalParams.deserialize(messageWithHeader.getPayload());

                        getImpl().adoptPortal(data.portalToken, data.remoteFrameInterfaces, new LocalFrameHostAdoptPortalResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }








                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class LocalFrameHostEnterFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FullscreenOptions options;

        private LocalFrameHostEnterFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnterFullscreenParams() {
            this(0);
        }

        public static LocalFrameHostEnterFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnterFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnterFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnterFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnterFullscreenParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.options = FullscreenOptions.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.options, 8, false);
        }
    }



    
    static final class LocalFrameHostEnterFullscreenResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean granted;

        private LocalFrameHostEnterFullscreenResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnterFullscreenResponseParams() {
            this(0);
        }

        public static LocalFrameHostEnterFullscreenResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnterFullscreenResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnterFullscreenResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnterFullscreenResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnterFullscreenResponseParams(elementsOrVersion);
                    {
                        
                    result.granted = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.granted, 8, 0);
        }
    }

    static class LocalFrameHostEnterFullscreenResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.EnterFullscreen_Response mCallback;

        LocalFrameHostEnterFullscreenResponseParamsForwardToCallback(LocalFrameHost.EnterFullscreen_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ENTER_FULLSCREEN_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalFrameHostEnterFullscreenResponseParams response = LocalFrameHostEnterFullscreenResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.granted);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostEnterFullscreenResponseParamsProxyToResponder implements LocalFrameHost.EnterFullscreen_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostEnterFullscreenResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean granted) {
            LocalFrameHostEnterFullscreenResponseParams _response = new LocalFrameHostEnterFullscreenResponseParams();

            _response.granted = granted;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ENTER_FULLSCREEN_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostExitFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostExitFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostExitFullscreenParams() {
            this(0);
        }

        public static LocalFrameHostExitFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostExitFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostExitFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostExitFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostExitFullscreenParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostFullscreenStateChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isFullscreen;
        public FullscreenOptions options;

        private LocalFrameHostFullscreenStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostFullscreenStateChangedParams() {
            this(0);
        }

        public static LocalFrameHostFullscreenStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostFullscreenStateChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostFullscreenStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostFullscreenStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostFullscreenStateChangedParams(elementsOrVersion);
                    {
                        
                    result.isFullscreen = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.options = FullscreenOptions.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isFullscreen, 8, 0);
            
            encoder0.encode(this.options, 16, true);
        }
    }



    
    static final class LocalFrameHostMaximizeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostMaximizeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostMaximizeParams() {
            this(0);
        }

        public static LocalFrameHostMaximizeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostMaximizeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostMaximizeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostMaximizeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostMaximizeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostMinimizeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostMinimizeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostMinimizeParams() {
            this(0);
        }

        public static LocalFrameHostMinimizeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostMinimizeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostMinimizeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostMinimizeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostMinimizeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostRestoreParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostRestoreParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRestoreParams() {
            this(0);
        }

        public static LocalFrameHostRestoreParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRestoreParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRestoreParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRestoreParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRestoreParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostRegisterProtocolHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String scheme;
        public org.chromium.url.mojom.Url url;
        public boolean userGesture;

        private LocalFrameHostRegisterProtocolHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRegisterProtocolHandlerParams() {
            this(0);
        }

        public static LocalFrameHostRegisterProtocolHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRegisterProtocolHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRegisterProtocolHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRegisterProtocolHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRegisterProtocolHandlerParams(elementsOrVersion);
                    {
                        
                    result.scheme = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(24, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scheme, 8, false);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.userGesture, 24, 0);
        }
    }



    
    static final class LocalFrameHostUnregisterProtocolHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String scheme;
        public org.chromium.url.mojom.Url url;
        public boolean userGesture;

        private LocalFrameHostUnregisterProtocolHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUnregisterProtocolHandlerParams() {
            this(0);
        }

        public static LocalFrameHostUnregisterProtocolHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUnregisterProtocolHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUnregisterProtocolHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUnregisterProtocolHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUnregisterProtocolHandlerParams(elementsOrVersion);
                    {
                        
                    result.scheme = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(24, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scheme, 8, false);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.userGesture, 24, 0);
        }
    }



    
    static final class LocalFrameHostDidDisplayInsecureContentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidDisplayInsecureContentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidDisplayInsecureContentParams() {
            this(0);
        }

        public static LocalFrameHostDidDisplayInsecureContentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidDisplayInsecureContentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidDisplayInsecureContentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidDisplayInsecureContentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidDisplayInsecureContentParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidContainInsecureFormActionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidContainInsecureFormActionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidContainInsecureFormActionParams() {
            this(0);
        }

        public static LocalFrameHostDidContainInsecureFormActionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidContainInsecureFormActionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidContainInsecureFormActionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidContainInsecureFormActionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidContainInsecureFormActionParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostMainDocumentElementAvailableParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean usesTemporaryZoomLevel;

        private LocalFrameHostMainDocumentElementAvailableParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostMainDocumentElementAvailableParams() {
            this(0);
        }

        public static LocalFrameHostMainDocumentElementAvailableParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostMainDocumentElementAvailableParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostMainDocumentElementAvailableParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostMainDocumentElementAvailableParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostMainDocumentElementAvailableParams(elementsOrVersion);
                    {
                        
                    result.usesTemporaryZoomLevel = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.usesTemporaryZoomLevel, 8, 0);
        }
    }



    
    static final class LocalFrameHostSetNeedsOcclusionTrackingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean needsTracking;

        private LocalFrameHostSetNeedsOcclusionTrackingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSetNeedsOcclusionTrackingParams() {
            this(0);
        }

        public static LocalFrameHostSetNeedsOcclusionTrackingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSetNeedsOcclusionTrackingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSetNeedsOcclusionTrackingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSetNeedsOcclusionTrackingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSetNeedsOcclusionTrackingParams(elementsOrVersion);
                    {
                        
                    result.needsTracking = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.needsTracking, 8, 0);
        }
    }



    
    static final class LocalFrameHostSetVirtualKeyboardModeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int type;

        private LocalFrameHostSetVirtualKeyboardModeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSetVirtualKeyboardModeParams() {
            this(0);
        }

        public static LocalFrameHostSetVirtualKeyboardModeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSetVirtualKeyboardModeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSetVirtualKeyboardModeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSetVirtualKeyboardModeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSetVirtualKeyboardModeParams(elementsOrVersion);
                    {
                        
                    result.type = decoder0.readInt(8);
                        org.chromium.ui.mojom.VirtualKeyboardMode.validate(result.type);
                        result.type = org.chromium.ui.mojom.VirtualKeyboardMode.toKnownValue(result.type);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.type, 8);
        }
    }



    
    static final class LocalFrameHostVisibilityChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int visibility;

        private LocalFrameHostVisibilityChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostVisibilityChangedParams() {
            this(0);
        }

        public static LocalFrameHostVisibilityChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostVisibilityChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostVisibilityChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostVisibilityChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostVisibilityChangedParams(elementsOrVersion);
                    {
                        
                    result.visibility = decoder0.readInt(8);
                        FrameVisibility.validate(result.visibility);
                        result.visibility = FrameVisibility.toKnownValue(result.visibility);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.visibility, 8);
        }
    }



    
    static final class LocalFrameHostDidChangeThemeColorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.skia.mojom.SkColor themeColor;

        private LocalFrameHostDidChangeThemeColorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeThemeColorParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeThemeColorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeThemeColorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeThemeColorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeThemeColorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeThemeColorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.themeColor = org.chromium.skia.mojom.SkColor.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.themeColor, 8, true);
        }
    }



    
    static final class LocalFrameHostDidChangeBackgroundColorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.skia.mojom.SkColor4f backgroundColor;
        public boolean colorAdjust;

        private LocalFrameHostDidChangeBackgroundColorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeBackgroundColorParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeBackgroundColorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeBackgroundColorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeBackgroundColorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeBackgroundColorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeBackgroundColorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.backgroundColor = org.chromium.skia.mojom.SkColor4f.decode(decoder1);
                    }
                    {
                        
                    result.colorAdjust = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.backgroundColor, 8, false);
            
            encoder0.encode(this.colorAdjust, 16, 0);
        }
    }



    
    static final class LocalFrameHostDidFailLoadWithErrorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public int errorCode;

        private LocalFrameHostDidFailLoadWithErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFailLoadWithErrorParams() {
            this(0);
        }

        public static LocalFrameHostDidFailLoadWithErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFailLoadWithErrorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFailLoadWithErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFailLoadWithErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFailLoadWithErrorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.errorCode = decoder0.readInt(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.url, 8, false);
            
            encoder0.encode(this.errorCode, 16);
        }
    }



    
    static final class LocalFrameHostDidFocusFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidFocusFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFocusFrameParams() {
            this(0);
        }

        public static LocalFrameHostDidFocusFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFocusFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFocusFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFocusFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFocusFrameParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidCallFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidCallFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidCallFocusParams() {
            this(0);
        }

        public static LocalFrameHostDidCallFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidCallFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidCallFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidCallFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidCallFocusParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostEnforceInsecureRequestPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int policyBitmap;

        private LocalFrameHostEnforceInsecureRequestPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnforceInsecureRequestPolicyParams() {
            this(0);
        }

        public static LocalFrameHostEnforceInsecureRequestPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnforceInsecureRequestPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnforceInsecureRequestPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnforceInsecureRequestPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnforceInsecureRequestPolicyParams(elementsOrVersion);
                    {
                        
                    result.policyBitmap = decoder0.readInt(8);
                        InsecureRequestPolicy.validate(result.policyBitmap);
                        result.policyBitmap = InsecureRequestPolicy.toKnownValue(result.policyBitmap);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.policyBitmap, 8);
        }
    }



    
    static final class LocalFrameHostEnforceInsecureNavigationsSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] set;

        private LocalFrameHostEnforceInsecureNavigationsSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnforceInsecureNavigationsSetParams() {
            this(0);
        }

        public static LocalFrameHostEnforceInsecureNavigationsSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnforceInsecureNavigationsSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnforceInsecureNavigationsSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnforceInsecureNavigationsSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnforceInsecureNavigationsSetParams(elementsOrVersion);
                    {
                        
                    result.set = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.set, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class LocalFrameHostSuddenTerminationDisablerChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean present;
        public int disablerType;

        private LocalFrameHostSuddenTerminationDisablerChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSuddenTerminationDisablerChangedParams() {
            this(0);
        }

        public static LocalFrameHostSuddenTerminationDisablerChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSuddenTerminationDisablerChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSuddenTerminationDisablerChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSuddenTerminationDisablerChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSuddenTerminationDisablerChangedParams(elementsOrVersion);
                    {
                        
                    result.present = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.disablerType = decoder0.readInt(12);
                        SuddenTerminationDisablerType.validate(result.disablerType);
                        result.disablerType = SuddenTerminationDisablerType.toKnownValue(result.disablerType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.present, 8, 0);
            
            encoder0.encode(this.disablerType, 12);
        }
    }



    
    static final class LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean hasGesture;

        private LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams() {
            this(0);
        }

        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams(elementsOrVersion);
                    {
                        
                    result.hasGesture = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.hasGesture, 8, 0);
        }
    }



    
    static final class LocalFrameHostScrollRectToVisibleInParentFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.RectF rectToScroll;
        public ScrollIntoViewParams params;

        private LocalFrameHostScrollRectToVisibleInParentFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostScrollRectToVisibleInParentFrameParams() {
            this(0);
        }

        public static LocalFrameHostScrollRectToVisibleInParentFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostScrollRectToVisibleInParentFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostScrollRectToVisibleInParentFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostScrollRectToVisibleInParentFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostScrollRectToVisibleInParentFrameParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.rectToScroll = org.chromium.gfx.mojom.RectF.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.params = ScrollIntoViewParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.rectToScroll, 8, false);
            
            encoder0.encode(this.params, 16, false);
        }
    }



    
    static final class LocalFrameHostBubbleLogicalScrollInParentFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int direction;
        public int granularity;

        private LocalFrameHostBubbleLogicalScrollInParentFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostBubbleLogicalScrollInParentFrameParams() {
            this(0);
        }

        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostBubbleLogicalScrollInParentFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostBubbleLogicalScrollInParentFrameParams(elementsOrVersion);
                    {
                        
                    result.direction = decoder0.readInt(8);
                        ScrollDirection.validate(result.direction);
                        result.direction = ScrollDirection.toKnownValue(result.direction);
                    }
                    {
                        
                    result.granularity = decoder0.readInt(12);
                        org.chromium.ui.mojom.ScrollGranularity.validate(result.granularity);
                        result.granularity = org.chromium.ui.mojom.ScrollGranularity.toKnownValue(result.granularity);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.direction, 8);
            
            encoder0.encode(this.granularity, 12);
        }
    }



    
    static final class LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams() {
            this(0);
        }

        public static LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostStartLoadingForAsyncNavigationApiCommitParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidBlockNavigationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url blockedUrl;
        public org.chromium.url.mojom.Url initiatorUrl;
        public int reason;

        private LocalFrameHostDidBlockNavigationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidBlockNavigationParams() {
            this(0);
        }

        public static LocalFrameHostDidBlockNavigationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidBlockNavigationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidBlockNavigationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidBlockNavigationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidBlockNavigationParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.blockedUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.initiatorUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.reason = decoder0.readInt(24);
                        NavigationBlockedReason.validate(result.reason);
                        result.reason = NavigationBlockedReason.toKnownValue(result.reason);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.blockedUrl, 8, false);
            
            encoder0.encode(this.initiatorUrl, 16, false);
            
            encoder0.encode(this.reason, 24);
        }
    }



    
    static final class LocalFrameHostDidChangeLoadProgressParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public double loadProgress;

        private LocalFrameHostDidChangeLoadProgressParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeLoadProgressParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeLoadProgressParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeLoadProgressParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeLoadProgressParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeLoadProgressParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeLoadProgressParams(elementsOrVersion);
                    {
                        
                    result.loadProgress = decoder0.readDouble(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.loadProgress, 8);
        }
    }



    
    static final class LocalFrameHostDidFinishLoadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url validatedUrl;

        private LocalFrameHostDidFinishLoadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFinishLoadParams() {
            this(0);
        }

        public static LocalFrameHostDidFinishLoadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFinishLoadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFinishLoadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFinishLoadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFinishLoadParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.validatedUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.validatedUrl, 8, false);
        }
    }



    
    static final class LocalFrameHostDispatchLoadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDispatchLoadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDispatchLoadParams() {
            this(0);
        }

        public static LocalFrameHostDispatchLoadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDispatchLoadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDispatchLoadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDispatchLoadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDispatchLoadParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostGoToEntryAtOffsetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int offset;
        public boolean hasUserGesture;
        public TaskAttributionId softNavigationHeuristicsTaskId;

        private LocalFrameHostGoToEntryAtOffsetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostGoToEntryAtOffsetParams() {
            this(0);
        }

        public static LocalFrameHostGoToEntryAtOffsetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostGoToEntryAtOffsetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostGoToEntryAtOffsetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostGoToEntryAtOffsetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostGoToEntryAtOffsetParams(elementsOrVersion);
                    {
                        
                    result.offset = decoder0.readInt(8);
                    }
                    {
                        
                    result.hasUserGesture = decoder0.readBoolean(12, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.softNavigationHeuristicsTaskId = TaskAttributionId.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.offset, 8);
            
            encoder0.encode(this.hasUserGesture, 12, 0);
            
            encoder0.encode(this.softNavigationHeuristicsTaskId, 16, true);
        }
    }



    
    static final class LocalFrameHostNavigateToNavigationApiKeyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String key;
        public boolean hasUserGesture;
        public TaskAttributionId softNavigationHeuristicsTaskId;

        private LocalFrameHostNavigateToNavigationApiKeyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostNavigateToNavigationApiKeyParams() {
            this(0);
        }

        public static LocalFrameHostNavigateToNavigationApiKeyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostNavigateToNavigationApiKeyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostNavigateToNavigationApiKeyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostNavigateToNavigationApiKeyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostNavigateToNavigationApiKeyParams(elementsOrVersion);
                    {
                        
                    result.key = decoder0.readString(8, false);
                    }
                    {
                        
                    result.hasUserGesture = decoder0.readBoolean(16, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.softNavigationHeuristicsTaskId = TaskAttributionId.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.key, 8, false);
            
            encoder0.encode(this.hasUserGesture, 16, 0);
            
            encoder0.encode(this.softNavigationHeuristicsTaskId, 24, true);
        }
    }



    
    static final class LocalFrameHostNavigateEventHandlerPresenceChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean present;

        private LocalFrameHostNavigateEventHandlerPresenceChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostNavigateEventHandlerPresenceChangedParams() {
            this(0);
        }

        public static LocalFrameHostNavigateEventHandlerPresenceChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostNavigateEventHandlerPresenceChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostNavigateEventHandlerPresenceChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostNavigateEventHandlerPresenceChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostNavigateEventHandlerPresenceChangedParams(elementsOrVersion);
                    {
                        
                    result.present = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.present, 8, 0);
        }
    }



    
    static final class LocalFrameHostUpdateTitleParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 title;
        public int titleDirection;

        private LocalFrameHostUpdateTitleParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUpdateTitleParams() {
            this(0);
        }

        public static LocalFrameHostUpdateTitleParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUpdateTitleParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUpdateTitleParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUpdateTitleParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUpdateTitleParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.title = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.titleDirection = decoder0.readInt(16);
                        org.chromium.mojo_base.mojom.TextDirection.validate(result.titleDirection);
                        result.titleDirection = org.chromium.mojo_base.mojom.TextDirection.toKnownValue(result.titleDirection);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.title, 8, true);
            
            encoder0.encode(this.titleDirection, 16);
        }
    }



    
    static final class LocalFrameHostUpdateUserActivationStateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int updateType;
        public int notificationType;

        private LocalFrameHostUpdateUserActivationStateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUpdateUserActivationStateParams() {
            this(0);
        }

        public static LocalFrameHostUpdateUserActivationStateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUpdateUserActivationStateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUpdateUserActivationStateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUpdateUserActivationStateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUpdateUserActivationStateParams(elementsOrVersion);
                    {
                        
                    result.updateType = decoder0.readInt(8);
                        UserActivationUpdateType.validate(result.updateType);
                        result.updateType = UserActivationUpdateType.toKnownValue(result.updateType);
                    }
                    {
                        
                    result.notificationType = decoder0.readInt(12);
                        UserActivationNotificationType.validate(result.notificationType);
                        result.notificationType = UserActivationNotificationType.toKnownValue(result.notificationType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.updateType, 8);
            
            encoder0.encode(this.notificationType, 12);
        }
    }



    
    static final class LocalFrameHostDidConsumeHistoryUserActivationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidConsumeHistoryUserActivationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidConsumeHistoryUserActivationParams() {
            this(0);
        }

        public static LocalFrameHostDidConsumeHistoryUserActivationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidConsumeHistoryUserActivationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidConsumeHistoryUserActivationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidConsumeHistoryUserActivationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidConsumeHistoryUserActivationParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostHandleAccessibilityFindInPageResultParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FindInPageResultAxParams params;

        private LocalFrameHostHandleAccessibilityFindInPageResultParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHandleAccessibilityFindInPageResultParams() {
            this(0);
        }

        public static LocalFrameHostHandleAccessibilityFindInPageResultParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHandleAccessibilityFindInPageResultParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHandleAccessibilityFindInPageResultParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHandleAccessibilityFindInPageResultParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHandleAccessibilityFindInPageResultParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.params = FindInPageResultAxParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.params, 8, false);
        }
    }



    
    static final class LocalFrameHostHandleAccessibilityFindInPageTerminationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostHandleAccessibilityFindInPageTerminationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHandleAccessibilityFindInPageTerminationParams() {
            this(0);
        }

        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHandleAccessibilityFindInPageTerminationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHandleAccessibilityFindInPageTerminationParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDocumentOnLoadCompletedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDocumentOnLoadCompletedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDocumentOnLoadCompletedParams() {
            this(0);
        }

        public static LocalFrameHostDocumentOnLoadCompletedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDocumentOnLoadCompletedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDocumentOnLoadCompletedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDocumentOnLoadCompletedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDocumentOnLoadCompletedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostForwardResourceTimingToParentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ResourceTimingInfo timing;

        private LocalFrameHostForwardResourceTimingToParentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostForwardResourceTimingToParentParams() {
            this(0);
        }

        public static LocalFrameHostForwardResourceTimingToParentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostForwardResourceTimingToParentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostForwardResourceTimingToParentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostForwardResourceTimingToParentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostForwardResourceTimingToParentParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.timing = ResourceTimingInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.timing, 8, false);
        }
    }



    
    static final class LocalFrameHostDidDispatchDomContentLoadedEventParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidDispatchDomContentLoadedEventParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidDispatchDomContentLoadedEventParams() {
            this(0);
        }

        public static LocalFrameHostDidDispatchDomContentLoadedEventParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidDispatchDomContentLoadedEventParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidDispatchDomContentLoadedEventParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidDispatchDomContentLoadedEventParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidDispatchDomContentLoadedEventParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostRunModalAlertDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;
        public boolean disableThirdPartySubframeSuppresion;

        private LocalFrameHostRunModalAlertDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalAlertDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalAlertDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalAlertDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalAlertDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalAlertDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalAlertDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.disableThirdPartySubframeSuppresion = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
            
            encoder0.encode(this.disableThirdPartySubframeSuppresion, 16, 0);
        }
    }



    
    static final class LocalFrameHostRunModalAlertDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostRunModalAlertDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalAlertDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalAlertDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalAlertDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalAlertDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalAlertDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalAlertDialogResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalAlertDialog_Response mCallback;

        LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalAlertDialog_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalAlertDialog_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            LocalFrameHostRunModalAlertDialogResponseParams _response = new LocalFrameHostRunModalAlertDialogResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunModalConfirmDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;
        public boolean disableThirdPartySubframeSuppresion;

        private LocalFrameHostRunModalConfirmDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalConfirmDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalConfirmDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalConfirmDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalConfirmDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalConfirmDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalConfirmDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.disableThirdPartySubframeSuppresion = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
            
            encoder0.encode(this.disableThirdPartySubframeSuppresion, 16, 0);
        }
    }



    
    static final class LocalFrameHostRunModalConfirmDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;

        private LocalFrameHostRunModalConfirmDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalConfirmDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalConfirmDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalConfirmDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalConfirmDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalConfirmDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalConfirmDialogResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
        }
    }

    static class LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalConfirmDialog_Response mCallback;

        LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalConfirmDialog_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                LocalFrameHostRunModalConfirmDialogResponseParams response = LocalFrameHostRunModalConfirmDialogResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalConfirmDialog_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success) {
            LocalFrameHostRunModalConfirmDialogResponseParams _response = new LocalFrameHostRunModalConfirmDialogResponseParams();

            _response.success = success;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunModalPromptDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;
        public org.chromium.mojo_base.mojom.String16 defaultValue;
        public boolean disableThirdPartySubframeSuppresion;

        private LocalFrameHostRunModalPromptDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalPromptDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalPromptDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalPromptDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalPromptDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalPromptDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalPromptDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.defaultValue = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.disableThirdPartySubframeSuppresion = decoder0.readBoolean(24, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
            
            encoder0.encode(this.defaultValue, 16, false);
            
            encoder0.encode(this.disableThirdPartySubframeSuppresion, 24, 0);
        }
    }



    
    static final class LocalFrameHostRunModalPromptDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public org.chromium.mojo_base.mojom.String16 result;

        private LocalFrameHostRunModalPromptDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalPromptDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalPromptDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalPromptDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalPromptDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalPromptDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalPromptDialogResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.result = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.result, 16, false);
        }
    }

    static class LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalPromptDialog_Response mCallback;

        LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalPromptDialog_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                LocalFrameHostRunModalPromptDialogResponseParams response = LocalFrameHostRunModalPromptDialogResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalPromptDialog_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, org.chromium.mojo_base.mojom.String16 result) {
            LocalFrameHostRunModalPromptDialogResponseParams _response = new LocalFrameHostRunModalPromptDialogResponseParams();

            _response.success = success;

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunBeforeUnloadConfirmParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isReload;

        private LocalFrameHostRunBeforeUnloadConfirmParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunBeforeUnloadConfirmParams() {
            this(0);
        }

        public static LocalFrameHostRunBeforeUnloadConfirmParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunBeforeUnloadConfirmParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunBeforeUnloadConfirmParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunBeforeUnloadConfirmParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunBeforeUnloadConfirmParams(elementsOrVersion);
                    {
                        
                    result.isReload = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isReload, 8, 0);
        }
    }



    
    static final class LocalFrameHostRunBeforeUnloadConfirmResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;

        private LocalFrameHostRunBeforeUnloadConfirmResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunBeforeUnloadConfirmResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunBeforeUnloadConfirmResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunBeforeUnloadConfirmResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
        }
    }

    static class LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunBeforeUnloadConfirm_Response mCallback;

        LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback(LocalFrameHost.RunBeforeUnloadConfirm_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                LocalFrameHostRunBeforeUnloadConfirmResponseParams response = LocalFrameHostRunBeforeUnloadConfirmResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder implements LocalFrameHost.RunBeforeUnloadConfirm_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success) {
            LocalFrameHostRunBeforeUnloadConfirmResponseParams _response = new LocalFrameHostRunBeforeUnloadConfirmResponseParams();

            _response.success = success;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostUpdateFaviconUrlParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FaviconUrl[] faviconUrls;

        private LocalFrameHostUpdateFaviconUrlParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUpdateFaviconUrlParams() {
            this(0);
        }

        public static LocalFrameHostUpdateFaviconUrlParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUpdateFaviconUrlParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUpdateFaviconUrlParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUpdateFaviconUrlParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUpdateFaviconUrlParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.faviconUrls = new FaviconUrl[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.faviconUrls[i1] = FaviconUrl.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.faviconUrls == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.faviconUrls.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.faviconUrls.length; ++i0) {
                    
                    encoder1.encode(this.faviconUrls[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class LocalFrameHostDownloadUrlParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DownloadUrlParams params;

        private LocalFrameHostDownloadUrlParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDownloadUrlParams() {
            this(0);
        }

        public static LocalFrameHostDownloadUrlParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDownloadUrlParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDownloadUrlParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDownloadUrlParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDownloadUrlParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.params = DownloadUrlParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.params, 8, false);
        }
    }



    
    static final class LocalFrameHostFocusedElementChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isEditableElement;
        public boolean isRichlyEditableElement;
        public org.chromium.gfx.mojom.Rect boundsInFrameWidget;
        public int focusType;

        private LocalFrameHostFocusedElementChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostFocusedElementChangedParams() {
            this(0);
        }

        public static LocalFrameHostFocusedElementChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostFocusedElementChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostFocusedElementChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostFocusedElementChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostFocusedElementChangedParams(elementsOrVersion);
                    {
                        
                    result.isEditableElement = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.isRichlyEditableElement = decoder0.readBoolean(8, 1);
                    }
                    {
                        
                    result.focusType = decoder0.readInt(12);
                        FocusType.validate(result.focusType);
                        result.focusType = FocusType.toKnownValue(result.focusType);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.boundsInFrameWidget = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isEditableElement, 8, 0);
            
            encoder0.encode(this.isRichlyEditableElement, 8, 1);
            
            encoder0.encode(this.focusType, 12);
            
            encoder0.encode(this.boundsInFrameWidget, 16, false);
        }
    }



    
    static final class LocalFrameHostTextSelectionChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.BigString16 text;
        public int offset;
        public org.chromium.gfx.mojom.Range range;

        private LocalFrameHostTextSelectionChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostTextSelectionChangedParams() {
            this(0);
        }

        public static LocalFrameHostTextSelectionChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostTextSelectionChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostTextSelectionChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostTextSelectionChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostTextSelectionChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.text = org.chromium.mojo_base.mojom.BigString16.decode(decoder1);
                    }
                    {
                        
                    result.offset = decoder0.readInt(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.range = org.chromium.gfx.mojom.Range.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.text, 8, false);
            
            encoder0.encode(this.offset, 16);
            
            encoder0.encode(this.range, 24, false);
        }
    }



    
    static final class LocalFrameHostShowPopupMenuParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PopupMenuClient popupClient;
        public org.chromium.gfx.mojom.Rect bounds;
        public int itemHeight;
        public double fontSize;
        public int selectedItem;
        public MenuItem[] menuItems;
        public boolean rightAligned;
        public boolean allowMultipleSelection;

        private LocalFrameHostShowPopupMenuParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostShowPopupMenuParams() {
            this(0);
        }

        public static LocalFrameHostShowPopupMenuParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostShowPopupMenuParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostShowPopupMenuParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostShowPopupMenuParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostShowPopupMenuParams(elementsOrVersion);
                    {
                        
                    result.popupClient = decoder0.readServiceInterface(8, false, PopupMenuClient.MANAGER);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.bounds = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    result.itemHeight = decoder0.readInt(24);
                    }
                    {
                        
                    result.selectedItem = decoder0.readInt(28);
                    }
                    {
                        
                    result.fontSize = decoder0.readDouble(32);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.menuItems = new MenuItem[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.menuItems[i1] = MenuItem.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    result.rightAligned = decoder0.readBoolean(48, 0);
                    }
                    {
                        
                    result.allowMultipleSelection = decoder0.readBoolean(48, 1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.popupClient, 8, false, PopupMenuClient.MANAGER);
            
            encoder0.encode(this.bounds, 16, false);
            
            encoder0.encode(this.itemHeight, 24);
            
            encoder0.encode(this.selectedItem, 28);
            
            encoder0.encode(this.fontSize, 32);
            
            if (this.menuItems == null) {
                encoder0.encodeNullPointer(40, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.menuItems.length, 40, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.menuItems.length; ++i0) {
                    
                    encoder1.encode(this.menuItems[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            encoder0.encode(this.rightAligned, 48, 0);
            
            encoder0.encode(this.allowMultipleSelection, 48, 1);
        }
    }



    
    static final class LocalFrameHostCreateNewPopupWidgetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported popupHost;
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported blinkWidgetHost;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported blinkWidget;

        private LocalFrameHostCreateNewPopupWidgetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostCreateNewPopupWidgetParams() {
            this(0);
        }

        public static LocalFrameHostCreateNewPopupWidgetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostCreateNewPopupWidgetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostCreateNewPopupWidgetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostCreateNewPopupWidgetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostCreateNewPopupWidgetParams(elementsOrVersion);
                    {
                        
                    result.popupHost = decoder0.readAssociatedInterfaceRequestNotSupported(8, false);
                    }
                    {
                        
                    result.blinkWidgetHost = decoder0.readAssociatedInterfaceRequestNotSupported(12, false);
                    }
                    {
                        
                    result.blinkWidget = decoder0.readAssociatedServiceInterfaceNotSupported(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.popupHost, 8, false);
            
            encoder0.encode(this.blinkWidgetHost, 12, false);
            
            encoder0.encode(this.blinkWidget, 16, false);
        }
    }



    
    static final class LocalFrameHostShowContextMenuParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported client;
        public UntrustworthyContextMenuParams params;

        private LocalFrameHostShowContextMenuParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostShowContextMenuParams() {
            this(0);
        }

        public static LocalFrameHostShowContextMenuParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostShowContextMenuParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostShowContextMenuParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostShowContextMenuParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostShowContextMenuParams(elementsOrVersion);
                    {
                        
                    result.client = decoder0.readAssociatedServiceInterfaceNotSupported(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.params = UntrustworthyContextMenuParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.client, 8, false);
            
            encoder0.encode(this.params, 16, false);
        }
    }



    
    static final class LocalFrameHostDidLoadResourceFromMemoryCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public String httpMethod;
        public String mimeType;
        public int requestDestination;
        public boolean includeCredentials;

        private LocalFrameHostDidLoadResourceFromMemoryCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidLoadResourceFromMemoryCacheParams() {
            this(0);
        }

        public static LocalFrameHostDidLoadResourceFromMemoryCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidLoadResourceFromMemoryCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidLoadResourceFromMemoryCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidLoadResourceFromMemoryCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidLoadResourceFromMemoryCacheParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.httpMethod = decoder0.readString(16, false);
                    }
                    {
                        
                    result.mimeType = decoder0.readString(24, false);
                    }
                    {
                        
                    result.requestDestination = decoder0.readInt(32);
                        org.chromium.network.mojom.RequestDestination.validate(result.requestDestination);
                        result.requestDestination = org.chromium.network.mojom.RequestDestination.toKnownValue(result.requestDestination);
                    }
                    {
                        
                    result.includeCredentials = decoder0.readBoolean(36, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.url, 8, false);
            
            encoder0.encode(this.httpMethod, 16, false);
            
            encoder0.encode(this.mimeType, 24, false);
            
            encoder0.encode(this.requestDestination, 32);
            
            encoder0.encode(this.includeCredentials, 36, 0);
        }
    }



    
    static final class LocalFrameHostDidChangeFrameOwnerPropertiesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameToken childFrameToken;
        public FrameOwnerProperties frameOwnerProperties;

        private LocalFrameHostDidChangeFrameOwnerPropertiesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeFrameOwnerPropertiesParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeFrameOwnerPropertiesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeFrameOwnerPropertiesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeFrameOwnerPropertiesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeFrameOwnerPropertiesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeFrameOwnerPropertiesParams(elementsOrVersion);
                    {
                        
                    result.childFrameToken = FrameToken.decode(decoder0, 8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.frameOwnerProperties = FrameOwnerProperties.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.childFrameToken, 8, false);
            
            encoder0.encode(this.frameOwnerProperties, 24, false);
        }
    }



    
    static final class LocalFrameHostDidChangeOpenerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public LocalFrameToken openerFrame;

        private LocalFrameHostDidChangeOpenerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeOpenerParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeOpenerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeOpenerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeOpenerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeOpenerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeOpenerParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.openerFrame = LocalFrameToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.openerFrame, 8, true);
        }
    }



    
    static final class LocalFrameHostDidChangeFramePolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameToken childFrameToken;
        public FramePolicy framePolicy;

        private LocalFrameHostDidChangeFramePolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeFramePolicyParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeFramePolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeFramePolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeFramePolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeFramePolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeFramePolicyParams(elementsOrVersion);
                    {
                        
                    result.childFrameToken = FrameToken.decode(decoder0, 8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.framePolicy = FramePolicy.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.childFrameToken, 8, false);
            
            encoder0.encode(this.framePolicy, 24, false);
        }
    }



    
    static final class LocalFrameHostDidChangeIframeAttributesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameToken childFrameToken;
        public IframeAttributes attributes;

        private LocalFrameHostDidChangeIframeAttributesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeIframeAttributesParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeIframeAttributesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeIframeAttributesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeIframeAttributesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeIframeAttributesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeIframeAttributesParams(elementsOrVersion);
                    {
                        
                    result.childFrameToken = FrameToken.decode(decoder0, 8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.attributes = IframeAttributes.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.childFrameToken, 8, false);
            
            encoder0.encode(this.attributes, 24, false);
        }
    }



    
    static final class LocalFrameHostCapturePaintPreviewOfSubframeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect clipRect;
        public org.chromium.mojo_base.mojom.UnguessableToken guid;

        private LocalFrameHostCapturePaintPreviewOfSubframeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostCapturePaintPreviewOfSubframeParams() {
            this(0);
        }

        public static LocalFrameHostCapturePaintPreviewOfSubframeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostCapturePaintPreviewOfSubframeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostCapturePaintPreviewOfSubframeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostCapturePaintPreviewOfSubframeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostCapturePaintPreviewOfSubframeParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.clipRect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.guid = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.clipRect, 8, false);
            
            encoder0.encode(this.guid, 16, false);
        }
    }



    
    static final class LocalFrameHostSetCloseListenerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public CloseListener listener;

        private LocalFrameHostSetCloseListenerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSetCloseListenerParams() {
            this(0);
        }

        public static LocalFrameHostSetCloseListenerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSetCloseListenerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSetCloseListenerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSetCloseListenerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSetCloseListenerParams(elementsOrVersion);
                    {
                        
                    result.listener = decoder0.readServiceInterface(8, false, CloseListener.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.listener, 8, false, CloseListener.MANAGER);
        }
    }



    
    static final class LocalFrameHostDetachParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDetachParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDetachParams() {
            this(0);
        }

        public static LocalFrameHostDetachParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDetachParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDetachParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDetachParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDetachParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostGetKeepAliveHandleFactoryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<KeepAliveHandleFactory> factory;

        private LocalFrameHostGetKeepAliveHandleFactoryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostGetKeepAliveHandleFactoryParams() {
            this(0);
        }

        public static LocalFrameHostGetKeepAliveHandleFactoryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostGetKeepAliveHandleFactoryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostGetKeepAliveHandleFactoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostGetKeepAliveHandleFactoryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostGetKeepAliveHandleFactoryParams(elementsOrVersion);
                    {
                        
                    result.factory = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.factory, 8, false);
        }
    }



    
    static final class LocalFrameHostDidAddMessageToConsoleParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int logLevel;
        public org.chromium.mojo_base.mojom.BigString16 msg;
        public int lineNumber;
        public org.chromium.mojo_base.mojom.String16 sourceId;
        public org.chromium.mojo_base.mojom.BigString16 untrustedStackTrace;

        private LocalFrameHostDidAddMessageToConsoleParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidAddMessageToConsoleParams() {
            this(0);
        }

        public static LocalFrameHostDidAddMessageToConsoleParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidAddMessageToConsoleParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidAddMessageToConsoleParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidAddMessageToConsoleParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidAddMessageToConsoleParams(elementsOrVersion);
                    {
                        
                    result.logLevel = decoder0.readInt(8);
                        ConsoleMessageLevel.validate(result.logLevel);
                        result.logLevel = ConsoleMessageLevel.toKnownValue(result.logLevel);
                    }
                    {
                        
                    result.lineNumber = decoder0.readInt(12);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.msg = org.chromium.mojo_base.mojom.BigString16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.sourceId = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.untrustedStackTrace = org.chromium.mojo_base.mojom.BigString16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.logLevel, 8);
            
            encoder0.encode(this.lineNumber, 12);
            
            encoder0.encode(this.msg, 16, false);
            
            encoder0.encode(this.sourceId, 24, true);
            
            encoder0.encode(this.untrustedStackTrace, 32, true);
        }
    }



    
    static final class LocalFrameHostFrameSizeChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Size size;

        private LocalFrameHostFrameSizeChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostFrameSizeChangedParams() {
            this(0);
        }

        public static LocalFrameHostFrameSizeChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostFrameSizeChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostFrameSizeChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostFrameSizeChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostFrameSizeChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.size = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.size, 8, false);
        }
    }



    
    static final class LocalFrameHostDidInferColorSchemeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int colorScheme;

        private LocalFrameHostDidInferColorSchemeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidInferColorSchemeParams() {
            this(0);
        }

        public static LocalFrameHostDidInferColorSchemeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidInferColorSchemeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidInferColorSchemeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidInferColorSchemeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidInferColorSchemeParams(elementsOrVersion);
                    {
                        
                    result.colorScheme = decoder0.readInt(8);
                        PreferredColorScheme.validate(result.colorScheme);
                        result.colorScheme = PreferredColorScheme.toKnownValue(result.colorScheme);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.colorScheme, 8);
        }
    }



    
    static final class LocalFrameHostDidChangeSrcDocParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameToken childFrameToken;
        public String srcdocValue;

        private LocalFrameHostDidChangeSrcDocParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeSrcDocParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeSrcDocParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeSrcDocParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeSrcDocParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeSrcDocParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeSrcDocParams(elementsOrVersion);
                    {
                        
                    result.childFrameToken = FrameToken.decode(decoder0, 8);
                    }
                    {
                        
                    result.srcdocValue = decoder0.readString(24, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.childFrameToken, 8, false);
            
            encoder0.encode(this.srcdocValue, 24, false);
        }
    }



    
    static final class LocalFrameHostReceivedDelegatedCapabilityParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int delegatedCapability;

        private LocalFrameHostReceivedDelegatedCapabilityParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostReceivedDelegatedCapabilityParams() {
            this(0);
        }

        public static LocalFrameHostReceivedDelegatedCapabilityParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostReceivedDelegatedCapabilityParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostReceivedDelegatedCapabilityParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostReceivedDelegatedCapabilityParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostReceivedDelegatedCapabilityParams(elementsOrVersion);
                    {
                        
                    result.delegatedCapability = decoder0.readInt(8);
                        DelegatedCapability.validate(result.delegatedCapability);
                        result.delegatedCapability = DelegatedCapability.toKnownValue(result.delegatedCapability);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.delegatedCapability, 8);
        }
    }



    
    static final class LocalFrameHostSendFencedFrameReportingBeaconParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String eventData;
        public String eventType;
        public int[] destinations;
        public org.chromium.network.mojom.AttributionReportingRuntimeFeatures attributionReportingRuntimeFeatures;

        private LocalFrameHostSendFencedFrameReportingBeaconParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSendFencedFrameReportingBeaconParams() {
            this(0);
        }

        public static LocalFrameHostSendFencedFrameReportingBeaconParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSendFencedFrameReportingBeaconParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSendFencedFrameReportingBeaconParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSendFencedFrameReportingBeaconParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSendFencedFrameReportingBeaconParams(elementsOrVersion);
                    {
                        
                    result.eventData = decoder0.readString(8, false);
                    }
                    {
                        
                    result.eventType = decoder0.readString(16, false);
                    }
                    {
                        
                    result.destinations = decoder0.readInts(24, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    {
                        for (int i1 = 0; i1 < result.destinations.length; ++i1) {
                            ReportingDestination.validate(result.destinations[i1]);
                        }
                    }
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.attributionReportingRuntimeFeatures = org.chromium.network.mojom.AttributionReportingRuntimeFeatures.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.eventData, 8, false);
            
            encoder0.encode(this.eventType, 16, false);
            
            encoder0.encode(this.destinations, 24, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            
            encoder0.encode(this.attributionReportingRuntimeFeatures, 32, false);
        }
    }



    
    static final class LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url destinationUrl;
        public org.chromium.network.mojom.AttributionReportingRuntimeFeatures attributionReportingRuntimeFeatures;

        private LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams() {
            this(0);
        }

        public static LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSendFencedFrameReportingBeaconToCustomUrlParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.destinationUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.attributionReportingRuntimeFeatures = org.chromium.network.mojom.AttributionReportingRuntimeFeatures.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.destinationUrl, 8, false);
            
            encoder0.encode(this.attributionReportingRuntimeFeatures, 16, false);
        }
    }



    
    static final class LocalFrameHostSendLegacyTechEventParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String type;
        public LegacyTechEventCodeLocation codeLocation;

        private LocalFrameHostSendLegacyTechEventParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSendLegacyTechEventParams() {
            this(0);
        }

        public static LocalFrameHostSendLegacyTechEventParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSendLegacyTechEventParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSendLegacyTechEventParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSendLegacyTechEventParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSendLegacyTechEventParams(elementsOrVersion);
                    {
                        
                    result.type = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.codeLocation = LegacyTechEventCodeLocation.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.type, 8, false);
            
            encoder0.encode(this.codeLocation, 16, false);
        }
    }



    
    static final class LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String eventData;
        public int[] destinations;
        public org.chromium.network.mojom.AttributionReportingRuntimeFeatures attributionReportingRuntimeFeatures;
        public boolean once;

        private LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams() {
            this(0);
        }

        public static LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSetFencedFrameAutomaticBeaconReportEventDataParams(elementsOrVersion);
                    {
                        
                    result.eventData = decoder0.readString(8, false);
                    }
                    {
                        
                    result.destinations = decoder0.readInts(16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    {
                        for (int i1 = 0; i1 < result.destinations.length; ++i1) {
                            ReportingDestination.validate(result.destinations[i1]);
                        }
                    }
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.attributionReportingRuntimeFeatures = org.chromium.network.mojom.AttributionReportingRuntimeFeatures.decode(decoder1);
                    }
                    {
                        
                    result.once = decoder0.readBoolean(32, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.eventData, 8, false);
            
            encoder0.encode(this.destinations, 16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            
            encoder0.encode(this.attributionReportingRuntimeFeatures, 24, false);
            
            encoder0.encode(this.once, 32, 0);
        }
    }



    
    static final class LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String eventType;

        private LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams() {
            this(0);
        }

        public static LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSendPrivateAggregationRequestsForFencedFrameEventParams(elementsOrVersion);
                    {
                        
                    result.eventType = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.eventType, 8, false);
        }
    }



    
    static final class LocalFrameHostCreatePortalParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported portal;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported client;
        public RemoteFrameInterfacesFromRenderer remoteFrameInterfaces;

        private LocalFrameHostCreatePortalParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostCreatePortalParams() {
            this(0);
        }

        public static LocalFrameHostCreatePortalParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostCreatePortalParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostCreatePortalParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostCreatePortalParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostCreatePortalParams(elementsOrVersion);
                    {
                        
                    result.portal = decoder0.readAssociatedInterfaceRequestNotSupported(8, false);
                    }
                    {
                        
                    result.client = decoder0.readAssociatedServiceInterfaceNotSupported(12, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.remoteFrameInterfaces = RemoteFrameInterfacesFromRenderer.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.portal, 8, false);
            
            encoder0.encode(this.client, 12, false);
            
            encoder0.encode(this.remoteFrameInterfaces, 24, false);
        }
    }



    
    static final class LocalFrameHostCreatePortalResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameReplicationState initialReplicatedState;
        public PortalToken portalToken;
        public RemoteFrameToken frameToken;
        public org.chromium.mojo_base.mojom.UnguessableToken devtoolsFrameToken;

        private LocalFrameHostCreatePortalResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostCreatePortalResponseParams() {
            this(0);
        }

        public static LocalFrameHostCreatePortalResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostCreatePortalResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostCreatePortalResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostCreatePortalResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostCreatePortalResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.initialReplicatedState = FrameReplicationState.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.portalToken = PortalToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.frameToken = RemoteFrameToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.devtoolsFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.initialReplicatedState, 8, false);
            
            encoder0.encode(this.portalToken, 16, false);
            
            encoder0.encode(this.frameToken, 24, false);
            
            encoder0.encode(this.devtoolsFrameToken, 32, false);
        }
    }

    static class LocalFrameHostCreatePortalResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.CreatePortal_Response mCallback;

        LocalFrameHostCreatePortalResponseParamsForwardToCallback(LocalFrameHost.CreatePortal_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_PORTAL_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                LocalFrameHostCreatePortalResponseParams response = LocalFrameHostCreatePortalResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.initialReplicatedState, response.portalToken, response.frameToken, response.devtoolsFrameToken);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostCreatePortalResponseParamsProxyToResponder implements LocalFrameHost.CreatePortal_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostCreatePortalResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(FrameReplicationState initialReplicatedState, PortalToken portalToken, RemoteFrameToken frameToken, org.chromium.mojo_base.mojom.UnguessableToken devtoolsFrameToken) {
            LocalFrameHostCreatePortalResponseParams _response = new LocalFrameHostCreatePortalResponseParams();

            _response.initialReplicatedState = initialReplicatedState;

            _response.portalToken = portalToken;

            _response.frameToken = frameToken;

            _response.devtoolsFrameToken = devtoolsFrameToken;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_PORTAL_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostAdoptPortalParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PortalToken portalToken;
        public RemoteFrameInterfacesFromRenderer remoteFrameInterfaces;

        private LocalFrameHostAdoptPortalParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostAdoptPortalParams() {
            this(0);
        }

        public static LocalFrameHostAdoptPortalParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostAdoptPortalParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostAdoptPortalParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostAdoptPortalParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostAdoptPortalParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.portalToken = PortalToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.remoteFrameInterfaces = RemoteFrameInterfacesFromRenderer.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.portalToken, 8, false);
            
            encoder0.encode(this.remoteFrameInterfaces, 16, false);
        }
    }



    
    static final class LocalFrameHostAdoptPortalResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameReplicationState replicatedState;
        public RemoteFrameToken frameToken;
        public org.chromium.mojo_base.mojom.UnguessableToken devtoolsFrameToken;

        private LocalFrameHostAdoptPortalResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostAdoptPortalResponseParams() {
            this(0);
        }

        public static LocalFrameHostAdoptPortalResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostAdoptPortalResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostAdoptPortalResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostAdoptPortalResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostAdoptPortalResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.replicatedState = FrameReplicationState.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.frameToken = RemoteFrameToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.devtoolsFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.replicatedState, 8, false);
            
            encoder0.encode(this.frameToken, 16, false);
            
            encoder0.encode(this.devtoolsFrameToken, 24, false);
        }
    }

    static class LocalFrameHostAdoptPortalResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.AdoptPortal_Response mCallback;

        LocalFrameHostAdoptPortalResponseParamsForwardToCallback(LocalFrameHost.AdoptPortal_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ADOPT_PORTAL_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                LocalFrameHostAdoptPortalResponseParams response = LocalFrameHostAdoptPortalResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.replicatedState, response.frameToken, response.devtoolsFrameToken);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostAdoptPortalResponseParamsProxyToResponder implements LocalFrameHost.AdoptPortal_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostAdoptPortalResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(FrameReplicationState replicatedState, RemoteFrameToken frameToken, org.chromium.mojo_base.mojom.UnguessableToken devtoolsFrameToken) {
            LocalFrameHostAdoptPortalResponseParams _response = new LocalFrameHostAdoptPortalResponseParams();

            _response.replicatedState = replicatedState;

            _response.frameToken = frameToken;

            _response.devtoolsFrameToken = devtoolsFrameToken;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ADOPT_PORTAL_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostCreateFencedFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported fencedFrame;
        public RemoteFrameInterfacesFromRenderer remoteFrameInterfaces;
        public RemoteFrameToken frameToken;
        public org.chromium.mojo_base.mojom.UnguessableToken devtoolsFrameToken;

        private LocalFrameHostCreateFencedFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostCreateFencedFrameParams() {
            this(0);
        }

        public static LocalFrameHostCreateFencedFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostCreateFencedFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostCreateFencedFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostCreateFencedFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostCreateFencedFrameParams(elementsOrVersion);
                    {
                        
                    result.fencedFrame = decoder0.readAssociatedInterfaceRequestNotSupported(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.remoteFrameInterfaces = RemoteFrameInterfacesFromRenderer.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.frameToken = RemoteFrameToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.devtoolsFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.fencedFrame, 8, false);
            
            encoder0.encode(this.remoteFrameInterfaces, 16, false);
            
            encoder0.encode(this.frameToken, 24, false);
            
            encoder0.encode(this.devtoolsFrameToken, 32, false);
        }
    }



    
    static final class LocalFrameHostOnViewTransitionOptInChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int viewTransitionOptIn;

        private LocalFrameHostOnViewTransitionOptInChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostOnViewTransitionOptInChangedParams() {
            this(0);
        }

        public static LocalFrameHostOnViewTransitionOptInChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostOnViewTransitionOptInChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostOnViewTransitionOptInChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostOnViewTransitionOptInChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostOnViewTransitionOptInChangedParams(elementsOrVersion);
                    {
                        
                    result.viewTransitionOptIn = decoder0.readInt(8);
                        ViewTransitionSameOriginOptIn.validate(result.viewTransitionOptIn);
                        result.viewTransitionOptIn = ViewTransitionSameOriginOptIn.toKnownValue(result.viewTransitionOptIn);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.viewTransitionOptIn, 8);
        }
    }



    
    static final class LocalFrameHostStartDraggingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DragData dragData;
        public AllowedDragOperations operationsAllowed;
        public org.chromium.skia.mojom.BitmapN32 image;
        public org.chromium.gfx.mojom.Vector2d cursorOffsetInDip;
        public org.chromium.gfx.mojom.Rect dragObjRectInDip;
        public DragEventSourceInfo eventInfo;

        private LocalFrameHostStartDraggingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostStartDraggingParams() {
            this(0);
        }

        public static LocalFrameHostStartDraggingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostStartDraggingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostStartDraggingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostStartDraggingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostStartDraggingParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.dragData = DragData.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.operationsAllowed = AllowedDragOperations.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.image = org.chromium.skia.mojom.BitmapN32.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.cursorOffsetInDip = org.chromium.gfx.mojom.Vector2d.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    result.dragObjRectInDip = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                    result.eventInfo = DragEventSourceInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.dragData, 8, false);
            
            encoder0.encode(this.operationsAllowed, 16, false);
            
            encoder0.encode(this.image, 24, true);
            
            encoder0.encode(this.cursorOffsetInDip, 32, false);
            
            encoder0.encode(this.dragObjRectInDip, 40, false);
            
            encoder0.encode(this.eventInfo, 48, false);
        }
    }



}
