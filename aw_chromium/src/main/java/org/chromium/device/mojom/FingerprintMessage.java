// FingerprintMessage.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/device/public/mojom/fingerprint.mojom
//

package org.chromium.device.mojom;

public final class FingerprintMessage extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int FingerprintError = 0;
        public static final int ScanResult = 1;
    }

    private int mFingerprintError;
    private int mScanResult;

    public void setFingerprintError(int fingerprintError) {
        this.mTag = Tag.FingerprintError;
        this.mFingerprintError = fingerprintError;
    }

    public int getFingerprintError() {
        assert this.mTag == Tag.FingerprintError;
        return this.mFingerprintError;
    }

    public void setScanResult(int scanResult) {
        this.mTag = Tag.ScanResult;
        this.mScanResult = scanResult;
    }

    public int getScanResult() {
        assert this.mTag == Tag.ScanResult;
        return this.mScanResult;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.FingerprintError: {

                encoder0.encode(this.mFingerprintError, offset + 8);
                break;
            }
            case Tag.ScanResult: {

                encoder0.encode(this.mScanResult, offset + 8);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static FingerprintMessage deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final FingerprintMessage decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        FingerprintMessage result = new FingerprintMessage();
        switch (dataHeader.elementsOrVersion) {
            case Tag.FingerprintError: {

                result.mFingerprintError = decoder0.readInt(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                FingerprintError.validate(result.mFingerprintError);
                result.mFingerprintError = FingerprintError.toKnownValue(result.mFingerprintError);
                result.mTag = Tag.FingerprintError;
                break;
            }
            case Tag.ScanResult: {

                result.mScanResult = decoder0.readInt(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                ScanResult.validate(result.mScanResult);
                result.mScanResult = ScanResult.toKnownValue(result.mScanResult);
                result.mTag = Tag.ScanResult;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}