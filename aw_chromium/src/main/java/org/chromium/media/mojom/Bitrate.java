// Bitrate.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/video_encode_accelerator.mojom
//

package org.chromium.media.mojom;

public final class Bitrate extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int Constant = 0;
        public static final int Variable = 1;
        public static final int External = 2;
    }

    private ConstantBitrate mConstant;
    private VariableBitrate mVariable;
    private ExternalBitrate mExternal;

    public void setConstant(ConstantBitrate constant) {
        this.mTag = Tag.Constant;
        this.mConstant = constant;
    }

    public ConstantBitrate getConstant() {
        assert this.mTag == Tag.Constant;
        return this.mConstant;
    }

    public void setVariable(VariableBitrate variable) {
        this.mTag = Tag.Variable;
        this.mVariable = variable;
    }

    public VariableBitrate getVariable() {
        assert this.mTag == Tag.Variable;
        return this.mVariable;
    }

    public void setExternal(ExternalBitrate external) {
        this.mTag = Tag.External;
        this.mExternal = external;
    }

    public ExternalBitrate getExternal() {
        assert this.mTag == Tag.External;
        return this.mExternal;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.Constant: {

                encoder0.encode(this.mConstant, offset + 8, false);
                break;
            }
            case Tag.Variable: {

                encoder0.encode(this.mVariable, offset + 8, false);
                break;
            }
            case Tag.External: {

                encoder0.encode(this.mExternal, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static Bitrate deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final Bitrate decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        Bitrate result = new Bitrate();
        switch (dataHeader.elementsOrVersion) {
            case Tag.Constant: {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mConstant = ConstantBitrate.decode(decoder1);
                result.mTag = Tag.Constant;
                break;
            }
            case Tag.Variable: {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mVariable = VariableBitrate.decode(decoder1);
                result.mTag = Tag.Variable;
                break;
            }
            case Tag.External: {

                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mExternal = ExternalBitrate.decode(decoder1);
                result.mTag = Tag.External;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}