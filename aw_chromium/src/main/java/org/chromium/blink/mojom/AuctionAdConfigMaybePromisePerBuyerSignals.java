// AuctionAdConfigMaybePromisePerBuyerSignals.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/interest_group/interest_group_types.mojom
//

package org.chromium.blink.mojom;


public final class AuctionAdConfigMaybePromisePerBuyerSignals extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int Promise = 0;
        public static final int Value = 1;
    }

    private int mPromise;
    private java.util.Map<org.chromium.url.internal.mojom.Origin, String> mValue;

    public void setPromise(int promise) {
        this.mTag = Tag.Promise;
        this.mPromise = promise;
    }

    public int getPromise() {
        assert this.mTag == Tag.Promise;
        return this.mPromise;
    }

    public void setValue(java.util.Map<org.chromium.url.internal.mojom.Origin, String> value) {
        this.mTag = Tag.Value;
        this.mValue = value;
    }

    public java.util.Map<org.chromium.url.internal.mojom.Origin, String> getValue() {
        assert this.mTag == Tag.Value;
        return this.mValue;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.Promise: {
                
                encoder0.encode(this.mPromise, offset + 8);
                break;
            }
            case Tag.Value: {
                
                if (this.mValue == null) {
                    encoder0.encodeNullPointer(offset + 8, true);
                } else {
                    org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(offset + 8);
                    int size0 = this.mValue.size();
                    org.chromium.url.internal.mojom.Origin[] keys0 = new org.chromium.url.internal.mojom.Origin[size0];
                    String[] values0 = new String[size0];
                    int index0 = 0;
                    for (java.util.Map.Entry<org.chromium.url.internal.mojom.Origin, String> entry0 : this.mValue.entrySet()) {
                        keys0[index0] = entry0.getKey();
                        values0[index0] = entry0.getValue();
                        ++index0;
                    }
                    
                    {
                        org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        for (int i1 = 0; i1 < keys0.length; ++i1) {
                            
                            encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        }
                    }
                    
                    {
                        org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        for (int i1 = 0; i1 < values0.length; ++i1) {
                            
                            encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        }
                    }
                }
                break;
            }
            default: {
                break;
            }
        }
    }

    public static AuctionAdConfigMaybePromisePerBuyerSignals deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final AuctionAdConfigMaybePromisePerBuyerSignals decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        AuctionAdConfigMaybePromisePerBuyerSignals result = new AuctionAdConfigMaybePromisePerBuyerSignals();
        switch (dataHeader.elementsOrVersion) {
            case Tag.Promise: {
                
                result.mPromise = decoder0.readInt(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                result.mTag = Tag.Promise;
                break;
            }
            case Tag.Value: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, true);
                if (decoder1 == null) {
                    result.mValue = null;
                } else {
                    decoder1.readDataHeaderForMap();
                    org.chromium.url.internal.mojom.Origin[] keys0;
                    String[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new org.chromium.url.internal.mojom.Origin[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                keys0[i2] = org.chromium.url.internal.mojom.Origin.decode(decoder3);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                values0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    result.mValue = new java.util.HashMap<org.chromium.url.internal.mojom.Origin, String>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.mValue.put(keys0[index0],  values0[index0]);
                    }
                }
                result.mTag = Tag.Value;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}