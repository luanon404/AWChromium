// UsbOpenDeviceResult.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/device/public/mojom/usb_device.mojom
//

package org.chromium.device.mojom;

import androidx.annotation.IntDef;


public final class UsbOpenDeviceResult extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int Success = 0;
        public static final int Error = 1;
    };
    private int mSuccess;
    private int mError;

    public void setSuccess(int success) {
        this.mTag = Tag.Success;
        this.mSuccess = success;
    }

    public int getSuccess() {
        assert this.mTag == Tag.Success;
        return this.mSuccess;
    }

    public void setError(int error) {
        this.mTag = Tag.Error;
        this.mError = error;
    }

    public int getError() {
        assert this.mTag == Tag.Error;
        return this.mError;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.Success: {
                
                encoder0.encode(this.mSuccess, offset + 8);
                break;
            }
            case Tag.Error: {
                
                encoder0.encode(this.mError, offset + 8);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static UsbOpenDeviceResult deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final UsbOpenDeviceResult decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        UsbOpenDeviceResult result = new UsbOpenDeviceResult();
        switch (dataHeader.elementsOrVersion) {
            case Tag.Success: {
                
                result.mSuccess = decoder0.readInt(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                    UsbOpenDeviceSuccess.validate(result.mSuccess);
                    result.mSuccess = UsbOpenDeviceSuccess.toKnownValue(result.mSuccess);
                result.mTag = Tag.Success;
                break;
            }
            case Tag.Error: {
                
                result.mError = decoder0.readInt(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                    UsbOpenDeviceError.validate(result.mError);
                    result.mError = UsbOpenDeviceError.toKnownValue(result.mError);
                result.mTag = Tag.Error;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}