// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics_bridge_records.proto
package org.chromium.android_webview.proto

import com.google.protobuf.ByteString
import com.google.protobuf.GeneratedMessageLite
import com.google.protobuf.Internal
import com.google.protobuf.InvalidProtocolBufferException
import com.google.protobuf.MessageLiteOrBuilder
import com.google.protobuf.Parser
import org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType

object MetricsBridgeRecords {

    interface HistogramRecordOrBuilder : MessageLiteOrBuilder {
        /**
         * `.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;`
         * @return The enum numeric value on the wire for recordType.
         */
        val recordTypeValue: Int

        /**
         * `.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;`
         * @return The recordType.
         */
        val recordType: RecordType?

        /**
         * <pre>
         * The name of the histogram
        </pre> *
         *
         * `string histogram_name = 2;`
         * @return The histogramName.
         */
        val histogramName: String

        /**
         * <pre>
         * The name of the histogram
        </pre> *
         *
         * `string histogram_name = 2;`
         * @return The bytes for histogramName.
         */
        val histogramNameBytes: ByteString?

        /**
         * <pre>
         * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
         * and 1 for true.
        </pre> *
         *
         * `int32 sample = 3;`
         * @return The sample.
         */
        val sample: Int

        /**
         * <pre>
         * the smallest value recorded in the first bucket; should be greater than
         * zero.
        </pre> *
         *
         * `int32 min = 4;`
         * @return The min.
         */
        val min: Int

        /**
         * <pre>
         * the smallest value recorded in the overflow bucket.
        </pre> *
         *
         * `int32 max = 5;`
         * @return The max.
         */
        val max: Int

        /**
         * <pre>
         * number of histogram buckets: Two buckets are used for underflow and
         * overflow, and the remaining buckets cover the range [min, max);
         * numBuckets should be 100 or less.
        </pre> *
         *
         * `int32 num_buckets = 6;`
         * @return The numBuckets.
         */
        val numBuckets: Int

        /**
         * `.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;`
         * @return Whether the metadata field is set.
         */
        fun hasMetadata(): Boolean

        /**
         * `.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;`
         * @return The metadata.
         */
        val metadata: HistogramRecord.Metadata?

        /**
         * <pre>
         * Used for |record_type| == USER_ACTION only.
        </pre> *
         *
         * `int64 elapsed_realtime_millis = 8;`
         * @return The elapsedRealtimeMillis.
         */
        val elapsedRealtimeMillis: Long
    }

    /**
     * <pre>
     * WebView uses HistogramRecord to serialize a histogram record that
     * MetricsBridgeService receives to a file and retrieve it back. These
     * histogram records are recorded in non-embedded WebView processes.
     * Next tag: 9
    </pre> *
     *
     * Protobuf type `org.chromium.android_webview.proto.HistogramRecord`
     */
    class HistogramRecord private constructor() :
        GeneratedMessageLite<HistogramRecord?, HistogramRecord.Builder?>(),
        HistogramRecordOrBuilder {
        /**
         * <pre>
         * Next tag: 5
        </pre> *
         *
         * Protobuf enum `org.chromium.android_webview.proto.HistogramRecord.RecordType`
         */
        enum class RecordType // @@protoc_insertion_point(enum_scope:org.chromium.android_webview.proto.HistogramRecord.RecordType)
            (private val value: Int) : Internal.EnumLite {
            /**
             * `HISTOGRAM_BOOLEAN = 0;`
             */
            HISTOGRAM_BOOLEAN(0),

            /**
             * `HISTOGRAM_EXPONENTIAL = 1;`
             */
            HISTOGRAM_EXPONENTIAL(1),

            /**
             * `HISTOGRAM_LINEAR = 2;`
             */
            HISTOGRAM_LINEAR(2),

            /**
             * `HISTOGRAM_SPARSE = 3;`
             */
            HISTOGRAM_SPARSE(3),

            /**
             * `USER_ACTION = 4;`
             */
            USER_ACTION(4), UNRECOGNIZED(-1);

            override fun getNumber(): Int {
                require(this != UNRECOGNIZED) { "Can't get the number of an unknown enum value." }
                return value
            }

            companion object {

                /**
                 * @param value The number of the enum to look for.
                 * @return The enum associated with the given number.
                 */
                @Deprecated(
                    "Use {@link #forNumber(int)} instead.", ReplaceWith(
                        "forNumber(value)",
                        "org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.RecordType.Companion.forNumber"
                    )
                )
                fun valueOf(value: Int): RecordType? {
                    return forNumber(value)
                }

                fun forNumber(value: Int): RecordType? {
                    return when (value) {
                        0 -> HISTOGRAM_BOOLEAN
                        1 -> HISTOGRAM_EXPONENTIAL
                        2 -> HISTOGRAM_LINEAR
                        3 -> HISTOGRAM_SPARSE
                        4 -> USER_ACTION
                        else -> null
                    }
                }

            }
        }

        interface MetadataOrBuilder : MessageLiteOrBuilder {
            /**
             * <pre>
             * The time in millis when the histogram is received by the
             * AwNonEmbeddedUmaRecorder
            </pre> *
             *
             * `int64 time_recorded = 1;`
             * @return The timeRecorded.
             */
            val timeRecorded: Long
        }

        /**
         * <pre>
         * Metadata for the histogram record.
         * Next tag: 2
        </pre> *
         *
         * Protobuf type `org.chromium.android_webview.proto.HistogramRecord.Metadata`
         */
        class Metadata private constructor() : GeneratedMessageLite<Metadata?, Metadata.Builder?>(),
            MetadataOrBuilder {
            /**
             * <pre>
             * The time in millis when the histogram is received by the
             * AwNonEmbeddedUmaRecorder
            </pre> *
             *
             * `int64 time_recorded = 1;`
             * @return The timeRecorded.
             */
            /**
             * <pre>
             * The time in millis when the histogram is received by the
             * AwNonEmbeddedUmaRecorder
            </pre> *
             *
             * `int64 time_recorded = 1;`
             * @param value The timeRecorded to set.
             */
            override var timeRecorded: Long = 0
                /**
                 * <pre>
                 * The time in millis when the histogram is received by the
                 * AwNonEmbeddedUmaRecorder
                </pre> *
                 *
                 * `int64 time_recorded = 1;`
                 * @param value The timeRecorded to set.
                 */
                private set

            /**
             * <pre>
             * Metadata for the histogram record.
             * Next tag: 2
            </pre> *
             *
             * Protobuf type `org.chromium.android_webview.proto.HistogramRecord.Metadata`
             */
            class Builder  // Construct using org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.Metadata.newBuilder()
                : GeneratedMessageLite.Builder<Metadata?, Builder?>(defaultInstance),
                MetadataOrBuilder {
                /**
                 * <pre>
                 * The time in millis when the histogram is received by the
                 * AwNonEmbeddedUmaRecorder
                </pre> *
                 *
                 * `int64 time_recorded = 1;`
                 * @return The timeRecorded.
                 */
                override val timeRecorded: Long
                    get() = instance!!.timeRecorded

            }

            override fun dynamicMethod(
                method: MethodToInvoke, arg0: Any, arg1: Any
            ): Any? {
                return when (method) {
                    MethodToInvoke.NEW_MUTABLE_INSTANCE -> {
                        Metadata()
                    }

                    MethodToInvoke.NEW_BUILDER -> {
                        Builder()
                    }

                    MethodToInvoke.BUILD_MESSAGE_INFO -> {
                        val objects = arrayOf<Any>(
                            "timeRecorded_"
                        )
                        val info =
                            "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u0002"
                        newMessageInfo(defaultInstance, info, objects)
                    }

                    MethodToInvoke.GET_DEFAULT_INSTANCE -> {
                        defaultInstance!!
                    }

                    MethodToInvoke.GET_PARSER -> {
                        var parser = PARSER
                        if (parser == null) {
                            synchronized(Metadata::class.java) {
                                parser = PARSER
                                if (parser == null) {
                                    parser = DefaultInstanceBasedParser(
                                        defaultInstance
                                    )
                                    PARSER = parser
                                }
                            }
                        }
                        parser!!
                    }

                    MethodToInvoke.GET_MEMOIZED_IS_INITIALIZED -> {
                        1.toByte()
                    }

                    MethodToInvoke.SET_MEMOIZED_IS_INITIALIZED -> {
                        null
                    }

                    else -> {
                        throw UnsupportedOperationException()
                    }
                }
            }

            companion object {

                // @@protoc_insertion_point(class_scope:org.chromium.android_webview.proto.HistogramRecord.Metadata)
                var defaultInstance: Metadata? = null

                init {
                    val defaultInstance = Metadata()
                    // New instances are implicitly immutable so no need to make
                    // immutable.
                    Companion.defaultInstance = defaultInstance
                    registerDefaultInstance(
                        Metadata::class.java, defaultInstance
                    )
                }

                @Volatile
                private var PARSER: Parser<Metadata?>? = null
            }
        }
        /**
         * `.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;`
         * @return The enum numeric value on the wire for recordType.
         */
        /**
         * `.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;`
         * @param value The enum numeric value on the wire for recordType to set.
         */
        override var recordTypeValue = 0
            /**
             * `.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;`
             * @param value The enum numeric value on the wire for recordType to set.
             */
            private set
        override val recordType: RecordType
            /**
             * `.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;`
             * @return The recordType.
             */
            get() {
                val result = RecordType.forNumber(recordTypeValue)
                return result ?: RecordType.UNRECOGNIZED
            }

        private var histogramName_ = ""
        override var histogramName: String
            /**
             * <pre>
             * The name of the histogram
            </pre> *
             *
             * `string histogram_name = 2;`
             * @return The histogramName.
             */
            get() = histogramName_
            /**
             * <pre>
             * The name of the histogram
            </pre> *
             *
             * `string histogram_name = 2;`
             * @param value The histogramName to set.
             */
            private set(value) {
                value.javaClass
                histogramName_ = value
            }
        override val histogramNameBytes: ByteString?
            /**
             * <pre>
             * The name of the histogram
            </pre> *
             *
             * `string histogram_name = 2;`
             * @return The bytes for histogramName.
             */
            get() = ByteString.copyFromUtf8(histogramName_)

        /**
         * <pre>
         * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
         * and 1 for true.
        </pre> *
         *
         * `int32 sample = 3;`
         * @return The sample.
         */
        /**
         * <pre>
         * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
         * and 1 for true.
        </pre> *
         *
         * `int32 sample = 3;`
         * @param value The sample to set.
         */
        override var sample = 0
            /**
             * <pre>
             * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
             * and 1 for true.
            </pre> *
             *
             * `int32 sample = 3;`
             * @param value The sample to set.
             */
            private set

        /**
         * <pre>
         * the smallest value recorded in the first bucket; should be greater than
         * zero.
        </pre> *
         *
         * `int32 min = 4;`
         * @return The min.
         */
        /**
         * <pre>
         * the smallest value recorded in the first bucket; should be greater than
         * zero.
        </pre> *
         *
         * `int32 min = 4;`
         * @param value The min to set.
         */
        override var min = 0
            /**
             * <pre>
             * the smallest value recorded in the first bucket; should be greater than
             * zero.
            </pre> *
             *
             * `int32 min = 4;`
             * @param value The min to set.
             */
            private set

        /**
         * <pre>
         * the smallest value recorded in the overflow bucket.
        </pre> *
         *
         * `int32 max = 5;`
         * @return The max.
         */
        /**
         * <pre>
         * the smallest value recorded in the overflow bucket.
        </pre> *
         *
         * `int32 max = 5;`
         * @param value The max to set.
         */
        override var max = 0
            /**
             * <pre>
             * the smallest value recorded in the overflow bucket.
            </pre> *
             *
             * `int32 max = 5;`
             * @param value The max to set.
             */
            private set

        /**
         * <pre>
         * number of histogram buckets: Two buckets are used for underflow and
         * overflow, and the remaining buckets cover the range [min, max);
         * numBuckets should be 100 or less.
        </pre> *
         *
         * `int32 num_buckets = 6;`
         * @return The numBuckets.
         */
        /**
         * <pre>
         * number of histogram buckets: Two buckets are used for underflow and
         * overflow, and the remaining buckets cover the range [min, max);
         * numBuckets should be 100 or less.
        </pre> *
         *
         * `int32 num_buckets = 6;`
         * @param value The numBuckets to set.
         */
        override var numBuckets = 0
            /**
             * <pre>
             * number of histogram buckets: Two buckets are used for underflow and
             * overflow, and the remaining buckets cover the range [min, max);
             * numBuckets should be 100 or less.
            </pre> *
             *
             * `int32 num_buckets = 6;`
             * @param value The numBuckets to set.
             */
            private set

        private var metadata_: Metadata? = null

        /**
         * `.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;`
         */
        override fun hasMetadata(): Boolean {
            return metadata_ != null
        }

        override var metadata: Metadata?
            /**
             * `.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;`
             */
            get() = if (metadata_ == null) Metadata.defaultInstance else metadata_
            /**
             * `.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;`
             */
            private set(value) {
                value!!.javaClass
                metadata_ = value
            }

        /**
         * <pre>
         * Used for |record_type| == USER_ACTION only.
        </pre> *
         *
         * `int64 elapsed_realtime_millis = 8;`
         * @return The elapsedRealtimeMillis.
         */
        /**
         * <pre>
         * Used for |record_type| == USER_ACTION only.
        </pre> *
         *
         * `int64 elapsed_realtime_millis = 8;`
         * @param value The elapsedRealtimeMillis to set.
         */
        override var elapsedRealtimeMillis: Long = 0
            /**
             * <pre>
             * Used for |record_type| == USER_ACTION only.
            </pre> *
             *
             * `int64 elapsed_realtime_millis = 8;`
             * @param value The elapsedRealtimeMillis to set.
             */
            private set

        /**
         * <pre>
         * WebView uses HistogramRecord to serialize a histogram record that
         * MetricsBridgeService receives to a file and retrieve it back. These
         * histogram records are recorded in non-embedded WebView processes.
         * Next tag: 9
        </pre> *
         *
         * Protobuf type `org.chromium.android_webview.proto.HistogramRecord`
         */
        class Builder  // Construct using org.chromium.android_webview.proto.MetricsBridgeRecords.HistogramRecord.newBuilder()
            : GeneratedMessageLite.Builder<HistogramRecord?, Builder?>(defaultInstance),
            HistogramRecordOrBuilder {
            /**
             * `.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;`
             * @return The enum numeric value on the wire for recordType.
             */
            override val recordTypeValue: Int
                get() = instance!!.recordTypeValue

            /**
             * `.org.chromium.android_webview.proto.HistogramRecord.RecordType record_type = 1;`
             * @return The recordType.
             */
            override val recordType: RecordType
                get() = instance!!.recordType

            /**
             * <pre>
             * The name of the histogram
            </pre> *
             *
             * `string histogram_name = 2;`
             * @return The histogramName.
             */
            override val histogramName: String
                get() = instance!!.histogramName

            /**
             * <pre>
             * The name of the histogram
            </pre> *
             *
             * `string histogram_name = 2;`
             * @return The bytes for histogramName.
             */
            override val histogramNameBytes: ByteString?
                get() = instance!!.histogramNameBytes

            /**
             * <pre>
             * The sample to be recorded, for HISTOGRAM_BOOLEAN it's either 0 for false
             * and 1 for true.
            </pre> *
             *
             * `int32 sample = 3;`
             * @return The sample.
             */
            override val sample: Int
                get() = instance!!.sample

            /**
             * <pre>
             * the smallest value recorded in the first bucket; should be greater than
             * zero.
            </pre> *
             *
             * `int32 min = 4;`
             * @return The min.
             */
            override val min: Int
                get() = instance!!.min

            /**
             * <pre>
             * the smallest value recorded in the overflow bucket.
            </pre> *
             *
             * `int32 max = 5;`
             * @return The max.
             */
            override val max: Int
                get() = instance!!.max

            /**
             * <pre>
             * number of histogram buckets: Two buckets are used for underflow and
             * overflow, and the remaining buckets cover the range [min, max);
             * numBuckets should be 100 or less.
            </pre> *
             *
             * `int32 num_buckets = 6;`
             * @return The numBuckets.
             */
            override val numBuckets: Int
                get() = instance!!.numBuckets

            /**
             * `.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;`
             */
            override fun hasMetadata(): Boolean {
                return instance!!.hasMetadata()
            }

            /**
             * `.org.chromium.android_webview.proto.HistogramRecord.Metadata metadata = 7;`
             */
            override val metadata: Metadata?
                get() = instance!!.metadata

            /**
             * <pre>
             * Used for |record_type| == USER_ACTION only.
            </pre> *
             *
             * `int64 elapsed_realtime_millis = 8;`
             * @return The elapsedRealtimeMillis.
             */
            override val elapsedRealtimeMillis: Long
                get() = instance!!.elapsedRealtimeMillis

        }

        override fun dynamicMethod(
            method: MethodToInvoke, arg0: Any, arg1: Any
        ): Any? {
            return when (method) {
                MethodToInvoke.NEW_MUTABLE_INSTANCE -> {
                    HistogramRecord()
                }

                MethodToInvoke.NEW_BUILDER -> {
                    Builder()
                }

                MethodToInvoke.BUILD_MESSAGE_INFO -> {
                    val objects = arrayOf<Any>(
                        "recordType_",
                        "histogramName_",
                        "sample_",
                        "min_",
                        "max_",
                        "numBuckets_",
                        "metadata_",
                        "elapsedRealtimeMillis_"
                    )
                    val info =
                        "\u0000\b\u0000\u0000\u0001\b\b\u0000\u0000\u0000\u0001\u000c\u0002\u0208\u0003\u0004" + "\u0004\u0004\u0005\u0004\u0006\u0004\u0007\t\b\u0002"
                    newMessageInfo(defaultInstance, info, objects)
                }

                MethodToInvoke.GET_DEFAULT_INSTANCE -> {
                    defaultInstance!!
                }

                MethodToInvoke.GET_PARSER -> {
                    var parser = PARSER
                    if (parser == null) {
                        synchronized(HistogramRecord::class.java) {
                            parser = PARSER
                            if (parser == null) {
                                parser = DefaultInstanceBasedParser(
                                    defaultInstance
                                )
                                PARSER = parser
                            }
                        }
                    }
                    parser!!
                }

                MethodToInvoke.GET_MEMOIZED_IS_INITIALIZED -> {
                    1.toByte()
                }

                MethodToInvoke.SET_MEMOIZED_IS_INITIALIZED -> {
                    null
                }

                else -> {
                    throw UnsupportedOperationException()
                }
            }
        }

        companion object {

            @JvmStatic
            @Throws(InvalidProtocolBufferException::class)
            fun parseFrom(data: ByteArray?): HistogramRecord? {
                return parseFrom(
                    defaultInstance, data
                )
            }

            // @@protoc_insertion_point(class_scope:org.chromium.android_webview.proto.HistogramRecord)
            var defaultInstance: HistogramRecord? = null

            init {
                val defaultInstance = HistogramRecord()
                // New instances are implicitly immutable so no need to make
                // immutable.
                Companion.defaultInstance = defaultInstance
                registerDefaultInstance(
                    HistogramRecord::class.java, defaultInstance
                )
            }

            @Volatile
            private var PARSER: Parser<HistogramRecord?>? = null
        }
    }
}