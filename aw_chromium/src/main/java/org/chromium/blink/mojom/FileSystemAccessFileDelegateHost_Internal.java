// FileSystemAccessFileDelegateHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/file_system_access/file_system_access_file_delegate_host.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;


class FileSystemAccessFileDelegateHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<FileSystemAccessFileDelegateHost, FileSystemAccessFileDelegateHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<FileSystemAccessFileDelegateHost, FileSystemAccessFileDelegateHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.FileSystemAccessFileDelegateHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, FileSystemAccessFileDelegateHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public FileSystemAccessFileDelegateHost[] buildArray(int size) {
          return new FileSystemAccessFileDelegateHost[size];
        }
    };


    private static final int READ_ORDINAL = 0;

    private static final int WRITE_ORDINAL = 1;

    private static final int GET_LENGTH_ORDINAL = 2;

    private static final int SET_LENGTH_ORDINAL = 3;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements FileSystemAccessFileDelegateHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void read(
long offset, int bytesToRead, 
Read_Response callback) {

            FileSystemAccessFileDelegateHostReadParams _message = new FileSystemAccessFileDelegateHostReadParams();

            _message.offset = offset;

            _message.bytesToRead = bytesToRead;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    READ_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new FileSystemAccessFileDelegateHostReadResponseParamsForwardToCallback(callback));

        }


        @Override
        public void write(
long offset, org.chromium.mojo.system.DataPipe.ConsumerHandle data, 
Write_Response callback) {

            FileSystemAccessFileDelegateHostWriteParams _message = new FileSystemAccessFileDelegateHostWriteParams();

            _message.offset = offset;

            _message.data = data;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    WRITE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new FileSystemAccessFileDelegateHostWriteResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getLength(

GetLength_Response callback) {

            FileSystemAccessFileDelegateHostGetLengthParams _message = new FileSystemAccessFileDelegateHostGetLengthParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_LENGTH_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new FileSystemAccessFileDelegateHostGetLengthResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setLength(
long length, 
SetLength_Response callback) {

            FileSystemAccessFileDelegateHostSetLengthParams _message = new FileSystemAccessFileDelegateHostSetLengthParams();

            _message.length = length;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SET_LENGTH_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new FileSystemAccessFileDelegateHostSetLengthResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<FileSystemAccessFileDelegateHost> {

        Stub(org.chromium.mojo.system.Core core, FileSystemAccessFileDelegateHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                FileSystemAccessFileDelegateHost_Internal.MANAGER, messageWithHeader);










                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), FileSystemAccessFileDelegateHost_Internal.MANAGER, messageWithHeader, receiver);







                    case READ_ORDINAL: {

                        FileSystemAccessFileDelegateHostReadParams data =
                                FileSystemAccessFileDelegateHostReadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().read(data.offset, data.bytesToRead, new FileSystemAccessFileDelegateHostReadResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case WRITE_ORDINAL: {

                        FileSystemAccessFileDelegateHostWriteParams data =
                                FileSystemAccessFileDelegateHostWriteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().write(data.offset, data.data, new FileSystemAccessFileDelegateHostWriteResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case GET_LENGTH_ORDINAL: {

                        FileSystemAccessFileDelegateHostGetLengthParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getLength(new FileSystemAccessFileDelegateHostGetLengthResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case SET_LENGTH_ORDINAL: {

                        FileSystemAccessFileDelegateHostSetLengthParams data =
                                FileSystemAccessFileDelegateHostSetLengthParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setLength(data.length, new FileSystemAccessFileDelegateHostSetLengthResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class FileSystemAccessFileDelegateHostReadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long offset;
        public int bytesToRead;

        private FileSystemAccessFileDelegateHostReadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FileSystemAccessFileDelegateHostReadParams() {
            this(0);
        }

        public static FileSystemAccessFileDelegateHostReadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FileSystemAccessFileDelegateHostReadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FileSystemAccessFileDelegateHostReadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FileSystemAccessFileDelegateHostReadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FileSystemAccessFileDelegateHostReadParams(elementsOrVersion);
                    {
                        
                    result.offset = decoder0.readLong(8);
                    }
                    {
                        
                    result.bytesToRead = decoder0.readInt(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.offset, 8);
            
            encoder0.encode(this.bytesToRead, 16);
        }
    }



    
    static final class FileSystemAccessFileDelegateHostReadResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.BigBuffer data;
        public int error;
        public int bytesRead;

        private FileSystemAccessFileDelegateHostReadResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FileSystemAccessFileDelegateHostReadResponseParams() {
            this(0);
        }

        public static FileSystemAccessFileDelegateHostReadResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FileSystemAccessFileDelegateHostReadResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FileSystemAccessFileDelegateHostReadResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FileSystemAccessFileDelegateHostReadResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FileSystemAccessFileDelegateHostReadResponseParams(elementsOrVersion);
                    {
                        
                    result.data = org.chromium.mojo_base.mojom.BigBuffer.decode(decoder0, 8);
                    }
                    {
                        
                    result.error = decoder0.readInt(24);
                        org.chromium.mojo_base.mojom.FileError.validate(result.error);
                        result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
                    }
                    {
                        
                    result.bytesRead = decoder0.readInt(28);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.data, 8, true);
            
            encoder0.encode(this.error, 24);
            
            encoder0.encode(this.bytesRead, 28);
        }
    }

    static class FileSystemAccessFileDelegateHostReadResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final FileSystemAccessFileDelegateHost.Read_Response mCallback;

        FileSystemAccessFileDelegateHostReadResponseParamsForwardToCallback(FileSystemAccessFileDelegateHost.Read_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(READ_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                FileSystemAccessFileDelegateHostReadResponseParams response = FileSystemAccessFileDelegateHostReadResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.data, response.error, response.bytesRead);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class FileSystemAccessFileDelegateHostReadResponseParamsProxyToResponder implements FileSystemAccessFileDelegateHost.Read_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        FileSystemAccessFileDelegateHostReadResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.mojo_base.mojom.BigBuffer data, Integer error, Integer bytesRead) {
            FileSystemAccessFileDelegateHostReadResponseParams _response = new FileSystemAccessFileDelegateHostReadResponseParams();

            _response.data = data;

            _response.error = error;

            _response.bytesRead = bytesRead;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    READ_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class FileSystemAccessFileDelegateHostWriteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long offset;
        public org.chromium.mojo.system.DataPipe.ConsumerHandle data;

        private FileSystemAccessFileDelegateHostWriteParams(int version) {
            super(STRUCT_SIZE, version);
            this.data = org.chromium.mojo.system.InvalidHandle.INSTANCE;
        }

        public FileSystemAccessFileDelegateHostWriteParams() {
            this(0);
        }

        public static FileSystemAccessFileDelegateHostWriteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FileSystemAccessFileDelegateHostWriteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FileSystemAccessFileDelegateHostWriteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FileSystemAccessFileDelegateHostWriteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FileSystemAccessFileDelegateHostWriteParams(elementsOrVersion);
                    {
                        
                    result.offset = decoder0.readLong(8);
                    }
                    {
                        
                    result.data = decoder0.readConsumerHandle(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.offset, 8);
            
            encoder0.encode(this.data, 16, false);
        }
    }



    
    static final class FileSystemAccessFileDelegateHostWriteResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int error;
        public int bytesWritten;

        private FileSystemAccessFileDelegateHostWriteResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FileSystemAccessFileDelegateHostWriteResponseParams() {
            this(0);
        }

        public static FileSystemAccessFileDelegateHostWriteResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FileSystemAccessFileDelegateHostWriteResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FileSystemAccessFileDelegateHostWriteResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FileSystemAccessFileDelegateHostWriteResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FileSystemAccessFileDelegateHostWriteResponseParams(elementsOrVersion);
                    {
                        
                    result.error = decoder0.readInt(8);
                        org.chromium.mojo_base.mojom.FileError.validate(result.error);
                        result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
                    }
                    {
                        
                    result.bytesWritten = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.error, 8);
            
            encoder0.encode(this.bytesWritten, 12);
        }
    }

    static class FileSystemAccessFileDelegateHostWriteResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final FileSystemAccessFileDelegateHost.Write_Response mCallback;

        FileSystemAccessFileDelegateHostWriteResponseParamsForwardToCallback(FileSystemAccessFileDelegateHost.Write_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(WRITE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                FileSystemAccessFileDelegateHostWriteResponseParams response = FileSystemAccessFileDelegateHostWriteResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.error, response.bytesWritten);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class FileSystemAccessFileDelegateHostWriteResponseParamsProxyToResponder implements FileSystemAccessFileDelegateHost.Write_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        FileSystemAccessFileDelegateHostWriteResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer error, Integer bytesWritten) {
            FileSystemAccessFileDelegateHostWriteResponseParams _response = new FileSystemAccessFileDelegateHostWriteResponseParams();

            _response.error = error;

            _response.bytesWritten = bytesWritten;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    WRITE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class FileSystemAccessFileDelegateHostGetLengthParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FileSystemAccessFileDelegateHostGetLengthParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FileSystemAccessFileDelegateHostGetLengthParams() {
            this(0);
        }

        public static FileSystemAccessFileDelegateHostGetLengthParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FileSystemAccessFileDelegateHostGetLengthParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FileSystemAccessFileDelegateHostGetLengthParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FileSystemAccessFileDelegateHostGetLengthParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FileSystemAccessFileDelegateHostGetLengthParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FileSystemAccessFileDelegateHostGetLengthResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int error;
        public long length;

        private FileSystemAccessFileDelegateHostGetLengthResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FileSystemAccessFileDelegateHostGetLengthResponseParams() {
            this(0);
        }

        public static FileSystemAccessFileDelegateHostGetLengthResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FileSystemAccessFileDelegateHostGetLengthResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FileSystemAccessFileDelegateHostGetLengthResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FileSystemAccessFileDelegateHostGetLengthResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FileSystemAccessFileDelegateHostGetLengthResponseParams(elementsOrVersion);
                    {
                        
                    result.error = decoder0.readInt(8);
                        org.chromium.mojo_base.mojom.FileError.validate(result.error);
                        result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
                    }
                    {
                        
                    result.length = decoder0.readLong(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.error, 8);
            
            encoder0.encode(this.length, 16);
        }
    }

    static class FileSystemAccessFileDelegateHostGetLengthResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final FileSystemAccessFileDelegateHost.GetLength_Response mCallback;

        FileSystemAccessFileDelegateHostGetLengthResponseParamsForwardToCallback(FileSystemAccessFileDelegateHost.GetLength_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_LENGTH_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                FileSystemAccessFileDelegateHostGetLengthResponseParams response = FileSystemAccessFileDelegateHostGetLengthResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.error, response.length);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class FileSystemAccessFileDelegateHostGetLengthResponseParamsProxyToResponder implements FileSystemAccessFileDelegateHost.GetLength_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        FileSystemAccessFileDelegateHostGetLengthResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer error, Long length) {
            FileSystemAccessFileDelegateHostGetLengthResponseParams _response = new FileSystemAccessFileDelegateHostGetLengthResponseParams();

            _response.error = error;

            _response.length = length;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_LENGTH_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class FileSystemAccessFileDelegateHostSetLengthParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long length;

        private FileSystemAccessFileDelegateHostSetLengthParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FileSystemAccessFileDelegateHostSetLengthParams() {
            this(0);
        }

        public static FileSystemAccessFileDelegateHostSetLengthParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FileSystemAccessFileDelegateHostSetLengthParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FileSystemAccessFileDelegateHostSetLengthParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FileSystemAccessFileDelegateHostSetLengthParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FileSystemAccessFileDelegateHostSetLengthParams(elementsOrVersion);
                    {
                        
                    result.length = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.length, 8);
        }
    }



    
    static final class FileSystemAccessFileDelegateHostSetLengthResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int error;

        private FileSystemAccessFileDelegateHostSetLengthResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FileSystemAccessFileDelegateHostSetLengthResponseParams() {
            this(0);
        }

        public static FileSystemAccessFileDelegateHostSetLengthResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FileSystemAccessFileDelegateHostSetLengthResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FileSystemAccessFileDelegateHostSetLengthResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FileSystemAccessFileDelegateHostSetLengthResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FileSystemAccessFileDelegateHostSetLengthResponseParams(elementsOrVersion);
                    {
                        
                    result.error = decoder0.readInt(8);
                        org.chromium.mojo_base.mojom.FileError.validate(result.error);
                        result.error = org.chromium.mojo_base.mojom.FileError.toKnownValue(result.error);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.error, 8);
        }
    }

    static class FileSystemAccessFileDelegateHostSetLengthResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final FileSystemAccessFileDelegateHost.SetLength_Response mCallback;

        FileSystemAccessFileDelegateHostSetLengthResponseParamsForwardToCallback(FileSystemAccessFileDelegateHost.SetLength_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SET_LENGTH_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                FileSystemAccessFileDelegateHostSetLengthResponseParams response = FileSystemAccessFileDelegateHostSetLengthResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.error);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class FileSystemAccessFileDelegateHostSetLengthResponseParamsProxyToResponder implements FileSystemAccessFileDelegateHost.SetLength_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        FileSystemAccessFileDelegateHostSetLengthResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer error) {
            FileSystemAccessFileDelegateHostSetLengthResponseParams _response = new FileSystemAccessFileDelegateHostSetLengthResponseParams();

            _response.error = error;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SET_LENGTH_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
