// VideoCaptureObserver_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/capture/mojom/video_capture.mojom
//

package org.chromium.media.mojom;

import androidx.annotation.IntDef;


class VideoCaptureObserver_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<VideoCaptureObserver, VideoCaptureObserver.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<VideoCaptureObserver, VideoCaptureObserver.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.VideoCaptureObserver";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, VideoCaptureObserver impl) {
            return new Stub(core, impl);
        }

        @Override
        public VideoCaptureObserver[] buildArray(int size) {
          return new VideoCaptureObserver[size];
        }
    };


    private static final int ON_STATE_CHANGED_ORDINAL = 0;

    private static final int ON_NEW_BUFFER_ORDINAL = 1;

    private static final int ON_BUFFER_READY_ORDINAL = 2;

    private static final int ON_BUFFER_DESTROYED_ORDINAL = 3;

    private static final int ON_FRAME_DROPPED_ORDINAL = 4;

    private static final int ON_NEW_CROP_VERSION_ORDINAL = 5;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements VideoCaptureObserver.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onStateChanged(
VideoCaptureResult result) {

            VideoCaptureObserverOnStateChangedParams _message = new VideoCaptureObserverOnStateChangedParams();

            _message.result = result;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void onNewBuffer(
int bufferId, VideoBufferHandle bufferHandle) {

            VideoCaptureObserverOnNewBufferParams _message = new VideoCaptureObserverOnNewBufferParams();

            _message.bufferId = bufferId;

            _message.bufferHandle = bufferHandle;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_NEW_BUFFER_ORDINAL)));

        }


        @Override
        public void onBufferReady(
ReadyBuffer buffer) {

            VideoCaptureObserverOnBufferReadyParams _message = new VideoCaptureObserverOnBufferReadyParams();

            _message.buffer = buffer;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_BUFFER_READY_ORDINAL)));

        }


        @Override
        public void onBufferDestroyed(
int bufferId) {

            VideoCaptureObserverOnBufferDestroyedParams _message = new VideoCaptureObserverOnBufferDestroyedParams();

            _message.bufferId = bufferId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_BUFFER_DESTROYED_ORDINAL)));

        }


        @Override
        public void onFrameDropped(
int reason) {

            VideoCaptureObserverOnFrameDroppedParams _message = new VideoCaptureObserverOnFrameDroppedParams();

            _message.reason = reason;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_FRAME_DROPPED_ORDINAL)));

        }


        @Override
        public void onNewCropVersion(
int cropVersion) {

            VideoCaptureObserverOnNewCropVersionParams _message = new VideoCaptureObserverOnNewCropVersionParams();

            _message.cropVersion = cropVersion;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_NEW_CROP_VERSION_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<VideoCaptureObserver> {

        Stub(org.chromium.mojo.system.Core core, VideoCaptureObserver impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                VideoCaptureObserver_Internal.MANAGER, messageWithHeader);





                    case ON_STATE_CHANGED_ORDINAL: {

                        VideoCaptureObserverOnStateChangedParams data =
                                VideoCaptureObserverOnStateChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onStateChanged(data.result);
                        return true;
                    }





                    case ON_NEW_BUFFER_ORDINAL: {

                        VideoCaptureObserverOnNewBufferParams data =
                                VideoCaptureObserverOnNewBufferParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onNewBuffer(data.bufferId, data.bufferHandle);
                        return true;
                    }





                    case ON_BUFFER_READY_ORDINAL: {

                        VideoCaptureObserverOnBufferReadyParams data =
                                VideoCaptureObserverOnBufferReadyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onBufferReady(data.buffer);
                        return true;
                    }





                    case ON_BUFFER_DESTROYED_ORDINAL: {

                        VideoCaptureObserverOnBufferDestroyedParams data =
                                VideoCaptureObserverOnBufferDestroyedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onBufferDestroyed(data.bufferId);
                        return true;
                    }





                    case ON_FRAME_DROPPED_ORDINAL: {

                        VideoCaptureObserverOnFrameDroppedParams data =
                                VideoCaptureObserverOnFrameDroppedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onFrameDropped(data.reason);
                        return true;
                    }





                    case ON_NEW_CROP_VERSION_ORDINAL: {

                        VideoCaptureObserverOnNewCropVersionParams data =
                                VideoCaptureObserverOnNewCropVersionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onNewCropVersion(data.cropVersion);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), VideoCaptureObserver_Internal.MANAGER, messageWithHeader, receiver);














                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class VideoCaptureObserverOnStateChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public VideoCaptureResult result;

        private VideoCaptureObserverOnStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoCaptureObserverOnStateChangedParams() {
            this(0);
        }

        public static VideoCaptureObserverOnStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoCaptureObserverOnStateChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoCaptureObserverOnStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoCaptureObserverOnStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoCaptureObserverOnStateChangedParams(elementsOrVersion);
                    {
                        
                    result.result = VideoCaptureResult.decode(decoder0, 8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
        }
    }



    
    static final class VideoCaptureObserverOnNewBufferParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int bufferId;
        public VideoBufferHandle bufferHandle;

        private VideoCaptureObserverOnNewBufferParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoCaptureObserverOnNewBufferParams() {
            this(0);
        }

        public static VideoCaptureObserverOnNewBufferParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoCaptureObserverOnNewBufferParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoCaptureObserverOnNewBufferParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoCaptureObserverOnNewBufferParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoCaptureObserverOnNewBufferParams(elementsOrVersion);
                    {
                        
                    result.bufferId = decoder0.readInt(8);
                    }
                    {
                        
                    result.bufferHandle = VideoBufferHandle.decode(decoder0, 16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bufferId, 8);
            
            encoder0.encode(this.bufferHandle, 16, false);
        }
    }



    
    static final class VideoCaptureObserverOnBufferReadyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ReadyBuffer buffer;

        private VideoCaptureObserverOnBufferReadyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoCaptureObserverOnBufferReadyParams() {
            this(0);
        }

        public static VideoCaptureObserverOnBufferReadyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoCaptureObserverOnBufferReadyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoCaptureObserverOnBufferReadyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoCaptureObserverOnBufferReadyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoCaptureObserverOnBufferReadyParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.buffer = ReadyBuffer.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.buffer, 8, false);
        }
    }



    
    static final class VideoCaptureObserverOnBufferDestroyedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int bufferId;

        private VideoCaptureObserverOnBufferDestroyedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoCaptureObserverOnBufferDestroyedParams() {
            this(0);
        }

        public static VideoCaptureObserverOnBufferDestroyedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoCaptureObserverOnBufferDestroyedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoCaptureObserverOnBufferDestroyedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoCaptureObserverOnBufferDestroyedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoCaptureObserverOnBufferDestroyedParams(elementsOrVersion);
                    {
                        
                    result.bufferId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bufferId, 8);
        }
    }



    
    static final class VideoCaptureObserverOnFrameDroppedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int reason;

        private VideoCaptureObserverOnFrameDroppedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoCaptureObserverOnFrameDroppedParams() {
            this(0);
        }

        public static VideoCaptureObserverOnFrameDroppedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoCaptureObserverOnFrameDroppedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoCaptureObserverOnFrameDroppedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoCaptureObserverOnFrameDroppedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoCaptureObserverOnFrameDroppedParams(elementsOrVersion);
                    {
                        
                    result.reason = decoder0.readInt(8);
                        VideoCaptureFrameDropReason.validate(result.reason);
                        result.reason = VideoCaptureFrameDropReason.toKnownValue(result.reason);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.reason, 8);
        }
    }



    
    static final class VideoCaptureObserverOnNewCropVersionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int cropVersion;

        private VideoCaptureObserverOnNewCropVersionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoCaptureObserverOnNewCropVersionParams() {
            this(0);
        }

        public static VideoCaptureObserverOnNewCropVersionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoCaptureObserverOnNewCropVersionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoCaptureObserverOnNewCropVersionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoCaptureObserverOnNewCropVersionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoCaptureObserverOnNewCropVersionParams(elementsOrVersion);
                    {
                        
                    result.cropVersion = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.cropVersion, 8);
        }
    }



}
