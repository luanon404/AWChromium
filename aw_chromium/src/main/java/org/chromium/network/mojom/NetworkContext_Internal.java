// NetworkContext_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_context.mojom
//

package org.chromium.network.mojom;

class NetworkContext_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<NetworkContext, NetworkContext.Proxy> MANAGER = new org.chromium.mojo.bindings.Interface.Manager<NetworkContext, NetworkContext.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.NetworkContext";
        }

        @Override
        public int getVersion() {
            return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, NetworkContext impl) {
            return new Stub(core, impl);
        }

        @Override
        public NetworkContext[] buildArray(int size) {
            return new NetworkContext[size];
        }
    };


    private static final int SET_CLIENT_ORDINAL = 0;

    private static final int CREATE_URL_LOADER_FACTORY_ORDINAL = 1;

    private static final int RESET_URL_LOADER_FACTORIES_ORDINAL = 2;

    private static final int GET_VIA_OBLIVIOUS_HTTP_ORDINAL = 3;

    private static final int GET_COOKIE_MANAGER_ORDINAL = 4;

    private static final int GET_RESTRICTED_COOKIE_MANAGER_ORDINAL = 5;

    private static final int GET_TRUST_TOKEN_QUERY_ANSWERER_ORDINAL = 6;

    private static final int CLEAR_TRUST_TOKEN_DATA_ORDINAL = 7;

    private static final int CLEAR_TRUST_TOKEN_SESSION_ONLY_DATA_ORDINAL = 8;

    private static final int GET_STORED_TRUST_TOKEN_COUNTS_ORDINAL = 9;

    private static final int DELETE_STORED_TRUST_TOKENS_ORDINAL = 10;

    private static final int SET_BLOCK_TRUST_TOKENS_ORDINAL = 11;

    private static final int CLEAR_NETWORKING_HISTORY_BETWEEN_ORDINAL = 12;

    private static final int CLEAR_HTTP_CACHE_ORDINAL = 13;

    private static final int COMPUTE_HTTP_CACHE_SIZE_ORDINAL = 14;

    private static final int NOTIFY_EXTERNAL_CACHE_HIT_ORDINAL = 15;

    private static final int CLEAR_HOST_CACHE_ORDINAL = 16;

    private static final int CLEAR_HTTP_AUTH_CACHE_ORDINAL = 17;

    private static final int CLEAR_CORS_PREFLIGHT_CACHE_ORDINAL = 18;

    private static final int CLEAR_REPORTING_CACHE_REPORTS_ORDINAL = 19;

    private static final int CLEAR_REPORTING_CACHE_CLIENTS_ORDINAL = 20;

    private static final int CLEAR_NETWORK_ERROR_LOGGING_ORDINAL = 21;

    private static final int CLEAR_DOMAIN_RELIABILITY_ORDINAL = 22;

    private static final int CLEAR_SHARED_DICTIONARY_CACHE_ORDINAL = 23;

    private static final int CLEAR_SHARED_DICTIONARY_CACHE_FOR_ISOLATION_KEY_ORDINAL = 24;

    private static final int SET_DOCUMENT_REPORTING_ENDPOINTS_ORDINAL = 25;

    private static final int SEND_REPORTS_AND_REMOVE_SOURCE_ORDINAL = 26;

    private static final int QUEUE_REPORT_ORDINAL = 27;

    private static final int QUEUE_SIGNED_EXCHANGE_REPORT_ORDINAL = 28;

    private static final int CLOSE_ALL_CONNECTIONS_ORDINAL = 29;

    private static final int CLOSE_IDLE_CONNECTIONS_ORDINAL = 30;

    private static final int SET_NETWORK_CONDITIONS_ORDINAL = 31;

    private static final int SET_ACCEPT_LANGUAGE_ORDINAL = 32;

    private static final int SET_ENABLE_REFERRERS_ORDINAL = 33;

    private static final int SET_CT_POLICY_ORDINAL = 34;

    private static final int CREATE_UDP_SOCKET_ORDINAL = 35;

    private static final int CREATE_RESTRICTED_UDP_SOCKET_ORDINAL = 36;

    private static final int CREATE_TCP_SERVER_SOCKET_ORDINAL = 37;

    private static final int CREATE_TCP_CONNECTED_SOCKET_ORDINAL = 38;

    private static final int CREATE_TCP_BOUND_SOCKET_ORDINAL = 39;

    private static final int CREATE_PROXY_RESOLVING_SOCKET_FACTORY_ORDINAL = 40;

    private static final int LOOK_UP_PROXY_FOR_URL_ORDINAL = 41;

    private static final int FORCE_RELOAD_PROXY_CONFIG_ORDINAL = 42;

    private static final int CLEAR_BAD_PROXIES_CACHE_ORDINAL = 43;

    private static final int CREATE_WEB_SOCKET_ORDINAL = 44;

    private static final int CREATE_WEB_TRANSPORT_ORDINAL = 45;

    private static final int CREATE_NET_LOG_EXPORTER_ORDINAL = 46;

    private static final int PRECONNECT_SOCKETS_ORDINAL = 47;

    private static final int CREATE_P2P_SOCKET_MANAGER_ORDINAL = 48;

    private static final int CREATE_MDNS_RESPONDER_ORDINAL = 49;

    private static final int RESOLVE_HOST_ORDINAL = 50;

    private static final int CREATE_HOST_RESOLVER_ORDINAL = 51;

    private static final int VERIFY_CERT_FOR_SIGNED_EXCHANGE_ORDINAL = 52;

    private static final int VERIFY_IP_PROTECTION_CONFIG_GETTER_FOR_TESTING_ORDINAL = 53;

    private static final int INVALIDATE_IP_PROTECTION_CONFIG_CACHE_TRY_AGAIN_AFTER_TIME_ORDINAL = 54;

    private static final int ADD_HSTS_ORDINAL = 55;

    private static final int IS_HSTS_ACTIVE_FOR_HOST_ORDINAL = 56;

    private static final int GET_HSTS_STATE_ORDINAL = 57;

    private static final int SET_CORS_ORIGIN_ACCESS_LISTS_FOR_ORIGIN_ORDINAL = 58;

    private static final int DELETE_DYNAMIC_DATA_FOR_HOST_ORDINAL = 59;

    private static final int SET_SPLIT_AUTH_CACHE_BY_NETWORK_ANONYMIZATION_KEY_ORDINAL = 60;

    private static final int SAVE_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL = 61;

    private static final int LOAD_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL = 62;

    private static final int ADD_AUTH_CACHE_ENTRY_ORDINAL = 63;

    private static final int SET_CORS_NON_WILDCARD_REQUEST_HEADERS_SUPPORT_ORDINAL = 64;

    private static final int LOOKUP_SERVER_BASIC_AUTH_CREDENTIALS_ORDINAL = 65;

    private static final int ENABLE_STATIC_KEY_PINNING_FOR_TESTING_ORDINAL = 66;

    private static final int VERIFY_CERTIFICATE_FOR_TESTING_ORDINAL = 67;

    private static final int ADD_DOMAIN_RELIABILITY_CONTEXT_FOR_TESTING_ORDINAL = 68;

    private static final int FORCE_DOMAIN_RELIABILITY_UPLOADS_FOR_TESTING_ORDINAL = 69;

    private static final int SET_CT_LOG_LIST_ALWAYS_TIMELY_FOR_TESTING_ORDINAL = 70;

    private static final int SET_SCT_AUDITING_MODE_ORDINAL = 71;

    private static final int ADD_REPORTING_API_OBSERVER_ORDINAL = 72;

    private static final int GET_SHARED_DICTIONARY_USAGE_INFO_ORDINAL = 73;

    private static final int GET_SHARED_DICTIONARY_INFO_ORDINAL = 74;

    private static final int GET_SHARED_DICTIONARY_ORIGINS_BETWEEN_ORDINAL = 75;

    private static final int SET_SHARED_DICTIONARY_CACHE_MAX_SIZE_ORDINAL = 76;

    private static final int RESOURCE_SCHEDULER_CLIENT_VISIBILITY_CHANGED_ORDINAL = 77;

    private static final int FLUSH_CACHED_CLIENT_CERT_IF_NEEDED_ORDINAL = 78;

    private static final int SET_COOKIE_DEPRECATION_LABEL_ORDINAL = 79;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements NetworkContext.Proxy {

        Proxy(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setClient(NetworkContextClient client) {

            NetworkContextSetClientParams _message = new NetworkContextSetClientParams();

            _message.client = client;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_CLIENT_ORDINAL)));

        }


        @Override
        public void createUrlLoaderFactory(org.chromium.mojo.bindings.InterfaceRequest<UrlLoaderFactory> urlLoaderFactory, UrlLoaderFactoryParams params) {

            NetworkContextCreateUrlLoaderFactoryParams _message = new NetworkContextCreateUrlLoaderFactoryParams();

            _message.urlLoaderFactory = urlLoaderFactory;

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_URL_LOADER_FACTORY_ORDINAL)));

        }


        @Override
        public void resetUrlLoaderFactories() {

            NetworkContextResetUrlLoaderFactoriesParams _message = new NetworkContextResetUrlLoaderFactoriesParams();


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(RESET_URL_LOADER_FACTORIES_ORDINAL)));

        }


        @Override
        public void getViaObliviousHttp(ObliviousHttpRequest request, ObliviousHttpClient client) {

            NetworkContextGetViaObliviousHttpParams _message = new NetworkContextGetViaObliviousHttpParams();

            _message.request = request;

            _message.client = client;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_VIA_OBLIVIOUS_HTTP_ORDINAL)));

        }


        @Override
        public void getCookieManager(org.chromium.mojo.bindings.InterfaceRequest<CookieManager> cookieManager) {

            NetworkContextGetCookieManagerParams _message = new NetworkContextGetCookieManagerParams();

            _message.cookieManager = cookieManager;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_COOKIE_MANAGER_ORDINAL)));

        }


        @Override
        public void getRestrictedCookieManager(org.chromium.mojo.bindings.InterfaceRequest<RestrictedCookieManager> restrictedCookieManager, int role, org.chromium.url.internal.mojom.Origin origin, IsolationInfo isolationInfo, CookieSettingOverrides cookieSettingOverrides, CookieAccessObserver cookieObserver) {

            NetworkContextGetRestrictedCookieManagerParams _message = new NetworkContextGetRestrictedCookieManagerParams();

            _message.restrictedCookieManager = restrictedCookieManager;

            _message.role = role;

            _message.origin = origin;

            _message.isolationInfo = isolationInfo;

            _message.cookieSettingOverrides = cookieSettingOverrides;

            _message.cookieObserver = cookieObserver;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_RESTRICTED_COOKIE_MANAGER_ORDINAL)));

        }


        @Override
        public void getTrustTokenQueryAnswerer(org.chromium.mojo.bindings.InterfaceRequest<TrustTokenQueryAnswerer> trustTokenQueryAnswerer, org.chromium.url.internal.mojom.Origin topFrameOrigin) {

            NetworkContextGetTrustTokenQueryAnswererParams _message = new NetworkContextGetTrustTokenQueryAnswererParams();

            _message.trustTokenQueryAnswerer = trustTokenQueryAnswerer;

            _message.topFrameOrigin = topFrameOrigin;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_TRUST_TOKEN_QUERY_ANSWERER_ORDINAL)));

        }


        @Override
        public void clearTrustTokenData(ClearDataFilter filter, ClearTrustTokenData_Response callback) {

            NetworkContextClearTrustTokenDataParams _message = new NetworkContextClearTrustTokenDataParams();

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_TRUST_TOKEN_DATA_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearTrustTokenDataResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearTrustTokenSessionOnlyData(

                ClearTrustTokenSessionOnlyData_Response callback) {

            NetworkContextClearTrustTokenSessionOnlyDataParams _message = new NetworkContextClearTrustTokenSessionOnlyDataParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_TRUST_TOKEN_SESSION_ONLY_DATA_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearTrustTokenSessionOnlyDataResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getStoredTrustTokenCounts(

                GetStoredTrustTokenCounts_Response callback) {

            NetworkContextGetStoredTrustTokenCountsParams _message = new NetworkContextGetStoredTrustTokenCountsParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_STORED_TRUST_TOKEN_COUNTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextGetStoredTrustTokenCountsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void deleteStoredTrustTokens(org.chromium.url.internal.mojom.Origin issuer, DeleteStoredTrustTokens_Response callback) {

            NetworkContextDeleteStoredTrustTokensParams _message = new NetworkContextDeleteStoredTrustTokensParams();

            _message.issuer = issuer;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(DELETE_STORED_TRUST_TOKENS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextDeleteStoredTrustTokensResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setBlockTrustTokens(boolean block) {

            NetworkContextSetBlockTrustTokensParams _message = new NetworkContextSetBlockTrustTokensParams();

            _message.block = block;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_BLOCK_TRUST_TOKENS_ORDINAL)));

        }


        @Override
        public void clearNetworkingHistoryBetween(org.chromium.mojo_base.mojom.Time startTime, org.chromium.mojo_base.mojom.Time endTime, ClearNetworkingHistoryBetween_Response callback) {

            NetworkContextClearNetworkingHistoryBetweenParams _message = new NetworkContextClearNetworkingHistoryBetweenParams();

            _message.startTime = startTime;

            _message.endTime = endTime;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_NETWORKING_HISTORY_BETWEEN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearNetworkingHistoryBetweenResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearHttpCache(org.chromium.mojo_base.mojom.Time startTime, org.chromium.mojo_base.mojom.Time endTime, ClearDataFilter filter, ClearHttpCache_Response callback) {

            NetworkContextClearHttpCacheParams _message = new NetworkContextClearHttpCacheParams();

            _message.startTime = startTime;

            _message.endTime = endTime;

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_HTTP_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearHttpCacheResponseParamsForwardToCallback(callback));

        }


        @Override
        public void computeHttpCacheSize(org.chromium.mojo_base.mojom.Time startTime, org.chromium.mojo_base.mojom.Time endTime, ComputeHttpCacheSize_Response callback) {

            NetworkContextComputeHttpCacheSizeParams _message = new NetworkContextComputeHttpCacheSizeParams();

            _message.startTime = startTime;

            _message.endTime = endTime;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(COMPUTE_HTTP_CACHE_SIZE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextComputeHttpCacheSizeResponseParamsForwardToCallback(callback));

        }


        @Override
        public void notifyExternalCacheHit(org.chromium.url.mojom.Url url, String httpMethod, NetworkIsolationKey key, boolean isSubframeDocumentResource, boolean includeCredentials) {

            NetworkContextNotifyExternalCacheHitParams _message = new NetworkContextNotifyExternalCacheHitParams();

            _message.url = url;

            _message.httpMethod = httpMethod;

            _message.key = key;

            _message.isSubframeDocumentResource = isSubframeDocumentResource;

            _message.includeCredentials = includeCredentials;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(NOTIFY_EXTERNAL_CACHE_HIT_ORDINAL)));

        }


        @Override
        public void clearHostCache(ClearDataFilter filter, ClearHostCache_Response callback) {

            NetworkContextClearHostCacheParams _message = new NetworkContextClearHostCacheParams();

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_HOST_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearHostCacheResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearHttpAuthCache(org.chromium.mojo_base.mojom.Time startTime, org.chromium.mojo_base.mojom.Time endTime, ClearDataFilter filter, ClearHttpAuthCache_Response callback) {

            NetworkContextClearHttpAuthCacheParams _message = new NetworkContextClearHttpAuthCacheParams();

            _message.startTime = startTime;

            _message.endTime = endTime;

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_HTTP_AUTH_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearHttpAuthCacheResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearCorsPreflightCache(ClearDataFilter filter, ClearCorsPreflightCache_Response callback) {

            NetworkContextClearCorsPreflightCacheParams _message = new NetworkContextClearCorsPreflightCacheParams();

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_CORS_PREFLIGHT_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearCorsPreflightCacheResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearReportingCacheReports(ClearDataFilter filter, ClearReportingCacheReports_Response callback) {

            NetworkContextClearReportingCacheReportsParams _message = new NetworkContextClearReportingCacheReportsParams();

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_REPORTING_CACHE_REPORTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearReportingCacheReportsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearReportingCacheClients(ClearDataFilter filter, ClearReportingCacheClients_Response callback) {

            NetworkContextClearReportingCacheClientsParams _message = new NetworkContextClearReportingCacheClientsParams();

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_REPORTING_CACHE_CLIENTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearReportingCacheClientsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearNetworkErrorLogging(ClearDataFilter filter, ClearNetworkErrorLogging_Response callback) {

            NetworkContextClearNetworkErrorLoggingParams _message = new NetworkContextClearNetworkErrorLoggingParams();

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_NETWORK_ERROR_LOGGING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearNetworkErrorLoggingResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearDomainReliability(ClearDataFilter filter, int mode, ClearDomainReliability_Response callback) {

            NetworkContextClearDomainReliabilityParams _message = new NetworkContextClearDomainReliabilityParams();

            _message.filter = filter;

            _message.mode = mode;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_DOMAIN_RELIABILITY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearDomainReliabilityResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearSharedDictionaryCache(org.chromium.mojo_base.mojom.Time startTime, org.chromium.mojo_base.mojom.Time endTime, ClearDataFilter filter, ClearSharedDictionaryCache_Response callback) {

            NetworkContextClearSharedDictionaryCacheParams _message = new NetworkContextClearSharedDictionaryCacheParams();

            _message.startTime = startTime;

            _message.endTime = endTime;

            _message.filter = filter;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_SHARED_DICTIONARY_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearSharedDictionaryCacheResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearSharedDictionaryCacheForIsolationKey(SharedDictionaryIsolationKey isolationKey, ClearSharedDictionaryCacheForIsolationKey_Response callback) {

            NetworkContextClearSharedDictionaryCacheForIsolationKeyParams _message = new NetworkContextClearSharedDictionaryCacheForIsolationKeyParams();

            _message.isolationKey = isolationKey;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_SHARED_DICTIONARY_CACHE_FOR_ISOLATION_KEY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setDocumentReportingEndpoints(org.chromium.mojo_base.mojom.UnguessableToken reportingSource, org.chromium.url.internal.mojom.Origin origin, IsolationInfo isolationInfo, java.util.Map<String, String> endpoints) {

            NetworkContextSetDocumentReportingEndpointsParams _message = new NetworkContextSetDocumentReportingEndpointsParams();

            _message.reportingSource = reportingSource;

            _message.origin = origin;

            _message.isolationInfo = isolationInfo;

            _message.endpoints = endpoints;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_DOCUMENT_REPORTING_ENDPOINTS_ORDINAL)));

        }


        @Override
        public void sendReportsAndRemoveSource(org.chromium.mojo_base.mojom.UnguessableToken reportingSource) {

            NetworkContextSendReportsAndRemoveSourceParams _message = new NetworkContextSendReportsAndRemoveSourceParams();

            _message.reportingSource = reportingSource;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SEND_REPORTS_AND_REMOVE_SOURCE_ORDINAL)));

        }


        @Override
        public void queueReport(String type, String group, org.chromium.url.mojom.Url url, org.chromium.mojo_base.mojom.UnguessableToken reportingSource, NetworkAnonymizationKey networkAnonymizationKey, String userAgent, org.chromium.mojo_base.mojom.DictionaryValue body) {

            NetworkContextQueueReportParams _message = new NetworkContextQueueReportParams();

            _message.type = type;

            _message.group = group;

            _message.url = url;

            _message.reportingSource = reportingSource;

            _message.networkAnonymizationKey = networkAnonymizationKey;

            _message.userAgent = userAgent;

            _message.body = body;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(QUEUE_REPORT_ORDINAL)));

        }


        @Override
        public void queueSignedExchangeReport(SignedExchangeReport report, NetworkAnonymizationKey networkAnonymizationKey) {

            NetworkContextQueueSignedExchangeReportParams _message = new NetworkContextQueueSignedExchangeReportParams();

            _message.report = report;

            _message.networkAnonymizationKey = networkAnonymizationKey;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(QUEUE_SIGNED_EXCHANGE_REPORT_ORDINAL)));

        }


        @Override
        public void closeAllConnections(

                CloseAllConnections_Response callback) {

            NetworkContextCloseAllConnectionsParams _message = new NetworkContextCloseAllConnectionsParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLOSE_ALL_CONNECTIONS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextCloseAllConnectionsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void closeIdleConnections(

                CloseIdleConnections_Response callback) {

            NetworkContextCloseIdleConnectionsParams _message = new NetworkContextCloseIdleConnectionsParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLOSE_IDLE_CONNECTIONS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextCloseIdleConnectionsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setNetworkConditions(org.chromium.mojo_base.mojom.UnguessableToken throttlingProfileId, NetworkConditions conditions) {

            NetworkContextSetNetworkConditionsParams _message = new NetworkContextSetNetworkConditionsParams();

            _message.throttlingProfileId = throttlingProfileId;

            _message.conditions = conditions;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_NETWORK_CONDITIONS_ORDINAL)));

        }


        @Override
        public void setAcceptLanguage(String newAcceptLanguage) {

            NetworkContextSetAcceptLanguageParams _message = new NetworkContextSetAcceptLanguageParams();

            _message.newAcceptLanguage = newAcceptLanguage;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_ACCEPT_LANGUAGE_ORDINAL)));

        }


        @Override
        public void setEnableReferrers(boolean enableReferrers) {

            NetworkContextSetEnableReferrersParams _message = new NetworkContextSetEnableReferrersParams();

            _message.enableReferrers = enableReferrers;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_ENABLE_REFERRERS_ORDINAL)));

        }


        @Override
        public void setCtPolicy(CtPolicy ctPolicy) {

            NetworkContextSetCtPolicyParams _message = new NetworkContextSetCtPolicyParams();

            _message.ctPolicy = ctPolicy;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_CT_POLICY_ORDINAL)));

        }


        @Override
        public void createUdpSocket(org.chromium.mojo.bindings.InterfaceRequest<UdpSocket> receiver, UdpSocketListener listener) {

            NetworkContextCreateUdpSocketParams _message = new NetworkContextCreateUdpSocketParams();

            _message.receiver = receiver;

            _message.listener = listener;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_UDP_SOCKET_ORDINAL)));

        }


        @Override
        public void createRestrictedUdpSocket(IpEndPoint addr, int mode, MutableNetworkTrafficAnnotationTag trafficAnnotation, RestrictedUdpSocketParams params, org.chromium.mojo.bindings.InterfaceRequest<RestrictedUdpSocket> receiver, UdpSocketListener listener, CreateRestrictedUdpSocket_Response callback) {

            NetworkContextCreateRestrictedUdpSocketParams _message = new NetworkContextCreateRestrictedUdpSocketParams();

            _message.addr = addr;

            _message.mode = mode;

            _message.trafficAnnotation = trafficAnnotation;

            _message.params = params;

            _message.receiver = receiver;

            _message.listener = listener;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_RESTRICTED_UDP_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextCreateRestrictedUdpSocketResponseParamsForwardToCallback(callback));

        }


        @Override
        public void createTcpServerSocket(IpEndPoint localAddr, TcpServerSocketOptions options, MutableNetworkTrafficAnnotationTag trafficAnnotation, org.chromium.mojo.bindings.InterfaceRequest<TcpServerSocket> socket, CreateTcpServerSocket_Response callback) {

            NetworkContextCreateTcpServerSocketParams _message = new NetworkContextCreateTcpServerSocketParams();

            _message.localAddr = localAddr;

            _message.options = options;

            _message.trafficAnnotation = trafficAnnotation;

            _message.socket = socket;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_TCP_SERVER_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextCreateTcpServerSocketResponseParamsForwardToCallback(callback));

        }


        @Override
        public void createTcpConnectedSocket(IpEndPoint localAddr, AddressList remoteAddrList, TcpConnectedSocketOptions tcpConnectedSocketOptions, MutableNetworkTrafficAnnotationTag trafficAnnotation, org.chromium.mojo.bindings.InterfaceRequest<TcpConnectedSocket> socket, SocketObserver observer, CreateTcpConnectedSocket_Response callback) {

            NetworkContextCreateTcpConnectedSocketParams _message = new NetworkContextCreateTcpConnectedSocketParams();

            _message.localAddr = localAddr;

            _message.remoteAddrList = remoteAddrList;

            _message.tcpConnectedSocketOptions = tcpConnectedSocketOptions;

            _message.trafficAnnotation = trafficAnnotation;

            _message.socket = socket;

            _message.observer = observer;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_TCP_CONNECTED_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextCreateTcpConnectedSocketResponseParamsForwardToCallback(callback));

        }


        @Override
        public void createTcpBoundSocket(IpEndPoint localAddr, MutableNetworkTrafficAnnotationTag trafficAnnotation, org.chromium.mojo.bindings.InterfaceRequest<TcpBoundSocket> socket, CreateTcpBoundSocket_Response callback) {

            NetworkContextCreateTcpBoundSocketParams _message = new NetworkContextCreateTcpBoundSocketParams();

            _message.localAddr = localAddr;

            _message.trafficAnnotation = trafficAnnotation;

            _message.socket = socket;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_TCP_BOUND_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextCreateTcpBoundSocketResponseParamsForwardToCallback(callback));

        }


        @Override
        public void createProxyResolvingSocketFactory(org.chromium.mojo.bindings.InterfaceRequest<ProxyResolvingSocketFactory> factory) {

            NetworkContextCreateProxyResolvingSocketFactoryParams _message = new NetworkContextCreateProxyResolvingSocketFactoryParams();

            _message.factory = factory;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_PROXY_RESOLVING_SOCKET_FACTORY_ORDINAL)));

        }


        @Override
        public void lookUpProxyForUrl(org.chromium.url.mojom.Url url, NetworkAnonymizationKey networkAnonymizationKey, ProxyLookupClient proxyLookupClient) {

            NetworkContextLookUpProxyForUrlParams _message = new NetworkContextLookUpProxyForUrlParams();

            _message.url = url;

            _message.networkAnonymizationKey = networkAnonymizationKey;

            _message.proxyLookupClient = proxyLookupClient;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(LOOK_UP_PROXY_FOR_URL_ORDINAL)));

        }


        @Override
        public void forceReloadProxyConfig(

                ForceReloadProxyConfig_Response callback) {

            NetworkContextForceReloadProxyConfigParams _message = new NetworkContextForceReloadProxyConfigParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(FORCE_RELOAD_PROXY_CONFIG_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextForceReloadProxyConfigResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearBadProxiesCache(

                ClearBadProxiesCache_Response callback) {

            NetworkContextClearBadProxiesCacheParams _message = new NetworkContextClearBadProxiesCacheParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CLEAR_BAD_PROXIES_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextClearBadProxiesCacheResponseParamsForwardToCallback(callback));

        }


        @Override
        public void createWebSocket(org.chromium.url.mojom.Url url, String[] requestedProtocols, SiteForCookies siteForCookies, IsolationInfo isolationInfo, HttpHeader[] additionalHeaders, int processId, org.chromium.url.internal.mojom.Origin origin, int options, MutableNetworkTrafficAnnotationTag trafficAnnotation, WebSocketHandshakeClient handshakeClient, UrlLoaderNetworkServiceObserver urlLoaderNetworkObserver, WebSocketAuthenticationHandler authHandler, TrustedHeaderClient headerClient, org.chromium.mojo_base.mojom.UnguessableToken throttlingProfileId) {

            NetworkContextCreateWebSocketParams _message = new NetworkContextCreateWebSocketParams();

            _message.url = url;

            _message.requestedProtocols = requestedProtocols;

            _message.siteForCookies = siteForCookies;

            _message.isolationInfo = isolationInfo;

            _message.additionalHeaders = additionalHeaders;

            _message.processId = processId;

            _message.origin = origin;

            _message.options = options;

            _message.trafficAnnotation = trafficAnnotation;

            _message.handshakeClient = handshakeClient;

            _message.urlLoaderNetworkObserver = urlLoaderNetworkObserver;

            _message.authHandler = authHandler;

            _message.headerClient = headerClient;

            _message.throttlingProfileId = throttlingProfileId;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_WEB_SOCKET_ORDINAL)));

        }


        @Override
        public void createWebTransport(org.chromium.url.mojom.Url url, org.chromium.url.internal.mojom.Origin origin, NetworkAnonymizationKey networkAnonymizationKey, WebTransportCertificateFingerprint[] fingerprints, WebTransportHandshakeClient handshakeClient) {

            NetworkContextCreateWebTransportParams _message = new NetworkContextCreateWebTransportParams();

            _message.url = url;

            _message.origin = origin;

            _message.networkAnonymizationKey = networkAnonymizationKey;

            _message.fingerprints = fingerprints;

            _message.handshakeClient = handshakeClient;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_WEB_TRANSPORT_ORDINAL)));

        }


        @Override
        public void createNetLogExporter(org.chromium.mojo.bindings.InterfaceRequest<NetLogExporter> receiver) {

            NetworkContextCreateNetLogExporterParams _message = new NetworkContextCreateNetLogExporterParams();

            _message.receiver = receiver;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_NET_LOG_EXPORTER_ORDINAL)));

        }


        @Override
        public void preconnectSockets(int numStreams, org.chromium.url.mojom.Url url, boolean allowCredentials, NetworkAnonymizationKey networkAnonymizationKey) {

            NetworkContextPreconnectSocketsParams _message = new NetworkContextPreconnectSocketsParams();

            _message.numStreams = numStreams;

            _message.url = url;

            _message.allowCredentials = allowCredentials;

            _message.networkAnonymizationKey = networkAnonymizationKey;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(PRECONNECT_SOCKETS_ORDINAL)));

        }


        @Override
        public void createP2pSocketManager(NetworkAnonymizationKey networkAnonymizationKey, P2pTrustedSocketManagerClient client, org.chromium.mojo.bindings.InterfaceRequest<P2pTrustedSocketManager> trustedSocketManager, org.chromium.mojo.bindings.InterfaceRequest<P2pSocketManager> socketManager) {

            NetworkContextCreateP2pSocketManagerParams _message = new NetworkContextCreateP2pSocketManagerParams();

            _message.networkAnonymizationKey = networkAnonymizationKey;

            _message.client = client;

            _message.trustedSocketManager = trustedSocketManager;

            _message.socketManager = socketManager;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_P2P_SOCKET_MANAGER_ORDINAL)));

        }


        @Override
        public void createMdnsResponder(org.chromium.mojo.bindings.InterfaceRequest<MdnsResponder> responderReceiver) {

            NetworkContextCreateMdnsResponderParams _message = new NetworkContextCreateMdnsResponderParams();

            _message.responderReceiver = responderReceiver;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_MDNS_RESPONDER_ORDINAL)));

        }


        @Override
        public void resolveHost(HostResolverHost host, NetworkAnonymizationKey networkAnonymizationKey, ResolveHostParameters optionalParameters, ResolveHostClient responseClient) {

            NetworkContextResolveHostParams _message = new NetworkContextResolveHostParams();

            _message.host = host;

            _message.networkAnonymizationKey = networkAnonymizationKey;

            _message.optionalParameters = optionalParameters;

            _message.responseClient = responseClient;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(RESOLVE_HOST_ORDINAL)));

        }


        @Override
        public void createHostResolver(DnsConfigOverrides configOverrides, org.chromium.mojo.bindings.InterfaceRequest<HostResolver> hostResolver) {

            NetworkContextCreateHostResolverParams _message = new NetworkContextCreateHostResolverParams();

            _message.configOverrides = configOverrides;

            _message.hostResolver = hostResolver;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(CREATE_HOST_RESOLVER_ORDINAL)));

        }


        @Override
        public void verifyCertForSignedExchange(X509Certificate certificate, org.chromium.url.mojom.Url url, NetworkAnonymizationKey networkAnonymizationKey, String ocspResponse, String sctList, VerifyCertForSignedExchange_Response callback) {

            NetworkContextVerifyCertForSignedExchangeParams _message = new NetworkContextVerifyCertForSignedExchangeParams();

            _message.certificate = certificate;

            _message.url = url;

            _message.networkAnonymizationKey = networkAnonymizationKey;

            _message.ocspResponse = ocspResponse;

            _message.sctList = sctList;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(VERIFY_CERT_FOR_SIGNED_EXCHANGE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextVerifyCertForSignedExchangeResponseParamsForwardToCallback(callback));

        }


        @Override
        public void verifyIpProtectionConfigGetterForTesting(

                VerifyIpProtectionConfigGetterForTesting_Response callback) {

            NetworkContextVerifyIpProtectionConfigGetterForTestingParams _message = new NetworkContextVerifyIpProtectionConfigGetterForTestingParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(VERIFY_IP_PROTECTION_CONFIG_GETTER_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParamsForwardToCallback(callback));

        }


        @Override
        public void invalidateIpProtectionConfigCacheTryAgainAfterTime() {

            NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams _message = new NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams();


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(INVALIDATE_IP_PROTECTION_CONFIG_CACHE_TRY_AGAIN_AFTER_TIME_ORDINAL)));

        }


        @Override
        public void addHsts(String host, org.chromium.mojo_base.mojom.Time expiry, boolean includeSubdomains, AddHsts_Response callback) {

            NetworkContextAddHstsParams _message = new NetworkContextAddHstsParams();

            _message.host = host;

            _message.expiry = expiry;

            _message.includeSubdomains = includeSubdomains;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(ADD_HSTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextAddHstsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void isHstsActiveForHost(String host, IsHstsActiveForHost_Response callback) {

            NetworkContextIsHstsActiveForHostParams _message = new NetworkContextIsHstsActiveForHostParams();

            _message.host = host;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(IS_HSTS_ACTIVE_FOR_HOST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextIsHstsActiveForHostResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getHstsState(String domain, GetHstsState_Response callback) {

            NetworkContextGetHstsStateParams _message = new NetworkContextGetHstsStateParams();

            _message.domain = domain;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_HSTS_STATE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextGetHstsStateResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setCorsOriginAccessListsForOrigin(org.chromium.url.internal.mojom.Origin sourceOrigin, CorsOriginPattern[] allowPatterns, CorsOriginPattern[] blockPatterns, SetCorsOriginAccessListsForOrigin_Response callback) {

            NetworkContextSetCorsOriginAccessListsForOriginParams _message = new NetworkContextSetCorsOriginAccessListsForOriginParams();

            _message.sourceOrigin = sourceOrigin;

            _message.allowPatterns = allowPatterns;

            _message.blockPatterns = blockPatterns;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_CORS_ORIGIN_ACCESS_LISTS_FOR_ORIGIN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextSetCorsOriginAccessListsForOriginResponseParamsForwardToCallback(callback));

        }


        @Override
        public void deleteDynamicDataForHost(String host, DeleteDynamicDataForHost_Response callback) {

            NetworkContextDeleteDynamicDataForHostParams _message = new NetworkContextDeleteDynamicDataForHostParams();

            _message.host = host;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(DELETE_DYNAMIC_DATA_FOR_HOST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextDeleteDynamicDataForHostResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setSplitAuthCacheByNetworkAnonymizationKey(boolean splitAuthCacheByNetworkAnonymizationKey) {

            NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams _message = new NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams();

            _message.splitAuthCacheByNetworkAnonymizationKey = splitAuthCacheByNetworkAnonymizationKey;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_SPLIT_AUTH_CACHE_BY_NETWORK_ANONYMIZATION_KEY_ORDINAL)));

        }


        @Override
        public void saveHttpAuthCacheProxyEntries(

                SaveHttpAuthCacheProxyEntries_Response callback) {

            NetworkContextSaveHttpAuthCacheProxyEntriesParams _message = new NetworkContextSaveHttpAuthCacheProxyEntriesParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SAVE_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextSaveHttpAuthCacheProxyEntriesResponseParamsForwardToCallback(callback));

        }


        @Override
        public void loadHttpAuthCacheProxyEntries(org.chromium.mojo_base.mojom.UnguessableToken cacheKey, LoadHttpAuthCacheProxyEntries_Response callback) {

            NetworkContextLoadHttpAuthCacheProxyEntriesParams _message = new NetworkContextLoadHttpAuthCacheProxyEntriesParams();

            _message.cacheKey = cacheKey;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(LOAD_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextLoadHttpAuthCacheProxyEntriesResponseParamsForwardToCallback(callback));

        }


        @Override
        public void addAuthCacheEntry(AuthChallengeInfo challenge, NetworkAnonymizationKey networkAnonymizationKey, AuthCredentials credentials, AddAuthCacheEntry_Response callback) {

            NetworkContextAddAuthCacheEntryParams _message = new NetworkContextAddAuthCacheEntryParams();

            _message.challenge = challenge;

            _message.networkAnonymizationKey = networkAnonymizationKey;

            _message.credentials = credentials;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(ADD_AUTH_CACHE_ENTRY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextAddAuthCacheEntryResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setCorsNonWildcardRequestHeadersSupport(boolean value) {

            NetworkContextSetCorsNonWildcardRequestHeadersSupportParams _message = new NetworkContextSetCorsNonWildcardRequestHeadersSupportParams();

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_CORS_NON_WILDCARD_REQUEST_HEADERS_SUPPORT_ORDINAL)));

        }


        @Override
        public void lookupServerBasicAuthCredentials(org.chromium.url.mojom.Url url, NetworkAnonymizationKey networkAnonymizationKey, LookupServerBasicAuthCredentials_Response callback) {

            NetworkContextLookupServerBasicAuthCredentialsParams _message = new NetworkContextLookupServerBasicAuthCredentialsParams();

            _message.url = url;

            _message.networkAnonymizationKey = networkAnonymizationKey;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(LOOKUP_SERVER_BASIC_AUTH_CREDENTIALS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextLookupServerBasicAuthCredentialsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void enableStaticKeyPinningForTesting(

                EnableStaticKeyPinningForTesting_Response callback) {

            NetworkContextEnableStaticKeyPinningForTestingParams _message = new NetworkContextEnableStaticKeyPinningForTestingParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(ENABLE_STATIC_KEY_PINNING_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextEnableStaticKeyPinningForTestingResponseParamsForwardToCallback(callback));

        }


        @Override
        public void verifyCertificateForTesting(X509Certificate certificate, String hostname, String ocspResponse, String sctList, VerifyCertificateForTesting_Response callback) {

            NetworkContextVerifyCertificateForTestingParams _message = new NetworkContextVerifyCertificateForTestingParams();

            _message.certificate = certificate;

            _message.hostname = hostname;

            _message.ocspResponse = ocspResponse;

            _message.sctList = sctList;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(VERIFY_CERTIFICATE_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextVerifyCertificateForTestingResponseParamsForwardToCallback(callback));

        }


        @Override
        public void addDomainReliabilityContextForTesting(org.chromium.url.internal.mojom.Origin origin, org.chromium.url.mojom.Url uploadUrl, AddDomainReliabilityContextForTesting_Response callback) {

            NetworkContextAddDomainReliabilityContextForTestingParams _message = new NetworkContextAddDomainReliabilityContextForTestingParams();

            _message.origin = origin;

            _message.uploadUrl = uploadUrl;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(ADD_DOMAIN_RELIABILITY_CONTEXT_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextAddDomainReliabilityContextForTestingResponseParamsForwardToCallback(callback));

        }


        @Override
        public void forceDomainReliabilityUploadsForTesting(

                ForceDomainReliabilityUploadsForTesting_Response callback) {

            NetworkContextForceDomainReliabilityUploadsForTestingParams _message = new NetworkContextForceDomainReliabilityUploadsForTestingParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(FORCE_DOMAIN_RELIABILITY_UPLOADS_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextForceDomainReliabilityUploadsForTestingResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setCtLogListAlwaysTimelyForTesting() {

            NetworkContextSetCtLogListAlwaysTimelyForTestingParams _message = new NetworkContextSetCtLogListAlwaysTimelyForTestingParams();


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_CT_LOG_LIST_ALWAYS_TIMELY_FOR_TESTING_ORDINAL)));

        }


        @Override
        public void setSctAuditingMode(int mode) {

            NetworkContextSetSctAuditingModeParams _message = new NetworkContextSetSctAuditingModeParams();

            _message.mode = mode;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_SCT_AUDITING_MODE_ORDINAL)));

        }


        @Override
        public void addReportingApiObserver(ReportingApiObserver observer) {

            NetworkContextAddReportingApiObserverParams _message = new NetworkContextAddReportingApiObserverParams();

            _message.observer = observer;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(ADD_REPORTING_API_OBSERVER_ORDINAL)));

        }


        @Override
        public void getSharedDictionaryUsageInfo(

                GetSharedDictionaryUsageInfo_Response callback) {

            NetworkContextGetSharedDictionaryUsageInfoParams _message = new NetworkContextGetSharedDictionaryUsageInfoParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_SHARED_DICTIONARY_USAGE_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextGetSharedDictionaryUsageInfoResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getSharedDictionaryInfo(SharedDictionaryIsolationKey isolationKey, GetSharedDictionaryInfo_Response callback) {

            NetworkContextGetSharedDictionaryInfoParams _message = new NetworkContextGetSharedDictionaryInfoParams();

            _message.isolationKey = isolationKey;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_SHARED_DICTIONARY_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextGetSharedDictionaryInfoResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getSharedDictionaryOriginsBetween(org.chromium.mojo_base.mojom.Time startTime, org.chromium.mojo_base.mojom.Time endTime, GetSharedDictionaryOriginsBetween_Response callback) {

            NetworkContextGetSharedDictionaryOriginsBetweenParams _message = new NetworkContextGetSharedDictionaryOriginsBetweenParams();

            _message.startTime = startTime;

            _message.endTime = endTime;


            getProxyHandler().getMessageReceiver().acceptWithResponder(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(GET_SHARED_DICTIONARY_ORIGINS_BETWEEN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG, 0)), new NetworkContextGetSharedDictionaryOriginsBetweenResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setSharedDictionaryCacheMaxSize(long cacheMaxSize) {

            NetworkContextSetSharedDictionaryCacheMaxSizeParams _message = new NetworkContextSetSharedDictionaryCacheMaxSizeParams();

            _message.cacheMaxSize = cacheMaxSize;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_SHARED_DICTIONARY_CACHE_MAX_SIZE_ORDINAL)));

        }


        @Override
        public void resourceSchedulerClientVisibilityChanged(org.chromium.mojo_base.mojom.UnguessableToken clientToken, boolean visible) {

            NetworkContextResourceSchedulerClientVisibilityChangedParams _message = new NetworkContextResourceSchedulerClientVisibilityChangedParams();

            _message.clientToken = clientToken;

            _message.visible = visible;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(RESOURCE_SCHEDULER_CLIENT_VISIBILITY_CHANGED_ORDINAL)));

        }


        @Override
        public void flushCachedClientCertIfNeeded(HostPortPair host, X509Certificate certificate) {

            NetworkContextFlushCachedClientCertIfNeededParams _message = new NetworkContextFlushCachedClientCertIfNeededParams();

            _message.host = host;

            _message.certificate = certificate;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(FLUSH_CACHED_CLIENT_CERT_IF_NEEDED_ORDINAL)));

        }


        @Override
        public void setCookieDeprecationLabel(String label) {

            NetworkContextSetCookieDeprecationLabelParams _message = new NetworkContextSetCookieDeprecationLabelParams();

            _message.label = label;


            getProxyHandler().getMessageReceiver().accept(_message.serializeWithHeader(getProxyHandler().getCore(), new org.chromium.mojo.bindings.MessageHeader(SET_COOKIE_DEPRECATION_LABEL_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<NetworkContext> {

        Stub(org.chromium.mojo.system.Core core, NetworkContext impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(NetworkContext_Internal.MANAGER, messageWithHeader);


                    case SET_CLIENT_ORDINAL: {

                        NetworkContextSetClientParams data = NetworkContextSetClientParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setClient(data.client);
                        return true;
                    }


                    case CREATE_URL_LOADER_FACTORY_ORDINAL: {

                        NetworkContextCreateUrlLoaderFactoryParams data = NetworkContextCreateUrlLoaderFactoryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createUrlLoaderFactory(data.urlLoaderFactory, data.params);
                        return true;
                    }


                    case RESET_URL_LOADER_FACTORIES_ORDINAL: {

                        NetworkContextResetUrlLoaderFactoriesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().resetUrlLoaderFactories();
                        return true;
                    }


                    case GET_VIA_OBLIVIOUS_HTTP_ORDINAL: {

                        NetworkContextGetViaObliviousHttpParams data = NetworkContextGetViaObliviousHttpParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getViaObliviousHttp(data.request, data.client);
                        return true;
                    }


                    case GET_COOKIE_MANAGER_ORDINAL: {

                        NetworkContextGetCookieManagerParams data = NetworkContextGetCookieManagerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getCookieManager(data.cookieManager);
                        return true;
                    }


                    case GET_RESTRICTED_COOKIE_MANAGER_ORDINAL: {

                        NetworkContextGetRestrictedCookieManagerParams data = NetworkContextGetRestrictedCookieManagerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getRestrictedCookieManager(data.restrictedCookieManager, data.role, data.origin, data.isolationInfo, data.cookieSettingOverrides, data.cookieObserver);
                        return true;
                    }


                    case GET_TRUST_TOKEN_QUERY_ANSWERER_ORDINAL: {

                        NetworkContextGetTrustTokenQueryAnswererParams data = NetworkContextGetTrustTokenQueryAnswererParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getTrustTokenQueryAnswerer(data.trustTokenQueryAnswerer, data.topFrameOrigin);
                        return true;
                    }


                    case SET_BLOCK_TRUST_TOKENS_ORDINAL: {

                        NetworkContextSetBlockTrustTokensParams data = NetworkContextSetBlockTrustTokensParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setBlockTrustTokens(data.block);
                        return true;
                    }


                    case NOTIFY_EXTERNAL_CACHE_HIT_ORDINAL: {

                        NetworkContextNotifyExternalCacheHitParams data = NetworkContextNotifyExternalCacheHitParams.deserialize(messageWithHeader.getPayload());

                        getImpl().notifyExternalCacheHit(data.url, data.httpMethod, data.key, data.isSubframeDocumentResource, data.includeCredentials);
                        return true;
                    }


                    case SET_DOCUMENT_REPORTING_ENDPOINTS_ORDINAL: {

                        NetworkContextSetDocumentReportingEndpointsParams data = NetworkContextSetDocumentReportingEndpointsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setDocumentReportingEndpoints(data.reportingSource, data.origin, data.isolationInfo, data.endpoints);
                        return true;
                    }


                    case SEND_REPORTS_AND_REMOVE_SOURCE_ORDINAL: {

                        NetworkContextSendReportsAndRemoveSourceParams data = NetworkContextSendReportsAndRemoveSourceParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sendReportsAndRemoveSource(data.reportingSource);
                        return true;
                    }


                    case QUEUE_REPORT_ORDINAL: {

                        NetworkContextQueueReportParams data = NetworkContextQueueReportParams.deserialize(messageWithHeader.getPayload());

                        getImpl().queueReport(data.type, data.group, data.url, data.reportingSource, data.networkAnonymizationKey, data.userAgent, data.body);
                        return true;
                    }


                    case QUEUE_SIGNED_EXCHANGE_REPORT_ORDINAL: {

                        NetworkContextQueueSignedExchangeReportParams data = NetworkContextQueueSignedExchangeReportParams.deserialize(messageWithHeader.getPayload());

                        getImpl().queueSignedExchangeReport(data.report, data.networkAnonymizationKey);
                        return true;
                    }


                    case SET_NETWORK_CONDITIONS_ORDINAL: {

                        NetworkContextSetNetworkConditionsParams data = NetworkContextSetNetworkConditionsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setNetworkConditions(data.throttlingProfileId, data.conditions);
                        return true;
                    }


                    case SET_ACCEPT_LANGUAGE_ORDINAL: {

                        NetworkContextSetAcceptLanguageParams data = NetworkContextSetAcceptLanguageParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setAcceptLanguage(data.newAcceptLanguage);
                        return true;
                    }


                    case SET_ENABLE_REFERRERS_ORDINAL: {

                        NetworkContextSetEnableReferrersParams data = NetworkContextSetEnableReferrersParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setEnableReferrers(data.enableReferrers);
                        return true;
                    }


                    case SET_CT_POLICY_ORDINAL: {

                        NetworkContextSetCtPolicyParams data = NetworkContextSetCtPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setCtPolicy(data.ctPolicy);
                        return true;
                    }


                    case CREATE_UDP_SOCKET_ORDINAL: {

                        NetworkContextCreateUdpSocketParams data = NetworkContextCreateUdpSocketParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createUdpSocket(data.receiver, data.listener);
                        return true;
                    }


                    case CREATE_PROXY_RESOLVING_SOCKET_FACTORY_ORDINAL: {

                        NetworkContextCreateProxyResolvingSocketFactoryParams data = NetworkContextCreateProxyResolvingSocketFactoryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createProxyResolvingSocketFactory(data.factory);
                        return true;
                    }


                    case LOOK_UP_PROXY_FOR_URL_ORDINAL: {

                        NetworkContextLookUpProxyForUrlParams data = NetworkContextLookUpProxyForUrlParams.deserialize(messageWithHeader.getPayload());

                        getImpl().lookUpProxyForUrl(data.url, data.networkAnonymizationKey, data.proxyLookupClient);
                        return true;
                    }


                    case CREATE_WEB_SOCKET_ORDINAL: {

                        NetworkContextCreateWebSocketParams data = NetworkContextCreateWebSocketParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createWebSocket(data.url, data.requestedProtocols, data.siteForCookies, data.isolationInfo, data.additionalHeaders, data.processId, data.origin, data.options, data.trafficAnnotation, data.handshakeClient, data.urlLoaderNetworkObserver, data.authHandler, data.headerClient, data.throttlingProfileId);
                        return true;
                    }


                    case CREATE_WEB_TRANSPORT_ORDINAL: {

                        NetworkContextCreateWebTransportParams data = NetworkContextCreateWebTransportParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createWebTransport(data.url, data.origin, data.networkAnonymizationKey, data.fingerprints, data.handshakeClient);
                        return true;
                    }


                    case CREATE_NET_LOG_EXPORTER_ORDINAL: {

                        NetworkContextCreateNetLogExporterParams data = NetworkContextCreateNetLogExporterParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createNetLogExporter(data.receiver);
                        return true;
                    }


                    case PRECONNECT_SOCKETS_ORDINAL: {

                        NetworkContextPreconnectSocketsParams data = NetworkContextPreconnectSocketsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().preconnectSockets(data.numStreams, data.url, data.allowCredentials, data.networkAnonymizationKey);
                        return true;
                    }


                    case CREATE_P2P_SOCKET_MANAGER_ORDINAL: {

                        NetworkContextCreateP2pSocketManagerParams data = NetworkContextCreateP2pSocketManagerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createP2pSocketManager(data.networkAnonymizationKey, data.client, data.trustedSocketManager, data.socketManager);
                        return true;
                    }


                    case CREATE_MDNS_RESPONDER_ORDINAL: {

                        NetworkContextCreateMdnsResponderParams data = NetworkContextCreateMdnsResponderParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createMdnsResponder(data.responderReceiver);
                        return true;
                    }


                    case RESOLVE_HOST_ORDINAL: {

                        NetworkContextResolveHostParams data = NetworkContextResolveHostParams.deserialize(messageWithHeader.getPayload());

                        getImpl().resolveHost(data.host, data.networkAnonymizationKey, data.optionalParameters, data.responseClient);
                        return true;
                    }


                    case CREATE_HOST_RESOLVER_ORDINAL: {

                        NetworkContextCreateHostResolverParams data = NetworkContextCreateHostResolverParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createHostResolver(data.configOverrides, data.hostResolver);
                        return true;
                    }


                    case INVALIDATE_IP_PROTECTION_CONFIG_CACHE_TRY_AGAIN_AFTER_TIME_ORDINAL: {

                        NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().invalidateIpProtectionConfigCacheTryAgainAfterTime();
                        return true;
                    }


                    case SET_SPLIT_AUTH_CACHE_BY_NETWORK_ANONYMIZATION_KEY_ORDINAL: {

                        NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams data = NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setSplitAuthCacheByNetworkAnonymizationKey(data.splitAuthCacheByNetworkAnonymizationKey);
                        return true;
                    }


                    case SET_CORS_NON_WILDCARD_REQUEST_HEADERS_SUPPORT_ORDINAL: {

                        NetworkContextSetCorsNonWildcardRequestHeadersSupportParams data = NetworkContextSetCorsNonWildcardRequestHeadersSupportParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setCorsNonWildcardRequestHeadersSupport(data.value);
                        return true;
                    }


                    case SET_CT_LOG_LIST_ALWAYS_TIMELY_FOR_TESTING_ORDINAL: {

                        NetworkContextSetCtLogListAlwaysTimelyForTestingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setCtLogListAlwaysTimelyForTesting();
                        return true;
                    }


                    case SET_SCT_AUDITING_MODE_ORDINAL: {

                        NetworkContextSetSctAuditingModeParams data = NetworkContextSetSctAuditingModeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setSctAuditingMode(data.mode);
                        return true;
                    }


                    case ADD_REPORTING_API_OBSERVER_ORDINAL: {

                        NetworkContextAddReportingApiObserverParams data = NetworkContextAddReportingApiObserverParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addReportingApiObserver(data.observer);
                        return true;
                    }


                    case SET_SHARED_DICTIONARY_CACHE_MAX_SIZE_ORDINAL: {

                        NetworkContextSetSharedDictionaryCacheMaxSizeParams data = NetworkContextSetSharedDictionaryCacheMaxSizeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setSharedDictionaryCacheMaxSize(data.cacheMaxSize);
                        return true;
                    }


                    case RESOURCE_SCHEDULER_CLIENT_VISIBILITY_CHANGED_ORDINAL: {

                        NetworkContextResourceSchedulerClientVisibilityChangedParams data = NetworkContextResourceSchedulerClientVisibilityChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().resourceSchedulerClientVisibilityChanged(data.clientToken, data.visible);
                        return true;
                    }


                    case FLUSH_CACHED_CLIENT_CERT_IF_NEEDED_ORDINAL: {

                        NetworkContextFlushCachedClientCertIfNeededParams data = NetworkContextFlushCachedClientCertIfNeededParams.deserialize(messageWithHeader.getPayload());

                        getImpl().flushCachedClientCertIfNeeded(data.host, data.certificate);
                        return true;
                    }


                    case SET_COOKIE_DEPRECATION_LABEL_ORDINAL: {

                        NetworkContextSetCookieDeprecationLabelParams data = NetworkContextSetCookieDeprecationLabelParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setCookieDeprecationLabel(data.label);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch (header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(getCore(), NetworkContext_Internal.MANAGER, messageWithHeader, receiver);


                    case CLEAR_TRUST_TOKEN_DATA_ORDINAL: {

                        NetworkContextClearTrustTokenDataParams data = NetworkContextClearTrustTokenDataParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearTrustTokenData(data.filter, new NetworkContextClearTrustTokenDataResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_TRUST_TOKEN_SESSION_ONLY_DATA_ORDINAL: {

                        NetworkContextClearTrustTokenSessionOnlyDataParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearTrustTokenSessionOnlyData(new NetworkContextClearTrustTokenSessionOnlyDataResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case GET_STORED_TRUST_TOKEN_COUNTS_ORDINAL: {

                        NetworkContextGetStoredTrustTokenCountsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getStoredTrustTokenCounts(new NetworkContextGetStoredTrustTokenCountsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case DELETE_STORED_TRUST_TOKENS_ORDINAL: {

                        NetworkContextDeleteStoredTrustTokensParams data = NetworkContextDeleteStoredTrustTokensParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteStoredTrustTokens(data.issuer, new NetworkContextDeleteStoredTrustTokensResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_NETWORKING_HISTORY_BETWEEN_ORDINAL: {

                        NetworkContextClearNetworkingHistoryBetweenParams data = NetworkContextClearNetworkingHistoryBetweenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearNetworkingHistoryBetween(data.startTime, data.endTime, new NetworkContextClearNetworkingHistoryBetweenResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_HTTP_CACHE_ORDINAL: {

                        NetworkContextClearHttpCacheParams data = NetworkContextClearHttpCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearHttpCache(data.startTime, data.endTime, data.filter, new NetworkContextClearHttpCacheResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case COMPUTE_HTTP_CACHE_SIZE_ORDINAL: {

                        NetworkContextComputeHttpCacheSizeParams data = NetworkContextComputeHttpCacheSizeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().computeHttpCacheSize(data.startTime, data.endTime, new NetworkContextComputeHttpCacheSizeResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_HOST_CACHE_ORDINAL: {

                        NetworkContextClearHostCacheParams data = NetworkContextClearHostCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearHostCache(data.filter, new NetworkContextClearHostCacheResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_HTTP_AUTH_CACHE_ORDINAL: {

                        NetworkContextClearHttpAuthCacheParams data = NetworkContextClearHttpAuthCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearHttpAuthCache(data.startTime, data.endTime, data.filter, new NetworkContextClearHttpAuthCacheResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_CORS_PREFLIGHT_CACHE_ORDINAL: {

                        NetworkContextClearCorsPreflightCacheParams data = NetworkContextClearCorsPreflightCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearCorsPreflightCache(data.filter, new NetworkContextClearCorsPreflightCacheResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_REPORTING_CACHE_REPORTS_ORDINAL: {

                        NetworkContextClearReportingCacheReportsParams data = NetworkContextClearReportingCacheReportsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearReportingCacheReports(data.filter, new NetworkContextClearReportingCacheReportsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_REPORTING_CACHE_CLIENTS_ORDINAL: {

                        NetworkContextClearReportingCacheClientsParams data = NetworkContextClearReportingCacheClientsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearReportingCacheClients(data.filter, new NetworkContextClearReportingCacheClientsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_NETWORK_ERROR_LOGGING_ORDINAL: {

                        NetworkContextClearNetworkErrorLoggingParams data = NetworkContextClearNetworkErrorLoggingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearNetworkErrorLogging(data.filter, new NetworkContextClearNetworkErrorLoggingResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_DOMAIN_RELIABILITY_ORDINAL: {

                        NetworkContextClearDomainReliabilityParams data = NetworkContextClearDomainReliabilityParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearDomainReliability(data.filter, data.mode, new NetworkContextClearDomainReliabilityResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_SHARED_DICTIONARY_CACHE_ORDINAL: {

                        NetworkContextClearSharedDictionaryCacheParams data = NetworkContextClearSharedDictionaryCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearSharedDictionaryCache(data.startTime, data.endTime, data.filter, new NetworkContextClearSharedDictionaryCacheResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_SHARED_DICTIONARY_CACHE_FOR_ISOLATION_KEY_ORDINAL: {

                        NetworkContextClearSharedDictionaryCacheForIsolationKeyParams data = NetworkContextClearSharedDictionaryCacheForIsolationKeyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearSharedDictionaryCacheForIsolationKey(data.isolationKey, new NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLOSE_ALL_CONNECTIONS_ORDINAL: {

                        NetworkContextCloseAllConnectionsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().closeAllConnections(new NetworkContextCloseAllConnectionsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLOSE_IDLE_CONNECTIONS_ORDINAL: {

                        NetworkContextCloseIdleConnectionsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().closeIdleConnections(new NetworkContextCloseIdleConnectionsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CREATE_RESTRICTED_UDP_SOCKET_ORDINAL: {

                        NetworkContextCreateRestrictedUdpSocketParams data = NetworkContextCreateRestrictedUdpSocketParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createRestrictedUdpSocket(data.addr, data.mode, data.trafficAnnotation, data.params, data.receiver, data.listener, new NetworkContextCreateRestrictedUdpSocketResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CREATE_TCP_SERVER_SOCKET_ORDINAL: {

                        NetworkContextCreateTcpServerSocketParams data = NetworkContextCreateTcpServerSocketParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createTcpServerSocket(data.localAddr, data.options, data.trafficAnnotation, data.socket, new NetworkContextCreateTcpServerSocketResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CREATE_TCP_CONNECTED_SOCKET_ORDINAL: {

                        NetworkContextCreateTcpConnectedSocketParams data = NetworkContextCreateTcpConnectedSocketParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createTcpConnectedSocket(data.localAddr, data.remoteAddrList, data.tcpConnectedSocketOptions, data.trafficAnnotation, data.socket, data.observer, new NetworkContextCreateTcpConnectedSocketResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CREATE_TCP_BOUND_SOCKET_ORDINAL: {

                        NetworkContextCreateTcpBoundSocketParams data = NetworkContextCreateTcpBoundSocketParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createTcpBoundSocket(data.localAddr, data.trafficAnnotation, data.socket, new NetworkContextCreateTcpBoundSocketResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case FORCE_RELOAD_PROXY_CONFIG_ORDINAL: {

                        NetworkContextForceReloadProxyConfigParams.deserialize(messageWithHeader.getPayload());

                        getImpl().forceReloadProxyConfig(new NetworkContextForceReloadProxyConfigResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case CLEAR_BAD_PROXIES_CACHE_ORDINAL: {

                        NetworkContextClearBadProxiesCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearBadProxiesCache(new NetworkContextClearBadProxiesCacheResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case VERIFY_CERT_FOR_SIGNED_EXCHANGE_ORDINAL: {

                        NetworkContextVerifyCertForSignedExchangeParams data = NetworkContextVerifyCertForSignedExchangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().verifyCertForSignedExchange(data.certificate, data.url, data.networkAnonymizationKey, data.ocspResponse, data.sctList, new NetworkContextVerifyCertForSignedExchangeResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case VERIFY_IP_PROTECTION_CONFIG_GETTER_FOR_TESTING_ORDINAL: {

                        NetworkContextVerifyIpProtectionConfigGetterForTestingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().verifyIpProtectionConfigGetterForTesting(new NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case ADD_HSTS_ORDINAL: {

                        NetworkContextAddHstsParams data = NetworkContextAddHstsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addHsts(data.host, data.expiry, data.includeSubdomains, new NetworkContextAddHstsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case IS_HSTS_ACTIVE_FOR_HOST_ORDINAL: {

                        NetworkContextIsHstsActiveForHostParams data = NetworkContextIsHstsActiveForHostParams.deserialize(messageWithHeader.getPayload());

                        getImpl().isHstsActiveForHost(data.host, new NetworkContextIsHstsActiveForHostResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case GET_HSTS_STATE_ORDINAL: {

                        NetworkContextGetHstsStateParams data = NetworkContextGetHstsStateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getHstsState(data.domain, new NetworkContextGetHstsStateResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case SET_CORS_ORIGIN_ACCESS_LISTS_FOR_ORIGIN_ORDINAL: {

                        NetworkContextSetCorsOriginAccessListsForOriginParams data = NetworkContextSetCorsOriginAccessListsForOriginParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setCorsOriginAccessListsForOrigin(data.sourceOrigin, data.allowPatterns, data.blockPatterns, new NetworkContextSetCorsOriginAccessListsForOriginResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case DELETE_DYNAMIC_DATA_FOR_HOST_ORDINAL: {

                        NetworkContextDeleteDynamicDataForHostParams data = NetworkContextDeleteDynamicDataForHostParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteDynamicDataForHost(data.host, new NetworkContextDeleteDynamicDataForHostResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case SAVE_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL: {

                        NetworkContextSaveHttpAuthCacheProxyEntriesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().saveHttpAuthCacheProxyEntries(new NetworkContextSaveHttpAuthCacheProxyEntriesResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case LOAD_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL: {

                        NetworkContextLoadHttpAuthCacheProxyEntriesParams data = NetworkContextLoadHttpAuthCacheProxyEntriesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().loadHttpAuthCacheProxyEntries(data.cacheKey, new NetworkContextLoadHttpAuthCacheProxyEntriesResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case ADD_AUTH_CACHE_ENTRY_ORDINAL: {

                        NetworkContextAddAuthCacheEntryParams data = NetworkContextAddAuthCacheEntryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addAuthCacheEntry(data.challenge, data.networkAnonymizationKey, data.credentials, new NetworkContextAddAuthCacheEntryResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case LOOKUP_SERVER_BASIC_AUTH_CREDENTIALS_ORDINAL: {

                        NetworkContextLookupServerBasicAuthCredentialsParams data = NetworkContextLookupServerBasicAuthCredentialsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().lookupServerBasicAuthCredentials(data.url, data.networkAnonymizationKey, new NetworkContextLookupServerBasicAuthCredentialsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case ENABLE_STATIC_KEY_PINNING_FOR_TESTING_ORDINAL: {

                        NetworkContextEnableStaticKeyPinningForTestingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enableStaticKeyPinningForTesting(new NetworkContextEnableStaticKeyPinningForTestingResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case VERIFY_CERTIFICATE_FOR_TESTING_ORDINAL: {

                        NetworkContextVerifyCertificateForTestingParams data = NetworkContextVerifyCertificateForTestingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().verifyCertificateForTesting(data.certificate, data.hostname, data.ocspResponse, data.sctList, new NetworkContextVerifyCertificateForTestingResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case ADD_DOMAIN_RELIABILITY_CONTEXT_FOR_TESTING_ORDINAL: {

                        NetworkContextAddDomainReliabilityContextForTestingParams data = NetworkContextAddDomainReliabilityContextForTestingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addDomainReliabilityContextForTesting(data.origin, data.uploadUrl, new NetworkContextAddDomainReliabilityContextForTestingResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case FORCE_DOMAIN_RELIABILITY_UPLOADS_FOR_TESTING_ORDINAL: {

                        NetworkContextForceDomainReliabilityUploadsForTestingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().forceDomainReliabilityUploadsForTesting(new NetworkContextForceDomainReliabilityUploadsForTestingResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case GET_SHARED_DICTIONARY_USAGE_INFO_ORDINAL: {

                        NetworkContextGetSharedDictionaryUsageInfoParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getSharedDictionaryUsageInfo(new NetworkContextGetSharedDictionaryUsageInfoResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case GET_SHARED_DICTIONARY_INFO_ORDINAL: {

                        NetworkContextGetSharedDictionaryInfoParams data = NetworkContextGetSharedDictionaryInfoParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getSharedDictionaryInfo(data.isolationKey, new NetworkContextGetSharedDictionaryInfoResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    case GET_SHARED_DICTIONARY_ORIGINS_BETWEEN_ORDINAL: {

                        NetworkContextGetSharedDictionaryOriginsBetweenParams data = NetworkContextGetSharedDictionaryOriginsBetweenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getSharedDictionaryOriginsBetween(data.startTime, data.endTime, new NetworkContextGetSharedDictionaryOriginsBetweenResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e);
                return false;
            }
        }
    }


    static final class NetworkContextSetClientParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NetworkContextClient client;

        private NetworkContextSetClientParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetClientParams() {
            this(0);
        }

        public static NetworkContextSetClientParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetClientParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetClientParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetClientParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetClientParams(elementsOrVersion);
                {

                    result.client = decoder0.readServiceInterface(8, false, NetworkContextClient.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.client, 8, false, NetworkContextClient.MANAGER);
        }
    }


    static final class NetworkContextCreateUrlLoaderFactoryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<UrlLoaderFactory> urlLoaderFactory;
        public UrlLoaderFactoryParams params;

        private NetworkContextCreateUrlLoaderFactoryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateUrlLoaderFactoryParams() {
            this(0);
        }

        public static NetworkContextCreateUrlLoaderFactoryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateUrlLoaderFactoryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateUrlLoaderFactoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateUrlLoaderFactoryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateUrlLoaderFactoryParams(elementsOrVersion);
                {

                    result.urlLoaderFactory = decoder0.readInterfaceRequest(8, false);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.params = UrlLoaderFactoryParams.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.urlLoaderFactory, 8, false);

            encoder0.encode(this.params, 16, false);
        }
    }


    static final class NetworkContextResetUrlLoaderFactoriesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextResetUrlLoaderFactoriesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextResetUrlLoaderFactoriesParams() {
            this(0);
        }

        public static NetworkContextResetUrlLoaderFactoriesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextResetUrlLoaderFactoriesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextResetUrlLoaderFactoriesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextResetUrlLoaderFactoriesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextResetUrlLoaderFactoriesParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextGetViaObliviousHttpParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ObliviousHttpRequest request;
        public ObliviousHttpClient client;

        private NetworkContextGetViaObliviousHttpParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetViaObliviousHttpParams() {
            this(0);
        }

        public static NetworkContextGetViaObliviousHttpParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetViaObliviousHttpParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetViaObliviousHttpParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetViaObliviousHttpParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetViaObliviousHttpParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.request = ObliviousHttpRequest.decode(decoder1);
                }
                {

                    result.client = decoder0.readServiceInterface(16, false, ObliviousHttpClient.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.request, 8, false);

            encoder0.encode(this.client, 16, false, ObliviousHttpClient.MANAGER);
        }
    }


    static final class NetworkContextGetCookieManagerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<CookieManager> cookieManager;

        private NetworkContextGetCookieManagerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetCookieManagerParams() {
            this(0);
        }

        public static NetworkContextGetCookieManagerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetCookieManagerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetCookieManagerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetCookieManagerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetCookieManagerParams(elementsOrVersion);
                {

                    result.cookieManager = decoder0.readInterfaceRequest(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.cookieManager, 8, false);
        }
    }


    static final class NetworkContextGetRestrictedCookieManagerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<RestrictedCookieManager> restrictedCookieManager;
        public int role;
        public org.chromium.url.internal.mojom.Origin origin;
        public IsolationInfo isolationInfo;
        public CookieSettingOverrides cookieSettingOverrides;
        public CookieAccessObserver cookieObserver;

        private NetworkContextGetRestrictedCookieManagerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetRestrictedCookieManagerParams() {
            this(0);
        }

        public static NetworkContextGetRestrictedCookieManagerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetRestrictedCookieManagerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetRestrictedCookieManagerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetRestrictedCookieManagerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetRestrictedCookieManagerParams(elementsOrVersion);
                {

                    result.restrictedCookieManager = decoder0.readInterfaceRequest(8, false);
                }
                {

                    result.role = decoder0.readInt(12);
                    RestrictedCookieManagerRole.validate(result.role);
                    result.role = RestrictedCookieManagerRole.toKnownValue(result.role);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.isolationInfo = IsolationInfo.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.cookieSettingOverrides = CookieSettingOverrides.decode(decoder1);
                }
                {

                    result.cookieObserver = decoder0.readServiceInterface(40, true, CookieAccessObserver.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.restrictedCookieManager, 8, false);

            encoder0.encode(this.role, 12);

            encoder0.encode(this.origin, 16, false);

            encoder0.encode(this.isolationInfo, 24, false);

            encoder0.encode(this.cookieSettingOverrides, 32, false);

            encoder0.encode(this.cookieObserver, 40, true, CookieAccessObserver.MANAGER);
        }
    }


    static final class NetworkContextGetTrustTokenQueryAnswererParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<TrustTokenQueryAnswerer> trustTokenQueryAnswerer;
        public org.chromium.url.internal.mojom.Origin topFrameOrigin;

        private NetworkContextGetTrustTokenQueryAnswererParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetTrustTokenQueryAnswererParams() {
            this(0);
        }

        public static NetworkContextGetTrustTokenQueryAnswererParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetTrustTokenQueryAnswererParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetTrustTokenQueryAnswererParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetTrustTokenQueryAnswererParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetTrustTokenQueryAnswererParams(elementsOrVersion);
                {

                    result.trustTokenQueryAnswerer = decoder0.readInterfaceRequest(8, false);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.topFrameOrigin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.trustTokenQueryAnswerer, 8, false);

            encoder0.encode(this.topFrameOrigin, 16, false);
        }
    }


    static final class NetworkContextClearTrustTokenDataParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ClearDataFilter filter;

        private NetworkContextClearTrustTokenDataParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearTrustTokenDataParams() {
            this(0);
        }

        public static NetworkContextClearTrustTokenDataParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearTrustTokenDataParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearTrustTokenDataParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearTrustTokenDataParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearTrustTokenDataParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.filter, 8, true);
        }
    }


    static final class NetworkContextClearTrustTokenDataResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearTrustTokenDataResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearTrustTokenDataResponseParams() {
            this(0);
        }

        public static NetworkContextClearTrustTokenDataResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearTrustTokenDataResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearTrustTokenDataResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearTrustTokenDataResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearTrustTokenDataResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearTrustTokenDataResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearTrustTokenData_Response mCallback;

        NetworkContextClearTrustTokenDataResponseParamsForwardToCallback(NetworkContext.ClearTrustTokenData_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_TRUST_TOKEN_DATA_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearTrustTokenDataResponseParamsProxyToResponder implements NetworkContext.ClearTrustTokenData_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearTrustTokenDataResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearTrustTokenDataResponseParams _response = new NetworkContextClearTrustTokenDataResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_TRUST_TOKEN_DATA_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearTrustTokenSessionOnlyDataParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearTrustTokenSessionOnlyDataParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearTrustTokenSessionOnlyDataParams() {
            this(0);
        }

        public static NetworkContextClearTrustTokenSessionOnlyDataParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearTrustTokenSessionOnlyDataParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearTrustTokenSessionOnlyDataParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearTrustTokenSessionOnlyDataParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearTrustTokenSessionOnlyDataParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextClearTrustTokenSessionOnlyDataResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean anyDataDeleted;

        private NetworkContextClearTrustTokenSessionOnlyDataResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearTrustTokenSessionOnlyDataResponseParams() {
            this(0);
        }

        public static NetworkContextClearTrustTokenSessionOnlyDataResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearTrustTokenSessionOnlyDataResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearTrustTokenSessionOnlyDataResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearTrustTokenSessionOnlyDataResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearTrustTokenSessionOnlyDataResponseParams(elementsOrVersion);
                {

                    result.anyDataDeleted = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.anyDataDeleted, 8, 0);
        }
    }

    static class NetworkContextClearTrustTokenSessionOnlyDataResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearTrustTokenSessionOnlyData_Response mCallback;

        NetworkContextClearTrustTokenSessionOnlyDataResponseParamsForwardToCallback(NetworkContext.ClearTrustTokenSessionOnlyData_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_TRUST_TOKEN_SESSION_ONLY_DATA_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextClearTrustTokenSessionOnlyDataResponseParams response = NetworkContextClearTrustTokenSessionOnlyDataResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.anyDataDeleted);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearTrustTokenSessionOnlyDataResponseParamsProxyToResponder implements NetworkContext.ClearTrustTokenSessionOnlyData_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearTrustTokenSessionOnlyDataResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean anyDataDeleted) {
            NetworkContextClearTrustTokenSessionOnlyDataResponseParams _response = new NetworkContextClearTrustTokenSessionOnlyDataResponseParams();

            _response.anyDataDeleted = anyDataDeleted;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_TRUST_TOKEN_SESSION_ONLY_DATA_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextGetStoredTrustTokenCountsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextGetStoredTrustTokenCountsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetStoredTrustTokenCountsParams() {
            this(0);
        }

        public static NetworkContextGetStoredTrustTokenCountsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetStoredTrustTokenCountsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetStoredTrustTokenCountsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetStoredTrustTokenCountsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetStoredTrustTokenCountsParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextGetStoredTrustTokenCountsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public StoredTrustTokensForIssuer[] tokens;

        private NetworkContextGetStoredTrustTokenCountsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetStoredTrustTokenCountsResponseParams() {
            this(0);
        }

        public static NetworkContextGetStoredTrustTokenCountsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetStoredTrustTokenCountsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetStoredTrustTokenCountsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetStoredTrustTokenCountsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetStoredTrustTokenCountsResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.tokens = new StoredTrustTokensForIssuer[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.tokens[i1] = StoredTrustTokensForIssuer.decode(decoder2);
                        }
                    }
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            if (this.tokens == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.tokens.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.tokens.length; ++i0) {

                    encoder1.encode(this.tokens[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NetworkContextGetStoredTrustTokenCountsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.GetStoredTrustTokenCounts_Response mCallback;

        NetworkContextGetStoredTrustTokenCountsResponseParamsForwardToCallback(NetworkContext.GetStoredTrustTokenCounts_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_STORED_TRUST_TOKEN_COUNTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextGetStoredTrustTokenCountsResponseParams response = NetworkContextGetStoredTrustTokenCountsResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.tokens);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextGetStoredTrustTokenCountsResponseParamsProxyToResponder implements NetworkContext.GetStoredTrustTokenCounts_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextGetStoredTrustTokenCountsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(StoredTrustTokensForIssuer[] tokens) {
            NetworkContextGetStoredTrustTokenCountsResponseParams _response = new NetworkContextGetStoredTrustTokenCountsResponseParams();

            _response.tokens = tokens;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(GET_STORED_TRUST_TOKEN_COUNTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextDeleteStoredTrustTokensParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin issuer;

        private NetworkContextDeleteStoredTrustTokensParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextDeleteStoredTrustTokensParams() {
            this(0);
        }

        public static NetworkContextDeleteStoredTrustTokensParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextDeleteStoredTrustTokensParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextDeleteStoredTrustTokensParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextDeleteStoredTrustTokensParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextDeleteStoredTrustTokensParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.issuer = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.issuer, 8, false);
        }
    }


    static final class NetworkContextDeleteStoredTrustTokensResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int status;

        private NetworkContextDeleteStoredTrustTokensResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextDeleteStoredTrustTokensResponseParams() {
            this(0);
        }

        public static NetworkContextDeleteStoredTrustTokensResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextDeleteStoredTrustTokensResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextDeleteStoredTrustTokensResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextDeleteStoredTrustTokensResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextDeleteStoredTrustTokensResponseParams(elementsOrVersion);
                {

                    result.status = decoder0.readInt(8);
                    DeleteStoredTrustTokensStatus.validate(result.status);
                    result.status = DeleteStoredTrustTokensStatus.toKnownValue(result.status);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.status, 8);
        }
    }

    static class NetworkContextDeleteStoredTrustTokensResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.DeleteStoredTrustTokens_Response mCallback;

        NetworkContextDeleteStoredTrustTokensResponseParamsForwardToCallback(NetworkContext.DeleteStoredTrustTokens_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DELETE_STORED_TRUST_TOKENS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextDeleteStoredTrustTokensResponseParams response = NetworkContextDeleteStoredTrustTokensResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.status);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextDeleteStoredTrustTokensResponseParamsProxyToResponder implements NetworkContext.DeleteStoredTrustTokens_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextDeleteStoredTrustTokensResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer status) {
            NetworkContextDeleteStoredTrustTokensResponseParams _response = new NetworkContextDeleteStoredTrustTokensResponseParams();

            _response.status = status;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(DELETE_STORED_TRUST_TOKENS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextSetBlockTrustTokensParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean block;

        private NetworkContextSetBlockTrustTokensParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetBlockTrustTokensParams() {
            this(0);
        }

        public static NetworkContextSetBlockTrustTokensParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetBlockTrustTokensParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetBlockTrustTokensParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetBlockTrustTokensParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetBlockTrustTokensParams(elementsOrVersion);
                {

                    result.block = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.block, 8, 0);
        }
    }


    static final class NetworkContextClearNetworkingHistoryBetweenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.Time startTime;
        public org.chromium.mojo_base.mojom.Time endTime;

        private NetworkContextClearNetworkingHistoryBetweenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearNetworkingHistoryBetweenParams() {
            this(0);
        }

        public static NetworkContextClearNetworkingHistoryBetweenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearNetworkingHistoryBetweenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearNetworkingHistoryBetweenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearNetworkingHistoryBetweenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearNetworkingHistoryBetweenParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.startTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.endTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.startTime, 8, false);

            encoder0.encode(this.endTime, 16, false);
        }
    }


    static final class NetworkContextClearNetworkingHistoryBetweenResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearNetworkingHistoryBetweenResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearNetworkingHistoryBetweenResponseParams() {
            this(0);
        }

        public static NetworkContextClearNetworkingHistoryBetweenResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearNetworkingHistoryBetweenResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearNetworkingHistoryBetweenResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearNetworkingHistoryBetweenResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearNetworkingHistoryBetweenResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearNetworkingHistoryBetweenResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearNetworkingHistoryBetween_Response mCallback;

        NetworkContextClearNetworkingHistoryBetweenResponseParamsForwardToCallback(NetworkContext.ClearNetworkingHistoryBetween_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_NETWORKING_HISTORY_BETWEEN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearNetworkingHistoryBetweenResponseParamsProxyToResponder implements NetworkContext.ClearNetworkingHistoryBetween_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearNetworkingHistoryBetweenResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearNetworkingHistoryBetweenResponseParams _response = new NetworkContextClearNetworkingHistoryBetweenResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_NETWORKING_HISTORY_BETWEEN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearHttpCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.Time startTime;
        public org.chromium.mojo_base.mojom.Time endTime;
        public ClearDataFilter filter;

        private NetworkContextClearHttpCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearHttpCacheParams() {
            this(0);
        }

        public static NetworkContextClearHttpCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearHttpCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearHttpCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearHttpCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearHttpCacheParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.startTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.endTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.startTime, 8, false);

            encoder0.encode(this.endTime, 16, false);

            encoder0.encode(this.filter, 24, true);
        }
    }


    static final class NetworkContextClearHttpCacheResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearHttpCacheResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearHttpCacheResponseParams() {
            this(0);
        }

        public static NetworkContextClearHttpCacheResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearHttpCacheResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearHttpCacheResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearHttpCacheResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearHttpCacheResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearHttpCacheResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearHttpCache_Response mCallback;

        NetworkContextClearHttpCacheResponseParamsForwardToCallback(NetworkContext.ClearHttpCache_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_HTTP_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearHttpCacheResponseParamsProxyToResponder implements NetworkContext.ClearHttpCache_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearHttpCacheResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearHttpCacheResponseParams _response = new NetworkContextClearHttpCacheResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_HTTP_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextComputeHttpCacheSizeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.Time startTime;
        public org.chromium.mojo_base.mojom.Time endTime;

        private NetworkContextComputeHttpCacheSizeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextComputeHttpCacheSizeParams() {
            this(0);
        }

        public static NetworkContextComputeHttpCacheSizeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextComputeHttpCacheSizeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextComputeHttpCacheSizeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextComputeHttpCacheSizeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextComputeHttpCacheSizeParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.startTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.endTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.startTime, 8, false);

            encoder0.encode(this.endTime, 16, false);
        }
    }


    static final class NetworkContextComputeHttpCacheSizeResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isUpperBound;
        public long sizeOrError;

        private NetworkContextComputeHttpCacheSizeResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextComputeHttpCacheSizeResponseParams() {
            this(0);
        }

        public static NetworkContextComputeHttpCacheSizeResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextComputeHttpCacheSizeResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextComputeHttpCacheSizeResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextComputeHttpCacheSizeResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextComputeHttpCacheSizeResponseParams(elementsOrVersion);
                {

                    result.isUpperBound = decoder0.readBoolean(8, 0);
                }
                {

                    result.sizeOrError = decoder0.readLong(16);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.isUpperBound, 8, 0);

            encoder0.encode(this.sizeOrError, 16);
        }
    }

    static class NetworkContextComputeHttpCacheSizeResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ComputeHttpCacheSize_Response mCallback;

        NetworkContextComputeHttpCacheSizeResponseParamsForwardToCallback(NetworkContext.ComputeHttpCacheSize_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(COMPUTE_HTTP_CACHE_SIZE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextComputeHttpCacheSizeResponseParams response = NetworkContextComputeHttpCacheSizeResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.isUpperBound, response.sizeOrError);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextComputeHttpCacheSizeResponseParamsProxyToResponder implements NetworkContext.ComputeHttpCacheSize_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextComputeHttpCacheSizeResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean isUpperBound, Long sizeOrError) {
            NetworkContextComputeHttpCacheSizeResponseParams _response = new NetworkContextComputeHttpCacheSizeResponseParams();

            _response.isUpperBound = isUpperBound;

            _response.sizeOrError = sizeOrError;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(COMPUTE_HTTP_CACHE_SIZE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextNotifyExternalCacheHitParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public String httpMethod;
        public NetworkIsolationKey key;
        public boolean isSubframeDocumentResource;
        public boolean includeCredentials;

        private NetworkContextNotifyExternalCacheHitParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextNotifyExternalCacheHitParams() {
            this(0);
        }

        public static NetworkContextNotifyExternalCacheHitParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextNotifyExternalCacheHitParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextNotifyExternalCacheHitParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextNotifyExternalCacheHitParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextNotifyExternalCacheHitParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {

                    result.httpMethod = decoder0.readString(16, false);
                }
                {

                    result.key = NetworkIsolationKey.decode(decoder0, 24);
                }
                {

                    result.isSubframeDocumentResource = decoder0.readBoolean(40, 0);
                }
                {

                    result.includeCredentials = decoder0.readBoolean(40, 1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.url, 8, false);

            encoder0.encode(this.httpMethod, 16, false);

            encoder0.encode(this.key, 24, false);

            encoder0.encode(this.isSubframeDocumentResource, 40, 0);

            encoder0.encode(this.includeCredentials, 40, 1);
        }
    }


    static final class NetworkContextClearHostCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ClearDataFilter filter;

        private NetworkContextClearHostCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearHostCacheParams() {
            this(0);
        }

        public static NetworkContextClearHostCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearHostCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearHostCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearHostCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearHostCacheParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.filter, 8, true);
        }
    }


    static final class NetworkContextClearHostCacheResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearHostCacheResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearHostCacheResponseParams() {
            this(0);
        }

        public static NetworkContextClearHostCacheResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearHostCacheResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearHostCacheResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearHostCacheResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearHostCacheResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearHostCacheResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearHostCache_Response mCallback;

        NetworkContextClearHostCacheResponseParamsForwardToCallback(NetworkContext.ClearHostCache_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_HOST_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearHostCacheResponseParamsProxyToResponder implements NetworkContext.ClearHostCache_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearHostCacheResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearHostCacheResponseParams _response = new NetworkContextClearHostCacheResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_HOST_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearHttpAuthCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.Time startTime;
        public org.chromium.mojo_base.mojom.Time endTime;
        public ClearDataFilter filter;

        private NetworkContextClearHttpAuthCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearHttpAuthCacheParams() {
            this(0);
        }

        public static NetworkContextClearHttpAuthCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearHttpAuthCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearHttpAuthCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearHttpAuthCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearHttpAuthCacheParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.startTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.endTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.startTime, 8, false);

            encoder0.encode(this.endTime, 16, false);

            encoder0.encode(this.filter, 24, true);
        }
    }


    static final class NetworkContextClearHttpAuthCacheResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearHttpAuthCacheResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearHttpAuthCacheResponseParams() {
            this(0);
        }

        public static NetworkContextClearHttpAuthCacheResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearHttpAuthCacheResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearHttpAuthCacheResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearHttpAuthCacheResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearHttpAuthCacheResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearHttpAuthCacheResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearHttpAuthCache_Response mCallback;

        NetworkContextClearHttpAuthCacheResponseParamsForwardToCallback(NetworkContext.ClearHttpAuthCache_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_HTTP_AUTH_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearHttpAuthCacheResponseParamsProxyToResponder implements NetworkContext.ClearHttpAuthCache_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearHttpAuthCacheResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearHttpAuthCacheResponseParams _response = new NetworkContextClearHttpAuthCacheResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_HTTP_AUTH_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearCorsPreflightCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ClearDataFilter filter;

        private NetworkContextClearCorsPreflightCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearCorsPreflightCacheParams() {
            this(0);
        }

        public static NetworkContextClearCorsPreflightCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearCorsPreflightCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearCorsPreflightCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearCorsPreflightCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearCorsPreflightCacheParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.filter, 8, true);
        }
    }


    static final class NetworkContextClearCorsPreflightCacheResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearCorsPreflightCacheResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearCorsPreflightCacheResponseParams() {
            this(0);
        }

        public static NetworkContextClearCorsPreflightCacheResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearCorsPreflightCacheResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearCorsPreflightCacheResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearCorsPreflightCacheResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearCorsPreflightCacheResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearCorsPreflightCacheResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearCorsPreflightCache_Response mCallback;

        NetworkContextClearCorsPreflightCacheResponseParamsForwardToCallback(NetworkContext.ClearCorsPreflightCache_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_CORS_PREFLIGHT_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearCorsPreflightCacheResponseParamsProxyToResponder implements NetworkContext.ClearCorsPreflightCache_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearCorsPreflightCacheResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearCorsPreflightCacheResponseParams _response = new NetworkContextClearCorsPreflightCacheResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_CORS_PREFLIGHT_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearReportingCacheReportsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ClearDataFilter filter;

        private NetworkContextClearReportingCacheReportsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearReportingCacheReportsParams() {
            this(0);
        }

        public static NetworkContextClearReportingCacheReportsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearReportingCacheReportsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearReportingCacheReportsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearReportingCacheReportsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearReportingCacheReportsParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.filter, 8, true);
        }
    }


    static final class NetworkContextClearReportingCacheReportsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearReportingCacheReportsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearReportingCacheReportsResponseParams() {
            this(0);
        }

        public static NetworkContextClearReportingCacheReportsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearReportingCacheReportsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearReportingCacheReportsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearReportingCacheReportsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearReportingCacheReportsResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearReportingCacheReportsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearReportingCacheReports_Response mCallback;

        NetworkContextClearReportingCacheReportsResponseParamsForwardToCallback(NetworkContext.ClearReportingCacheReports_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_REPORTING_CACHE_REPORTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearReportingCacheReportsResponseParamsProxyToResponder implements NetworkContext.ClearReportingCacheReports_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearReportingCacheReportsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearReportingCacheReportsResponseParams _response = new NetworkContextClearReportingCacheReportsResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_REPORTING_CACHE_REPORTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearReportingCacheClientsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ClearDataFilter filter;

        private NetworkContextClearReportingCacheClientsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearReportingCacheClientsParams() {
            this(0);
        }

        public static NetworkContextClearReportingCacheClientsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearReportingCacheClientsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearReportingCacheClientsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearReportingCacheClientsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearReportingCacheClientsParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.filter, 8, true);
        }
    }


    static final class NetworkContextClearReportingCacheClientsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearReportingCacheClientsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearReportingCacheClientsResponseParams() {
            this(0);
        }

        public static NetworkContextClearReportingCacheClientsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearReportingCacheClientsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearReportingCacheClientsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearReportingCacheClientsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearReportingCacheClientsResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearReportingCacheClientsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearReportingCacheClients_Response mCallback;

        NetworkContextClearReportingCacheClientsResponseParamsForwardToCallback(NetworkContext.ClearReportingCacheClients_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_REPORTING_CACHE_CLIENTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearReportingCacheClientsResponseParamsProxyToResponder implements NetworkContext.ClearReportingCacheClients_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearReportingCacheClientsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearReportingCacheClientsResponseParams _response = new NetworkContextClearReportingCacheClientsResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_REPORTING_CACHE_CLIENTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearNetworkErrorLoggingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ClearDataFilter filter;

        private NetworkContextClearNetworkErrorLoggingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearNetworkErrorLoggingParams() {
            this(0);
        }

        public static NetworkContextClearNetworkErrorLoggingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearNetworkErrorLoggingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearNetworkErrorLoggingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearNetworkErrorLoggingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearNetworkErrorLoggingParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.filter, 8, true);
        }
    }


    static final class NetworkContextClearNetworkErrorLoggingResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearNetworkErrorLoggingResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearNetworkErrorLoggingResponseParams() {
            this(0);
        }

        public static NetworkContextClearNetworkErrorLoggingResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearNetworkErrorLoggingResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearNetworkErrorLoggingResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearNetworkErrorLoggingResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearNetworkErrorLoggingResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearNetworkErrorLoggingResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearNetworkErrorLogging_Response mCallback;

        NetworkContextClearNetworkErrorLoggingResponseParamsForwardToCallback(NetworkContext.ClearNetworkErrorLogging_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_NETWORK_ERROR_LOGGING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearNetworkErrorLoggingResponseParamsProxyToResponder implements NetworkContext.ClearNetworkErrorLogging_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearNetworkErrorLoggingResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearNetworkErrorLoggingResponseParams _response = new NetworkContextClearNetworkErrorLoggingResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_NETWORK_ERROR_LOGGING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearDomainReliabilityParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ClearDataFilter filter;
        public int mode;

        private NetworkContextClearDomainReliabilityParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearDomainReliabilityParams() {
            this(0);
        }

        public static NetworkContextClearDomainReliabilityParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearDomainReliabilityParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearDomainReliabilityParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearDomainReliabilityParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearDomainReliabilityParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }
                {

                    result.mode = decoder0.readInt(16);
                    NetworkContext.DomainReliabilityClearMode.validate(result.mode);
                    result.mode = NetworkContext.DomainReliabilityClearMode.toKnownValue(result.mode);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.filter, 8, true);

            encoder0.encode(this.mode, 16);
        }
    }


    static final class NetworkContextClearDomainReliabilityResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearDomainReliabilityResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearDomainReliabilityResponseParams() {
            this(0);
        }

        public static NetworkContextClearDomainReliabilityResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearDomainReliabilityResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearDomainReliabilityResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearDomainReliabilityResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearDomainReliabilityResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearDomainReliabilityResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearDomainReliability_Response mCallback;

        NetworkContextClearDomainReliabilityResponseParamsForwardToCallback(NetworkContext.ClearDomainReliability_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_DOMAIN_RELIABILITY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearDomainReliabilityResponseParamsProxyToResponder implements NetworkContext.ClearDomainReliability_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearDomainReliabilityResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearDomainReliabilityResponseParams _response = new NetworkContextClearDomainReliabilityResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_DOMAIN_RELIABILITY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearSharedDictionaryCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.Time startTime;
        public org.chromium.mojo_base.mojom.Time endTime;
        public ClearDataFilter filter;

        private NetworkContextClearSharedDictionaryCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearSharedDictionaryCacheParams() {
            this(0);
        }

        public static NetworkContextClearSharedDictionaryCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearSharedDictionaryCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearSharedDictionaryCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearSharedDictionaryCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearSharedDictionaryCacheParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.startTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.endTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.filter = ClearDataFilter.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.startTime, 8, false);

            encoder0.encode(this.endTime, 16, false);

            encoder0.encode(this.filter, 24, true);
        }
    }


    static final class NetworkContextClearSharedDictionaryCacheResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearSharedDictionaryCacheResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearSharedDictionaryCacheResponseParams() {
            this(0);
        }

        public static NetworkContextClearSharedDictionaryCacheResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearSharedDictionaryCacheResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearSharedDictionaryCacheResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearSharedDictionaryCacheResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearSharedDictionaryCacheResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearSharedDictionaryCacheResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearSharedDictionaryCache_Response mCallback;

        NetworkContextClearSharedDictionaryCacheResponseParamsForwardToCallback(NetworkContext.ClearSharedDictionaryCache_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_SHARED_DICTIONARY_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearSharedDictionaryCacheResponseParamsProxyToResponder implements NetworkContext.ClearSharedDictionaryCache_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearSharedDictionaryCacheResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearSharedDictionaryCacheResponseParams _response = new NetworkContextClearSharedDictionaryCacheResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_SHARED_DICTIONARY_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearSharedDictionaryCacheForIsolationKeyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SharedDictionaryIsolationKey isolationKey;

        private NetworkContextClearSharedDictionaryCacheForIsolationKeyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearSharedDictionaryCacheForIsolationKeyParams() {
            this(0);
        }

        public static NetworkContextClearSharedDictionaryCacheForIsolationKeyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearSharedDictionaryCacheForIsolationKeyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearSharedDictionaryCacheForIsolationKeyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearSharedDictionaryCacheForIsolationKeyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearSharedDictionaryCacheForIsolationKeyParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.isolationKey = SharedDictionaryIsolationKey.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.isolationKey, 8, false);
        }
    }


    static final class NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams() {
            this(0);
        }

        public static NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearSharedDictionaryCacheForIsolationKey_Response mCallback;

        NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParamsForwardToCallback(NetworkContext.ClearSharedDictionaryCacheForIsolationKey_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_SHARED_DICTIONARY_CACHE_FOR_ISOLATION_KEY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParamsProxyToResponder implements NetworkContext.ClearSharedDictionaryCacheForIsolationKey_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams _response = new NetworkContextClearSharedDictionaryCacheForIsolationKeyResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_SHARED_DICTIONARY_CACHE_FOR_ISOLATION_KEY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextSetDocumentReportingEndpointsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken reportingSource;
        public org.chromium.url.internal.mojom.Origin origin;
        public IsolationInfo isolationInfo;
        public java.util.Map<String, String> endpoints;

        private NetworkContextSetDocumentReportingEndpointsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetDocumentReportingEndpointsParams() {
            this(0);
        }

        public static NetworkContextSetDocumentReportingEndpointsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetDocumentReportingEndpointsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetDocumentReportingEndpointsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetDocumentReportingEndpointsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetDocumentReportingEndpointsParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.reportingSource = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.isolationInfo = IsolationInfo.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    {
                        decoder1.readDataHeaderForMap();
                        String[] keys0;
                        String[] values0;
                        {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                            {
                                org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                                keys0 = new String[si2.elementsOrVersion];
                                for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                                    keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                }
                            }
                        }
                        {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                            {
                                org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                                values0 = new String[si2.elementsOrVersion];
                                for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {

                                    values0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                }
                            }
                        }
                        result.endpoints = new java.util.HashMap<String, String>();
                        for (int index0 = 0; index0 < keys0.length; ++index0) {
                            result.endpoints.put(keys0[index0], values0[index0]);
                        }
                    }
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.reportingSource, 8, false);

            encoder0.encode(this.origin, 16, false);

            encoder0.encode(this.isolationInfo, 24, false);

            if (this.endpoints == null) {
                encoder0.encodeNullPointer(32, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(32);
                int size0 = this.endpoints.size();
                String[] keys0 = new String[size0];
                String[] values0 = new String[size0];
                int index0 = 0;
                for (java.util.Map.Entry<String, String> entry0 : this.endpoints.entrySet()) {
                    keys0[index0] = entry0.getKey();
                    values0[index0] = entry0.getValue();
                    ++index0;
                }

                {
                    org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    for (int i1 = 0; i1 < keys0.length; ++i1) {

                        encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }

                {
                    org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    for (int i1 = 0; i1 < values0.length; ++i1) {

                        encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
            }
        }
    }


    static final class NetworkContextSendReportsAndRemoveSourceParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken reportingSource;

        private NetworkContextSendReportsAndRemoveSourceParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSendReportsAndRemoveSourceParams() {
            this(0);
        }

        public static NetworkContextSendReportsAndRemoveSourceParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSendReportsAndRemoveSourceParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSendReportsAndRemoveSourceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSendReportsAndRemoveSourceParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSendReportsAndRemoveSourceParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.reportingSource = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.reportingSource, 8, false);
        }
    }


    static final class NetworkContextQueueReportParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 72;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(72, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String type;
        public String group;
        public org.chromium.url.mojom.Url url;
        public org.chromium.mojo_base.mojom.UnguessableToken reportingSource;
        public NetworkAnonymizationKey networkAnonymizationKey;
        public String userAgent;
        public org.chromium.mojo_base.mojom.DictionaryValue body;

        private NetworkContextQueueReportParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextQueueReportParams() {
            this(0);
        }

        public static NetworkContextQueueReportParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextQueueReportParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextQueueReportParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextQueueReportParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextQueueReportParams(elementsOrVersion);
                {

                    result.type = decoder0.readString(8, false);
                }
                {

                    result.group = decoder0.readString(16, false);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.reportingSource = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 40);
                }
                {

                    result.userAgent = decoder0.readString(56, true);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                    result.body = org.chromium.mojo_base.mojom.DictionaryValue.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.type, 8, false);

            encoder0.encode(this.group, 16, false);

            encoder0.encode(this.url, 24, false);

            encoder0.encode(this.reportingSource, 32, true);

            encoder0.encode(this.networkAnonymizationKey, 40, false);

            encoder0.encode(this.userAgent, 56, true);

            encoder0.encode(this.body, 64, false);
        }
    }


    static final class NetworkContextQueueSignedExchangeReportParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SignedExchangeReport report;
        public NetworkAnonymizationKey networkAnonymizationKey;

        private NetworkContextQueueSignedExchangeReportParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextQueueSignedExchangeReportParams() {
            this(0);
        }

        public static NetworkContextQueueSignedExchangeReportParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextQueueSignedExchangeReportParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextQueueSignedExchangeReportParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextQueueSignedExchangeReportParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextQueueSignedExchangeReportParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.report = SignedExchangeReport.decode(decoder1);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 16);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.report, 8, false);

            encoder0.encode(this.networkAnonymizationKey, 16, false);
        }
    }


    static final class NetworkContextCloseAllConnectionsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextCloseAllConnectionsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCloseAllConnectionsParams() {
            this(0);
        }

        public static NetworkContextCloseAllConnectionsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCloseAllConnectionsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCloseAllConnectionsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCloseAllConnectionsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCloseAllConnectionsParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextCloseAllConnectionsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextCloseAllConnectionsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCloseAllConnectionsResponseParams() {
            this(0);
        }

        public static NetworkContextCloseAllConnectionsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCloseAllConnectionsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCloseAllConnectionsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCloseAllConnectionsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCloseAllConnectionsResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextCloseAllConnectionsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.CloseAllConnections_Response mCallback;

        NetworkContextCloseAllConnectionsResponseParamsForwardToCallback(NetworkContext.CloseAllConnections_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLOSE_ALL_CONNECTIONS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextCloseAllConnectionsResponseParamsProxyToResponder implements NetworkContext.CloseAllConnections_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextCloseAllConnectionsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextCloseAllConnectionsResponseParams _response = new NetworkContextCloseAllConnectionsResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLOSE_ALL_CONNECTIONS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextCloseIdleConnectionsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextCloseIdleConnectionsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCloseIdleConnectionsParams() {
            this(0);
        }

        public static NetworkContextCloseIdleConnectionsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCloseIdleConnectionsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCloseIdleConnectionsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCloseIdleConnectionsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCloseIdleConnectionsParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextCloseIdleConnectionsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextCloseIdleConnectionsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCloseIdleConnectionsResponseParams() {
            this(0);
        }

        public static NetworkContextCloseIdleConnectionsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCloseIdleConnectionsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCloseIdleConnectionsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCloseIdleConnectionsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCloseIdleConnectionsResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextCloseIdleConnectionsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.CloseIdleConnections_Response mCallback;

        NetworkContextCloseIdleConnectionsResponseParamsForwardToCallback(NetworkContext.CloseIdleConnections_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLOSE_IDLE_CONNECTIONS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextCloseIdleConnectionsResponseParamsProxyToResponder implements NetworkContext.CloseIdleConnections_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextCloseIdleConnectionsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextCloseIdleConnectionsResponseParams _response = new NetworkContextCloseIdleConnectionsResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLOSE_IDLE_CONNECTIONS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextSetNetworkConditionsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken throttlingProfileId;
        public NetworkConditions conditions;

        private NetworkContextSetNetworkConditionsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetNetworkConditionsParams() {
            this(0);
        }

        public static NetworkContextSetNetworkConditionsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetNetworkConditionsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetNetworkConditionsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetNetworkConditionsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetNetworkConditionsParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.throttlingProfileId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.conditions = NetworkConditions.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.throttlingProfileId, 8, false);

            encoder0.encode(this.conditions, 16, true);
        }
    }


    static final class NetworkContextSetAcceptLanguageParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String newAcceptLanguage;

        private NetworkContextSetAcceptLanguageParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetAcceptLanguageParams() {
            this(0);
        }

        public static NetworkContextSetAcceptLanguageParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetAcceptLanguageParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetAcceptLanguageParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetAcceptLanguageParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetAcceptLanguageParams(elementsOrVersion);
                {

                    result.newAcceptLanguage = decoder0.readString(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.newAcceptLanguage, 8, false);
        }
    }


    static final class NetworkContextSetEnableReferrersParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean enableReferrers;

        private NetworkContextSetEnableReferrersParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetEnableReferrersParams() {
            this(0);
        }

        public static NetworkContextSetEnableReferrersParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetEnableReferrersParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetEnableReferrersParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetEnableReferrersParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetEnableReferrersParams(elementsOrVersion);
                {

                    result.enableReferrers = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.enableReferrers, 8, 0);
        }
    }


    static final class NetworkContextSetCtPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public CtPolicy ctPolicy;

        private NetworkContextSetCtPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetCtPolicyParams() {
            this(0);
        }

        public static NetworkContextSetCtPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetCtPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetCtPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetCtPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetCtPolicyParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.ctPolicy = CtPolicy.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.ctPolicy, 8, false);
        }
    }


    static final class NetworkContextCreateUdpSocketParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<UdpSocket> receiver;
        public UdpSocketListener listener;

        private NetworkContextCreateUdpSocketParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateUdpSocketParams() {
            this(0);
        }

        public static NetworkContextCreateUdpSocketParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateUdpSocketParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateUdpSocketParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateUdpSocketParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateUdpSocketParams(elementsOrVersion);
                {

                    result.receiver = decoder0.readInterfaceRequest(8, false);
                }
                {

                    result.listener = decoder0.readServiceInterface(12, true, UdpSocketListener.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.receiver, 8, false);

            encoder0.encode(this.listener, 12, true, UdpSocketListener.MANAGER);
        }
    }


    static final class NetworkContextCreateRestrictedUdpSocketParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IpEndPoint addr;
        public int mode;
        public MutableNetworkTrafficAnnotationTag trafficAnnotation;
        public RestrictedUdpSocketParams params;
        public org.chromium.mojo.bindings.InterfaceRequest<RestrictedUdpSocket> receiver;
        public UdpSocketListener listener;

        private NetworkContextCreateRestrictedUdpSocketParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateRestrictedUdpSocketParams() {
            this(0);
        }

        public static NetworkContextCreateRestrictedUdpSocketParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateRestrictedUdpSocketParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateRestrictedUdpSocketParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateRestrictedUdpSocketParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateRestrictedUdpSocketParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.addr = IpEndPoint.decode(decoder1);
                }
                {

                    result.mode = decoder0.readInt(16);
                    RestrictedUdpSocketMode.validate(result.mode);
                    result.mode = RestrictedUdpSocketMode.toKnownValue(result.mode);
                }
                {

                    result.receiver = decoder0.readInterfaceRequest(20, false);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.trafficAnnotation = MutableNetworkTrafficAnnotationTag.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.params = RestrictedUdpSocketParams.decode(decoder1);
                }
                {

                    result.listener = decoder0.readServiceInterface(40, true, UdpSocketListener.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.addr, 8, false);

            encoder0.encode(this.mode, 16);

            encoder0.encode(this.receiver, 20, false);

            encoder0.encode(this.trafficAnnotation, 24, false);

            encoder0.encode(this.params, 32, true);

            encoder0.encode(this.listener, 40, true, UdpSocketListener.MANAGER);
        }
    }


    static final class NetworkContextCreateRestrictedUdpSocketResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public IpEndPoint localAddrOut;

        private NetworkContextCreateRestrictedUdpSocketResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateRestrictedUdpSocketResponseParams() {
            this(0);
        }

        public static NetworkContextCreateRestrictedUdpSocketResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateRestrictedUdpSocketResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateRestrictedUdpSocketResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateRestrictedUdpSocketResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateRestrictedUdpSocketResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readInt(8);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.localAddrOut = IpEndPoint.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8);

            encoder0.encode(this.localAddrOut, 16, true);
        }
    }

    static class NetworkContextCreateRestrictedUdpSocketResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.CreateRestrictedUdpSocket_Response mCallback;

        NetworkContextCreateRestrictedUdpSocketResponseParamsForwardToCallback(NetworkContext.CreateRestrictedUdpSocket_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_RESTRICTED_UDP_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextCreateRestrictedUdpSocketResponseParams response = NetworkContextCreateRestrictedUdpSocketResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.localAddrOut);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextCreateRestrictedUdpSocketResponseParamsProxyToResponder implements NetworkContext.CreateRestrictedUdpSocket_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextCreateRestrictedUdpSocketResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, IpEndPoint localAddrOut) {
            NetworkContextCreateRestrictedUdpSocketResponseParams _response = new NetworkContextCreateRestrictedUdpSocketResponseParams();

            _response.result = result;

            _response.localAddrOut = localAddrOut;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CREATE_RESTRICTED_UDP_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextCreateTcpServerSocketParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IpEndPoint localAddr;
        public TcpServerSocketOptions options;
        public MutableNetworkTrafficAnnotationTag trafficAnnotation;
        public org.chromium.mojo.bindings.InterfaceRequest<TcpServerSocket> socket;

        private NetworkContextCreateTcpServerSocketParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateTcpServerSocketParams() {
            this(0);
        }

        public static NetworkContextCreateTcpServerSocketParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateTcpServerSocketParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateTcpServerSocketParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateTcpServerSocketParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateTcpServerSocketParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.localAddr = IpEndPoint.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.options = TcpServerSocketOptions.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.trafficAnnotation = MutableNetworkTrafficAnnotationTag.decode(decoder1);
                }
                {

                    result.socket = decoder0.readInterfaceRequest(32, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.localAddr, 8, false);

            encoder0.encode(this.options, 16, false);

            encoder0.encode(this.trafficAnnotation, 24, false);

            encoder0.encode(this.socket, 32, false);
        }
    }


    static final class NetworkContextCreateTcpServerSocketResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public IpEndPoint localAddrOut;

        private NetworkContextCreateTcpServerSocketResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateTcpServerSocketResponseParams() {
            this(0);
        }

        public static NetworkContextCreateTcpServerSocketResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateTcpServerSocketResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateTcpServerSocketResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateTcpServerSocketResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateTcpServerSocketResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readInt(8);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.localAddrOut = IpEndPoint.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8);

            encoder0.encode(this.localAddrOut, 16, true);
        }
    }

    static class NetworkContextCreateTcpServerSocketResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.CreateTcpServerSocket_Response mCallback;

        NetworkContextCreateTcpServerSocketResponseParamsForwardToCallback(NetworkContext.CreateTcpServerSocket_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_TCP_SERVER_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextCreateTcpServerSocketResponseParams response = NetworkContextCreateTcpServerSocketResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.localAddrOut);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextCreateTcpServerSocketResponseParamsProxyToResponder implements NetworkContext.CreateTcpServerSocket_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextCreateTcpServerSocketResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, IpEndPoint localAddrOut) {
            NetworkContextCreateTcpServerSocketResponseParams _response = new NetworkContextCreateTcpServerSocketResponseParams();

            _response.result = result;

            _response.localAddrOut = localAddrOut;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CREATE_TCP_SERVER_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextCreateTcpConnectedSocketParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IpEndPoint localAddr;
        public AddressList remoteAddrList;
        public TcpConnectedSocketOptions tcpConnectedSocketOptions;
        public MutableNetworkTrafficAnnotationTag trafficAnnotation;
        public org.chromium.mojo.bindings.InterfaceRequest<TcpConnectedSocket> socket;
        public SocketObserver observer;

        private NetworkContextCreateTcpConnectedSocketParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateTcpConnectedSocketParams() {
            this(0);
        }

        public static NetworkContextCreateTcpConnectedSocketParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateTcpConnectedSocketParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateTcpConnectedSocketParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateTcpConnectedSocketParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateTcpConnectedSocketParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.localAddr = IpEndPoint.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.remoteAddrList = AddressList.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.tcpConnectedSocketOptions = TcpConnectedSocketOptions.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.trafficAnnotation = MutableNetworkTrafficAnnotationTag.decode(decoder1);
                }
                {

                    result.socket = decoder0.readInterfaceRequest(40, false);
                }
                {

                    result.observer = decoder0.readServiceInterface(44, true, SocketObserver.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.localAddr, 8, true);

            encoder0.encode(this.remoteAddrList, 16, false);

            encoder0.encode(this.tcpConnectedSocketOptions, 24, true);

            encoder0.encode(this.trafficAnnotation, 32, false);

            encoder0.encode(this.socket, 40, false);

            encoder0.encode(this.observer, 44, true, SocketObserver.MANAGER);
        }
    }


    static final class NetworkContextCreateTcpConnectedSocketResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public IpEndPoint localAddr;
        public IpEndPoint peerAddr;
        public org.chromium.mojo.system.DataPipe.ConsumerHandle receiveStream;
        public org.chromium.mojo.system.DataPipe.ProducerHandle sendStream;

        private NetworkContextCreateTcpConnectedSocketResponseParams(int version) {
            super(STRUCT_SIZE, version);
            this.receiveStream = org.chromium.mojo.system.InvalidHandle.INSTANCE;
            this.sendStream = org.chromium.mojo.system.InvalidHandle.INSTANCE;
        }

        public NetworkContextCreateTcpConnectedSocketResponseParams() {
            this(0);
        }

        public static NetworkContextCreateTcpConnectedSocketResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateTcpConnectedSocketResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateTcpConnectedSocketResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateTcpConnectedSocketResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateTcpConnectedSocketResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readInt(8);
                }
                {

                    result.receiveStream = decoder0.readConsumerHandle(12, true);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.localAddr = IpEndPoint.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.peerAddr = IpEndPoint.decode(decoder1);
                }
                {

                    result.sendStream = decoder0.readProducerHandle(32, true);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8);

            encoder0.encode(this.receiveStream, 12, true);

            encoder0.encode(this.localAddr, 16, true);

            encoder0.encode(this.peerAddr, 24, true);

            encoder0.encode(this.sendStream, 32, true);
        }
    }

    static class NetworkContextCreateTcpConnectedSocketResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.CreateTcpConnectedSocket_Response mCallback;

        NetworkContextCreateTcpConnectedSocketResponseParamsForwardToCallback(NetworkContext.CreateTcpConnectedSocket_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_TCP_CONNECTED_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextCreateTcpConnectedSocketResponseParams response = NetworkContextCreateTcpConnectedSocketResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.localAddr, response.peerAddr, response.receiveStream, response.sendStream);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextCreateTcpConnectedSocketResponseParamsProxyToResponder implements NetworkContext.CreateTcpConnectedSocket_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextCreateTcpConnectedSocketResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, IpEndPoint localAddr, IpEndPoint peerAddr, org.chromium.mojo.system.DataPipe.ConsumerHandle receiveStream, org.chromium.mojo.system.DataPipe.ProducerHandle sendStream) {
            NetworkContextCreateTcpConnectedSocketResponseParams _response = new NetworkContextCreateTcpConnectedSocketResponseParams();

            _response.result = result;

            _response.localAddr = localAddr;

            _response.peerAddr = peerAddr;

            _response.receiveStream = receiveStream;

            _response.sendStream = sendStream;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CREATE_TCP_CONNECTED_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextCreateTcpBoundSocketParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IpEndPoint localAddr;
        public MutableNetworkTrafficAnnotationTag trafficAnnotation;
        public org.chromium.mojo.bindings.InterfaceRequest<TcpBoundSocket> socket;

        private NetworkContextCreateTcpBoundSocketParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateTcpBoundSocketParams() {
            this(0);
        }

        public static NetworkContextCreateTcpBoundSocketParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateTcpBoundSocketParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateTcpBoundSocketParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateTcpBoundSocketParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateTcpBoundSocketParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.localAddr = IpEndPoint.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.trafficAnnotation = MutableNetworkTrafficAnnotationTag.decode(decoder1);
                }
                {

                    result.socket = decoder0.readInterfaceRequest(24, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.localAddr, 8, false);

            encoder0.encode(this.trafficAnnotation, 16, false);

            encoder0.encode(this.socket, 24, false);
        }
    }


    static final class NetworkContextCreateTcpBoundSocketResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public IpEndPoint localAddr;

        private NetworkContextCreateTcpBoundSocketResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateTcpBoundSocketResponseParams() {
            this(0);
        }

        public static NetworkContextCreateTcpBoundSocketResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateTcpBoundSocketResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateTcpBoundSocketResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateTcpBoundSocketResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateTcpBoundSocketResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readInt(8);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.localAddr = IpEndPoint.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8);

            encoder0.encode(this.localAddr, 16, true);
        }
    }

    static class NetworkContextCreateTcpBoundSocketResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.CreateTcpBoundSocket_Response mCallback;

        NetworkContextCreateTcpBoundSocketResponseParamsForwardToCallback(NetworkContext.CreateTcpBoundSocket_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_TCP_BOUND_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextCreateTcpBoundSocketResponseParams response = NetworkContextCreateTcpBoundSocketResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.localAddr);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextCreateTcpBoundSocketResponseParamsProxyToResponder implements NetworkContext.CreateTcpBoundSocket_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextCreateTcpBoundSocketResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, IpEndPoint localAddr) {
            NetworkContextCreateTcpBoundSocketResponseParams _response = new NetworkContextCreateTcpBoundSocketResponseParams();

            _response.result = result;

            _response.localAddr = localAddr;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CREATE_TCP_BOUND_SOCKET_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextCreateProxyResolvingSocketFactoryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<ProxyResolvingSocketFactory> factory;

        private NetworkContextCreateProxyResolvingSocketFactoryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateProxyResolvingSocketFactoryParams() {
            this(0);
        }

        public static NetworkContextCreateProxyResolvingSocketFactoryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateProxyResolvingSocketFactoryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateProxyResolvingSocketFactoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateProxyResolvingSocketFactoryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateProxyResolvingSocketFactoryParams(elementsOrVersion);
                {

                    result.factory = decoder0.readInterfaceRequest(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.factory, 8, false);
        }
    }


    static final class NetworkContextLookUpProxyForUrlParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public NetworkAnonymizationKey networkAnonymizationKey;
        public ProxyLookupClient proxyLookupClient;

        private NetworkContextLookUpProxyForUrlParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextLookUpProxyForUrlParams() {
            this(0);
        }

        public static NetworkContextLookUpProxyForUrlParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextLookUpProxyForUrlParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextLookUpProxyForUrlParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextLookUpProxyForUrlParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextLookUpProxyForUrlParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 16);
                }
                {

                    result.proxyLookupClient = decoder0.readServiceInterface(32, false, ProxyLookupClient.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.url, 8, false);

            encoder0.encode(this.networkAnonymizationKey, 16, false);

            encoder0.encode(this.proxyLookupClient, 32, false, ProxyLookupClient.MANAGER);
        }
    }


    static final class NetworkContextForceReloadProxyConfigParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextForceReloadProxyConfigParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextForceReloadProxyConfigParams() {
            this(0);
        }

        public static NetworkContextForceReloadProxyConfigParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextForceReloadProxyConfigParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextForceReloadProxyConfigParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextForceReloadProxyConfigParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextForceReloadProxyConfigParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextForceReloadProxyConfigResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextForceReloadProxyConfigResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextForceReloadProxyConfigResponseParams() {
            this(0);
        }

        public static NetworkContextForceReloadProxyConfigResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextForceReloadProxyConfigResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextForceReloadProxyConfigResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextForceReloadProxyConfigResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextForceReloadProxyConfigResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextForceReloadProxyConfigResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ForceReloadProxyConfig_Response mCallback;

        NetworkContextForceReloadProxyConfigResponseParamsForwardToCallback(NetworkContext.ForceReloadProxyConfig_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(FORCE_RELOAD_PROXY_CONFIG_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextForceReloadProxyConfigResponseParamsProxyToResponder implements NetworkContext.ForceReloadProxyConfig_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextForceReloadProxyConfigResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextForceReloadProxyConfigResponseParams _response = new NetworkContextForceReloadProxyConfigResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(FORCE_RELOAD_PROXY_CONFIG_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextClearBadProxiesCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearBadProxiesCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearBadProxiesCacheParams() {
            this(0);
        }

        public static NetworkContextClearBadProxiesCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearBadProxiesCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearBadProxiesCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearBadProxiesCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearBadProxiesCacheParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextClearBadProxiesCacheResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClearBadProxiesCacheResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClearBadProxiesCacheResponseParams() {
            this(0);
        }

        public static NetworkContextClearBadProxiesCacheResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClearBadProxiesCacheResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClearBadProxiesCacheResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClearBadProxiesCacheResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClearBadProxiesCacheResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClearBadProxiesCacheResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ClearBadProxiesCache_Response mCallback;

        NetworkContextClearBadProxiesCacheResponseParamsForwardToCallback(NetworkContext.ClearBadProxiesCache_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLEAR_BAD_PROXIES_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClearBadProxiesCacheResponseParamsProxyToResponder implements NetworkContext.ClearBadProxiesCache_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClearBadProxiesCacheResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClearBadProxiesCacheResponseParams _response = new NetworkContextClearBadProxiesCacheResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(CLEAR_BAD_PROXIES_CACHE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextCreateWebSocketParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 112;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(112, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public String[] requestedProtocols;
        public SiteForCookies siteForCookies;
        public IsolationInfo isolationInfo;
        public HttpHeader[] additionalHeaders;
        public int processId;
        public org.chromium.url.internal.mojom.Origin origin;
        public int options;
        public MutableNetworkTrafficAnnotationTag trafficAnnotation;
        public WebSocketHandshakeClient handshakeClient;
        public UrlLoaderNetworkServiceObserver urlLoaderNetworkObserver;
        public WebSocketAuthenticationHandler authHandler;
        public TrustedHeaderClient headerClient;
        public org.chromium.mojo_base.mojom.UnguessableToken throttlingProfileId;

        private NetworkContextCreateWebSocketParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateWebSocketParams() {
            this(0);
        }

        public static NetworkContextCreateWebSocketParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateWebSocketParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateWebSocketParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateWebSocketParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateWebSocketParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.requestedProtocols = new String[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            result.requestedProtocols[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        }
                    }
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.siteForCookies = SiteForCookies.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.isolationInfo = IsolationInfo.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.additionalHeaders = new HttpHeader[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.additionalHeaders[i1] = HttpHeader.decode(decoder2);
                        }
                    }
                }
                {

                    result.processId = decoder0.readInt(48);
                }
                {

                    result.options = decoder0.readInt(52);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                    result.trafficAnnotation = MutableNetworkTrafficAnnotationTag.decode(decoder1);
                }
                {

                    result.handshakeClient = decoder0.readServiceInterface(72, false, WebSocketHandshakeClient.MANAGER);
                }
                {

                    result.urlLoaderNetworkObserver = decoder0.readServiceInterface(80, true, UrlLoaderNetworkServiceObserver.MANAGER);
                }
                {

                    result.authHandler = decoder0.readServiceInterface(88, true, WebSocketAuthenticationHandler.MANAGER);
                }
                {

                    result.headerClient = decoder0.readServiceInterface(96, true, TrustedHeaderClient.MANAGER);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(104, true);
                    result.throttlingProfileId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.url, 8, false);

            if (this.requestedProtocols == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.requestedProtocols.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.requestedProtocols.length; ++i0) {

                    encoder1.encode(this.requestedProtocols[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }

            encoder0.encode(this.siteForCookies, 24, false);

            encoder0.encode(this.isolationInfo, 32, false);

            if (this.additionalHeaders == null) {
                encoder0.encodeNullPointer(40, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.additionalHeaders.length, 40, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.additionalHeaders.length; ++i0) {

                    encoder1.encode(this.additionalHeaders[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }

            encoder0.encode(this.processId, 48);

            encoder0.encode(this.options, 52);

            encoder0.encode(this.origin, 56, false);

            encoder0.encode(this.trafficAnnotation, 64, false);

            encoder0.encode(this.handshakeClient, 72, false, WebSocketHandshakeClient.MANAGER);

            encoder0.encode(this.urlLoaderNetworkObserver, 80, true, UrlLoaderNetworkServiceObserver.MANAGER);

            encoder0.encode(this.authHandler, 88, true, WebSocketAuthenticationHandler.MANAGER);

            encoder0.encode(this.headerClient, 96, true, TrustedHeaderClient.MANAGER);

            encoder0.encode(this.throttlingProfileId, 104, true);
        }
    }


    static final class NetworkContextCreateWebTransportParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public org.chromium.url.internal.mojom.Origin origin;
        public NetworkAnonymizationKey networkAnonymizationKey;
        public WebTransportCertificateFingerprint[] fingerprints;
        public WebTransportHandshakeClient handshakeClient;

        private NetworkContextCreateWebTransportParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateWebTransportParams() {
            this(0);
        }

        public static NetworkContextCreateWebTransportParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateWebTransportParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateWebTransportParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateWebTransportParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateWebTransportParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 24);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.fingerprints = new WebTransportCertificateFingerprint[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.fingerprints[i1] = WebTransportCertificateFingerprint.decode(decoder2);
                        }
                    }
                }
                {

                    result.handshakeClient = decoder0.readServiceInterface(48, false, WebTransportHandshakeClient.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.url, 8, false);

            encoder0.encode(this.origin, 16, false);

            encoder0.encode(this.networkAnonymizationKey, 24, false);

            if (this.fingerprints == null) {
                encoder0.encodeNullPointer(40, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.fingerprints.length, 40, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.fingerprints.length; ++i0) {

                    encoder1.encode(this.fingerprints[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }

            encoder0.encode(this.handshakeClient, 48, false, WebTransportHandshakeClient.MANAGER);
        }
    }


    static final class NetworkContextCreateNetLogExporterParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<NetLogExporter> receiver;

        private NetworkContextCreateNetLogExporterParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateNetLogExporterParams() {
            this(0);
        }

        public static NetworkContextCreateNetLogExporterParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateNetLogExporterParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateNetLogExporterParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateNetLogExporterParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateNetLogExporterParams(elementsOrVersion);
                {

                    result.receiver = decoder0.readInterfaceRequest(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.receiver, 8, false);
        }
    }


    static final class NetworkContextPreconnectSocketsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int numStreams;
        public org.chromium.url.mojom.Url url;
        public boolean allowCredentials;
        public NetworkAnonymizationKey networkAnonymizationKey;

        private NetworkContextPreconnectSocketsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextPreconnectSocketsParams() {
            this(0);
        }

        public static NetworkContextPreconnectSocketsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextPreconnectSocketsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextPreconnectSocketsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextPreconnectSocketsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextPreconnectSocketsParams(elementsOrVersion);
                {

                    result.numStreams = decoder0.readInt(8);
                }
                {

                    result.allowCredentials = decoder0.readBoolean(12, 0);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 24);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.numStreams, 8);

            encoder0.encode(this.allowCredentials, 12, 0);

            encoder0.encode(this.url, 16, false);

            encoder0.encode(this.networkAnonymizationKey, 24, false);
        }
    }


    static final class NetworkContextCreateP2pSocketManagerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NetworkAnonymizationKey networkAnonymizationKey;
        public P2pTrustedSocketManagerClient client;
        public org.chromium.mojo.bindings.InterfaceRequest<P2pTrustedSocketManager> trustedSocketManager;
        public org.chromium.mojo.bindings.InterfaceRequest<P2pSocketManager> socketManager;

        private NetworkContextCreateP2pSocketManagerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateP2pSocketManagerParams() {
            this(0);
        }

        public static NetworkContextCreateP2pSocketManagerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateP2pSocketManagerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateP2pSocketManagerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateP2pSocketManagerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateP2pSocketManagerParams(elementsOrVersion);
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 8);
                }
                {

                    result.client = decoder0.readServiceInterface(24, false, P2pTrustedSocketManagerClient.MANAGER);
                }
                {

                    result.trustedSocketManager = decoder0.readInterfaceRequest(32, false);
                }
                {

                    result.socketManager = decoder0.readInterfaceRequest(36, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.networkAnonymizationKey, 8, false);

            encoder0.encode(this.client, 24, false, P2pTrustedSocketManagerClient.MANAGER);

            encoder0.encode(this.trustedSocketManager, 32, false);

            encoder0.encode(this.socketManager, 36, false);
        }
    }


    static final class NetworkContextCreateMdnsResponderParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<MdnsResponder> responderReceiver;

        private NetworkContextCreateMdnsResponderParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateMdnsResponderParams() {
            this(0);
        }

        public static NetworkContextCreateMdnsResponderParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateMdnsResponderParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateMdnsResponderParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateMdnsResponderParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateMdnsResponderParams(elementsOrVersion);
                {

                    result.responderReceiver = decoder0.readInterfaceRequest(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.responderReceiver, 8, false);
        }
    }


    static final class NetworkContextResolveHostParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public HostResolverHost host;
        public NetworkAnonymizationKey networkAnonymizationKey;
        public ResolveHostParameters optionalParameters;
        public ResolveHostClient responseClient;

        private NetworkContextResolveHostParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextResolveHostParams() {
            this(0);
        }

        public static NetworkContextResolveHostParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextResolveHostParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextResolveHostParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextResolveHostParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextResolveHostParams(elementsOrVersion);
                {

                    result.host = HostResolverHost.decode(decoder0, 8);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 24);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                    result.optionalParameters = ResolveHostParameters.decode(decoder1);
                }
                {

                    result.responseClient = decoder0.readServiceInterface(48, false, ResolveHostClient.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.host, 8, false);

            encoder0.encode(this.networkAnonymizationKey, 24, false);

            encoder0.encode(this.optionalParameters, 40, true);

            encoder0.encode(this.responseClient, 48, false, ResolveHostClient.MANAGER);
        }
    }


    static final class NetworkContextCreateHostResolverParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DnsConfigOverrides configOverrides;
        public org.chromium.mojo.bindings.InterfaceRequest<HostResolver> hostResolver;

        private NetworkContextCreateHostResolverParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextCreateHostResolverParams() {
            this(0);
        }

        public static NetworkContextCreateHostResolverParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextCreateHostResolverParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextCreateHostResolverParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextCreateHostResolverParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextCreateHostResolverParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.configOverrides = DnsConfigOverrides.decode(decoder1);
                }
                {

                    result.hostResolver = decoder0.readInterfaceRequest(16, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.configOverrides, 8, true);

            encoder0.encode(this.hostResolver, 16, false);
        }
    }


    static final class NetworkContextVerifyCertForSignedExchangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public X509Certificate certificate;
        public org.chromium.url.mojom.Url url;
        public NetworkAnonymizationKey networkAnonymizationKey;
        public String ocspResponse;
        public String sctList;

        private NetworkContextVerifyCertForSignedExchangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextVerifyCertForSignedExchangeParams() {
            this(0);
        }

        public static NetworkContextVerifyCertForSignedExchangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextVerifyCertForSignedExchangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextVerifyCertForSignedExchangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextVerifyCertForSignedExchangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextVerifyCertForSignedExchangeParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.certificate = X509Certificate.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 24);
                }
                {

                    result.ocspResponse = decoder0.readString(40, false);
                }
                {

                    result.sctList = decoder0.readString(48, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.certificate, 8, false);

            encoder0.encode(this.url, 16, false);

            encoder0.encode(this.networkAnonymizationKey, 24, false);

            encoder0.encode(this.ocspResponse, 40, false);

            encoder0.encode(this.sctList, 48, false);
        }
    }


    static final class NetworkContextVerifyCertForSignedExchangeResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int errorCode;
        public CertVerifyResult cvResult;
        public boolean pkpBypassed;
        public String pinningFailureLog;

        private NetworkContextVerifyCertForSignedExchangeResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextVerifyCertForSignedExchangeResponseParams() {
            this(0);
        }

        public static NetworkContextVerifyCertForSignedExchangeResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextVerifyCertForSignedExchangeResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextVerifyCertForSignedExchangeResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextVerifyCertForSignedExchangeResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextVerifyCertForSignedExchangeResponseParams(elementsOrVersion);
                {

                    result.errorCode = decoder0.readInt(8);
                }
                {

                    result.pkpBypassed = decoder0.readBoolean(12, 0);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.cvResult = CertVerifyResult.decode(decoder1);
                }
                {

                    result.pinningFailureLog = decoder0.readString(24, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.errorCode, 8);

            encoder0.encode(this.pkpBypassed, 12, 0);

            encoder0.encode(this.cvResult, 16, false);

            encoder0.encode(this.pinningFailureLog, 24, false);
        }
    }

    static class NetworkContextVerifyCertForSignedExchangeResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.VerifyCertForSignedExchange_Response mCallback;

        NetworkContextVerifyCertForSignedExchangeResponseParamsForwardToCallback(NetworkContext.VerifyCertForSignedExchange_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(VERIFY_CERT_FOR_SIGNED_EXCHANGE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextVerifyCertForSignedExchangeResponseParams response = NetworkContextVerifyCertForSignedExchangeResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.errorCode, response.cvResult, response.pkpBypassed, response.pinningFailureLog);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextVerifyCertForSignedExchangeResponseParamsProxyToResponder implements NetworkContext.VerifyCertForSignedExchange_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextVerifyCertForSignedExchangeResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer errorCode, CertVerifyResult cvResult, Boolean pkpBypassed, String pinningFailureLog) {
            NetworkContextVerifyCertForSignedExchangeResponseParams _response = new NetworkContextVerifyCertForSignedExchangeResponseParams();

            _response.errorCode = errorCode;

            _response.cvResult = cvResult;

            _response.pkpBypassed = pkpBypassed;

            _response.pinningFailureLog = pinningFailureLog;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(VERIFY_CERT_FOR_SIGNED_EXCHANGE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextVerifyIpProtectionConfigGetterForTestingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextVerifyIpProtectionConfigGetterForTestingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextVerifyIpProtectionConfigGetterForTestingParams() {
            this(0);
        }

        public static NetworkContextVerifyIpProtectionConfigGetterForTestingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextVerifyIpProtectionConfigGetterForTestingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextVerifyIpProtectionConfigGetterForTestingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextVerifyIpProtectionConfigGetterForTestingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextVerifyIpProtectionConfigGetterForTestingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public BlindSignedAuthToken bsaToken;
        public org.chromium.mojo_base.mojom.Time tryAgainAfter;

        private NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams() {
            this(0);
        }

        public static NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.bsaToken = BlindSignedAuthToken.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.tryAgainAfter = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.bsaToken, 8, true);

            encoder0.encode(this.tryAgainAfter, 16, true);
        }
    }

    static class NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.VerifyIpProtectionConfigGetterForTesting_Response mCallback;

        NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParamsForwardToCallback(NetworkContext.VerifyIpProtectionConfigGetterForTesting_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(VERIFY_IP_PROTECTION_CONFIG_GETTER_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams response = NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.bsaToken, response.tryAgainAfter);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParamsProxyToResponder implements NetworkContext.VerifyIpProtectionConfigGetterForTesting_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(BlindSignedAuthToken bsaToken, org.chromium.mojo_base.mojom.Time tryAgainAfter) {
            NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams _response = new NetworkContextVerifyIpProtectionConfigGetterForTestingResponseParams();

            _response.bsaToken = bsaToken;

            _response.tryAgainAfter = tryAgainAfter;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(VERIFY_IP_PROTECTION_CONFIG_GETTER_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams() {
            this(0);
        }

        public static NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextInvalidateIpProtectionConfigCacheTryAgainAfterTimeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextAddHstsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String host;
        public org.chromium.mojo_base.mojom.Time expiry;
        public boolean includeSubdomains;

        private NetworkContextAddHstsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextAddHstsParams() {
            this(0);
        }

        public static NetworkContextAddHstsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextAddHstsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextAddHstsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextAddHstsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextAddHstsParams(elementsOrVersion);
                {

                    result.host = decoder0.readString(8, false);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.expiry = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    result.includeSubdomains = decoder0.readBoolean(24, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.host, 8, false);

            encoder0.encode(this.expiry, 16, false);

            encoder0.encode(this.includeSubdomains, 24, 0);
        }
    }


    static final class NetworkContextAddHstsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextAddHstsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextAddHstsResponseParams() {
            this(0);
        }

        public static NetworkContextAddHstsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextAddHstsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextAddHstsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextAddHstsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextAddHstsResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextAddHstsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.AddHsts_Response mCallback;

        NetworkContextAddHstsResponseParamsForwardToCallback(NetworkContext.AddHsts_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ADD_HSTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextAddHstsResponseParamsProxyToResponder implements NetworkContext.AddHsts_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextAddHstsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextAddHstsResponseParams _response = new NetworkContextAddHstsResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(ADD_HSTS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextIsHstsActiveForHostParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String host;

        private NetworkContextIsHstsActiveForHostParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextIsHstsActiveForHostParams() {
            this(0);
        }

        public static NetworkContextIsHstsActiveForHostParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextIsHstsActiveForHostParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextIsHstsActiveForHostParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextIsHstsActiveForHostParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextIsHstsActiveForHostParams(elementsOrVersion);
                {

                    result.host = decoder0.readString(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.host, 8, false);
        }
    }


    static final class NetworkContextIsHstsActiveForHostResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean result;

        private NetworkContextIsHstsActiveForHostResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextIsHstsActiveForHostResponseParams() {
            this(0);
        }

        public static NetworkContextIsHstsActiveForHostResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextIsHstsActiveForHostResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextIsHstsActiveForHostResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextIsHstsActiveForHostResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextIsHstsActiveForHostResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8, 0);
        }
    }

    static class NetworkContextIsHstsActiveForHostResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.IsHstsActiveForHost_Response mCallback;

        NetworkContextIsHstsActiveForHostResponseParamsForwardToCallback(NetworkContext.IsHstsActiveForHost_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(IS_HSTS_ACTIVE_FOR_HOST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextIsHstsActiveForHostResponseParams response = NetworkContextIsHstsActiveForHostResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextIsHstsActiveForHostResponseParamsProxyToResponder implements NetworkContext.IsHstsActiveForHost_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextIsHstsActiveForHostResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean result) {
            NetworkContextIsHstsActiveForHostResponseParams _response = new NetworkContextIsHstsActiveForHostResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(IS_HSTS_ACTIVE_FOR_HOST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextGetHstsStateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String domain;

        private NetworkContextGetHstsStateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetHstsStateParams() {
            this(0);
        }

        public static NetworkContextGetHstsStateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetHstsStateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetHstsStateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetHstsStateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetHstsStateParams(elementsOrVersion);
                {

                    result.domain = decoder0.readString(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.domain, 8, false);
        }
    }


    static final class NetworkContextGetHstsStateResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.DictionaryValue state;

        private NetworkContextGetHstsStateResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetHstsStateResponseParams() {
            this(0);
        }

        public static NetworkContextGetHstsStateResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetHstsStateResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetHstsStateResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetHstsStateResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetHstsStateResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.state = org.chromium.mojo_base.mojom.DictionaryValue.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.state, 8, false);
        }
    }

    static class NetworkContextGetHstsStateResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.GetHstsState_Response mCallback;

        NetworkContextGetHstsStateResponseParamsForwardToCallback(NetworkContext.GetHstsState_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_HSTS_STATE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextGetHstsStateResponseParams response = NetworkContextGetHstsStateResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.state);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextGetHstsStateResponseParamsProxyToResponder implements NetworkContext.GetHstsState_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextGetHstsStateResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.mojo_base.mojom.DictionaryValue state) {
            NetworkContextGetHstsStateResponseParams _response = new NetworkContextGetHstsStateResponseParams();

            _response.state = state;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(GET_HSTS_STATE_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextSetCorsOriginAccessListsForOriginParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin sourceOrigin;
        public CorsOriginPattern[] allowPatterns;
        public CorsOriginPattern[] blockPatterns;

        private NetworkContextSetCorsOriginAccessListsForOriginParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetCorsOriginAccessListsForOriginParams() {
            this(0);
        }

        public static NetworkContextSetCorsOriginAccessListsForOriginParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetCorsOriginAccessListsForOriginParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetCorsOriginAccessListsForOriginParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetCorsOriginAccessListsForOriginParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetCorsOriginAccessListsForOriginParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sourceOrigin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.allowPatterns = new CorsOriginPattern[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.allowPatterns[i1] = CorsOriginPattern.decode(decoder2);
                        }
                    }
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.blockPatterns = new CorsOriginPattern[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.blockPatterns[i1] = CorsOriginPattern.decode(decoder2);
                        }
                    }
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.sourceOrigin, 8, false);

            if (this.allowPatterns == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.allowPatterns.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.allowPatterns.length; ++i0) {

                    encoder1.encode(this.allowPatterns[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }

            if (this.blockPatterns == null) {
                encoder0.encodeNullPointer(24, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.blockPatterns.length, 24, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.blockPatterns.length; ++i0) {

                    encoder1.encode(this.blockPatterns[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }


    static final class NetworkContextSetCorsOriginAccessListsForOriginResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextSetCorsOriginAccessListsForOriginResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetCorsOriginAccessListsForOriginResponseParams() {
            this(0);
        }

        public static NetworkContextSetCorsOriginAccessListsForOriginResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetCorsOriginAccessListsForOriginResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetCorsOriginAccessListsForOriginResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetCorsOriginAccessListsForOriginResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetCorsOriginAccessListsForOriginResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextSetCorsOriginAccessListsForOriginResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.SetCorsOriginAccessListsForOrigin_Response mCallback;

        NetworkContextSetCorsOriginAccessListsForOriginResponseParamsForwardToCallback(NetworkContext.SetCorsOriginAccessListsForOrigin_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SET_CORS_ORIGIN_ACCESS_LISTS_FOR_ORIGIN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextSetCorsOriginAccessListsForOriginResponseParamsProxyToResponder implements NetworkContext.SetCorsOriginAccessListsForOrigin_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextSetCorsOriginAccessListsForOriginResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextSetCorsOriginAccessListsForOriginResponseParams _response = new NetworkContextSetCorsOriginAccessListsForOriginResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(SET_CORS_ORIGIN_ACCESS_LISTS_FOR_ORIGIN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextDeleteDynamicDataForHostParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String host;

        private NetworkContextDeleteDynamicDataForHostParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextDeleteDynamicDataForHostParams() {
            this(0);
        }

        public static NetworkContextDeleteDynamicDataForHostParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextDeleteDynamicDataForHostParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextDeleteDynamicDataForHostParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextDeleteDynamicDataForHostParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextDeleteDynamicDataForHostParams(elementsOrVersion);
                {

                    result.host = decoder0.readString(8, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.host, 8, false);
        }
    }


    static final class NetworkContextDeleteDynamicDataForHostResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean result;

        private NetworkContextDeleteDynamicDataForHostResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextDeleteDynamicDataForHostResponseParams() {
            this(0);
        }

        public static NetworkContextDeleteDynamicDataForHostResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextDeleteDynamicDataForHostResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextDeleteDynamicDataForHostResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextDeleteDynamicDataForHostResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextDeleteDynamicDataForHostResponseParams(elementsOrVersion);
                {

                    result.result = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.result, 8, 0);
        }
    }

    static class NetworkContextDeleteDynamicDataForHostResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.DeleteDynamicDataForHost_Response mCallback;

        NetworkContextDeleteDynamicDataForHostResponseParamsForwardToCallback(NetworkContext.DeleteDynamicDataForHost_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DELETE_DYNAMIC_DATA_FOR_HOST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextDeleteDynamicDataForHostResponseParams response = NetworkContextDeleteDynamicDataForHostResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextDeleteDynamicDataForHostResponseParamsProxyToResponder implements NetworkContext.DeleteDynamicDataForHost_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextDeleteDynamicDataForHostResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean result) {
            NetworkContextDeleteDynamicDataForHostResponseParams _response = new NetworkContextDeleteDynamicDataForHostResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(DELETE_DYNAMIC_DATA_FOR_HOST_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean splitAuthCacheByNetworkAnonymizationKey;

        private NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams() {
            this(0);
        }

        public static NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetSplitAuthCacheByNetworkAnonymizationKeyParams(elementsOrVersion);
                {

                    result.splitAuthCacheByNetworkAnonymizationKey = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.splitAuthCacheByNetworkAnonymizationKey, 8, 0);
        }
    }


    static final class NetworkContextSaveHttpAuthCacheProxyEntriesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextSaveHttpAuthCacheProxyEntriesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSaveHttpAuthCacheProxyEntriesParams() {
            this(0);
        }

        public static NetworkContextSaveHttpAuthCacheProxyEntriesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSaveHttpAuthCacheProxyEntriesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSaveHttpAuthCacheProxyEntriesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSaveHttpAuthCacheProxyEntriesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSaveHttpAuthCacheProxyEntriesParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken cacheKey;

        private NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams() {
            this(0);
        }

        public static NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.cacheKey = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.cacheKey, 8, false);
        }
    }

    static class NetworkContextSaveHttpAuthCacheProxyEntriesResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.SaveHttpAuthCacheProxyEntries_Response mCallback;

        NetworkContextSaveHttpAuthCacheProxyEntriesResponseParamsForwardToCallback(NetworkContext.SaveHttpAuthCacheProxyEntries_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SAVE_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams response = NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.cacheKey);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextSaveHttpAuthCacheProxyEntriesResponseParamsProxyToResponder implements NetworkContext.SaveHttpAuthCacheProxyEntries_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextSaveHttpAuthCacheProxyEntriesResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.mojo_base.mojom.UnguessableToken cacheKey) {
            NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams _response = new NetworkContextSaveHttpAuthCacheProxyEntriesResponseParams();

            _response.cacheKey = cacheKey;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(SAVE_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextLoadHttpAuthCacheProxyEntriesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken cacheKey;

        private NetworkContextLoadHttpAuthCacheProxyEntriesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextLoadHttpAuthCacheProxyEntriesParams() {
            this(0);
        }

        public static NetworkContextLoadHttpAuthCacheProxyEntriesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextLoadHttpAuthCacheProxyEntriesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextLoadHttpAuthCacheProxyEntriesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextLoadHttpAuthCacheProxyEntriesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextLoadHttpAuthCacheProxyEntriesParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.cacheKey = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.cacheKey, 8, false);
        }
    }


    static final class NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams() {
            this(0);
        }

        public static NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextLoadHttpAuthCacheProxyEntriesResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.LoadHttpAuthCacheProxyEntries_Response mCallback;

        NetworkContextLoadHttpAuthCacheProxyEntriesResponseParamsForwardToCallback(NetworkContext.LoadHttpAuthCacheProxyEntries_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(LOAD_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextLoadHttpAuthCacheProxyEntriesResponseParamsProxyToResponder implements NetworkContext.LoadHttpAuthCacheProxyEntries_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextLoadHttpAuthCacheProxyEntriesResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams _response = new NetworkContextLoadHttpAuthCacheProxyEntriesResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(LOAD_HTTP_AUTH_CACHE_PROXY_ENTRIES_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextAddAuthCacheEntryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public AuthChallengeInfo challenge;
        public NetworkAnonymizationKey networkAnonymizationKey;
        public AuthCredentials credentials;

        private NetworkContextAddAuthCacheEntryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextAddAuthCacheEntryParams() {
            this(0);
        }

        public static NetworkContextAddAuthCacheEntryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextAddAuthCacheEntryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextAddAuthCacheEntryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextAddAuthCacheEntryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextAddAuthCacheEntryParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.challenge = AuthChallengeInfo.decode(decoder1);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 16);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.credentials = AuthCredentials.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.challenge, 8, false);

            encoder0.encode(this.networkAnonymizationKey, 16, false);

            encoder0.encode(this.credentials, 32, false);
        }
    }


    static final class NetworkContextAddAuthCacheEntryResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextAddAuthCacheEntryResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextAddAuthCacheEntryResponseParams() {
            this(0);
        }

        public static NetworkContextAddAuthCacheEntryResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextAddAuthCacheEntryResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextAddAuthCacheEntryResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextAddAuthCacheEntryResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextAddAuthCacheEntryResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextAddAuthCacheEntryResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.AddAuthCacheEntry_Response mCallback;

        NetworkContextAddAuthCacheEntryResponseParamsForwardToCallback(NetworkContext.AddAuthCacheEntry_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ADD_AUTH_CACHE_ENTRY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextAddAuthCacheEntryResponseParamsProxyToResponder implements NetworkContext.AddAuthCacheEntry_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextAddAuthCacheEntryResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextAddAuthCacheEntryResponseParams _response = new NetworkContextAddAuthCacheEntryResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(ADD_AUTH_CACHE_ENTRY_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextSetCorsNonWildcardRequestHeadersSupportParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean value;

        private NetworkContextSetCorsNonWildcardRequestHeadersSupportParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetCorsNonWildcardRequestHeadersSupportParams() {
            this(0);
        }

        public static NetworkContextSetCorsNonWildcardRequestHeadersSupportParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetCorsNonWildcardRequestHeadersSupportParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetCorsNonWildcardRequestHeadersSupportParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetCorsNonWildcardRequestHeadersSupportParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetCorsNonWildcardRequestHeadersSupportParams(elementsOrVersion);
                {

                    result.value = decoder0.readBoolean(8, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.value, 8, 0);
        }
    }


    static final class NetworkContextLookupServerBasicAuthCredentialsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public NetworkAnonymizationKey networkAnonymizationKey;

        private NetworkContextLookupServerBasicAuthCredentialsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextLookupServerBasicAuthCredentialsParams() {
            this(0);
        }

        public static NetworkContextLookupServerBasicAuthCredentialsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextLookupServerBasicAuthCredentialsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextLookupServerBasicAuthCredentialsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextLookupServerBasicAuthCredentialsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextLookupServerBasicAuthCredentialsParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {

                    result.networkAnonymizationKey = NetworkAnonymizationKey.decode(decoder0, 16);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.url, 8, false);

            encoder0.encode(this.networkAnonymizationKey, 16, false);
        }
    }


    static final class NetworkContextLookupServerBasicAuthCredentialsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public AuthCredentials credentials;

        private NetworkContextLookupServerBasicAuthCredentialsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextLookupServerBasicAuthCredentialsResponseParams() {
            this(0);
        }

        public static NetworkContextLookupServerBasicAuthCredentialsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextLookupServerBasicAuthCredentialsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextLookupServerBasicAuthCredentialsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextLookupServerBasicAuthCredentialsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextLookupServerBasicAuthCredentialsResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.credentials = AuthCredentials.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.credentials, 8, true);
        }
    }

    static class NetworkContextLookupServerBasicAuthCredentialsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.LookupServerBasicAuthCredentials_Response mCallback;

        NetworkContextLookupServerBasicAuthCredentialsResponseParamsForwardToCallback(NetworkContext.LookupServerBasicAuthCredentials_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(LOOKUP_SERVER_BASIC_AUTH_CREDENTIALS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextLookupServerBasicAuthCredentialsResponseParams response = NetworkContextLookupServerBasicAuthCredentialsResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.credentials);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextLookupServerBasicAuthCredentialsResponseParamsProxyToResponder implements NetworkContext.LookupServerBasicAuthCredentials_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextLookupServerBasicAuthCredentialsResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(AuthCredentials credentials) {
            NetworkContextLookupServerBasicAuthCredentialsResponseParams _response = new NetworkContextLookupServerBasicAuthCredentialsResponseParams();

            _response.credentials = credentials;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(LOOKUP_SERVER_BASIC_AUTH_CREDENTIALS_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextEnableStaticKeyPinningForTestingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextEnableStaticKeyPinningForTestingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextEnableStaticKeyPinningForTestingParams() {
            this(0);
        }

        public static NetworkContextEnableStaticKeyPinningForTestingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextEnableStaticKeyPinningForTestingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextEnableStaticKeyPinningForTestingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextEnableStaticKeyPinningForTestingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextEnableStaticKeyPinningForTestingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextEnableStaticKeyPinningForTestingResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextEnableStaticKeyPinningForTestingResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextEnableStaticKeyPinningForTestingResponseParams() {
            this(0);
        }

        public static NetworkContextEnableStaticKeyPinningForTestingResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextEnableStaticKeyPinningForTestingResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextEnableStaticKeyPinningForTestingResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextEnableStaticKeyPinningForTestingResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextEnableStaticKeyPinningForTestingResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextEnableStaticKeyPinningForTestingResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.EnableStaticKeyPinningForTesting_Response mCallback;

        NetworkContextEnableStaticKeyPinningForTestingResponseParamsForwardToCallback(NetworkContext.EnableStaticKeyPinningForTesting_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ENABLE_STATIC_KEY_PINNING_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextEnableStaticKeyPinningForTestingResponseParamsProxyToResponder implements NetworkContext.EnableStaticKeyPinningForTesting_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextEnableStaticKeyPinningForTestingResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextEnableStaticKeyPinningForTestingResponseParams _response = new NetworkContextEnableStaticKeyPinningForTestingResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(ENABLE_STATIC_KEY_PINNING_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextVerifyCertificateForTestingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public X509Certificate certificate;
        public String hostname;
        public String ocspResponse;
        public String sctList;

        private NetworkContextVerifyCertificateForTestingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextVerifyCertificateForTestingParams() {
            this(0);
        }

        public static NetworkContextVerifyCertificateForTestingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextVerifyCertificateForTestingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextVerifyCertificateForTestingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextVerifyCertificateForTestingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextVerifyCertificateForTestingParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.certificate = X509Certificate.decode(decoder1);
                }
                {

                    result.hostname = decoder0.readString(16, false);
                }
                {

                    result.ocspResponse = decoder0.readString(24, false);
                }
                {

                    result.sctList = decoder0.readString(32, false);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.certificate, 8, false);

            encoder0.encode(this.hostname, 16, false);

            encoder0.encode(this.ocspResponse, 24, false);

            encoder0.encode(this.sctList, 32, false);
        }
    }


    static final class NetworkContextVerifyCertificateForTestingResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int errorCode;

        private NetworkContextVerifyCertificateForTestingResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextVerifyCertificateForTestingResponseParams() {
            this(0);
        }

        public static NetworkContextVerifyCertificateForTestingResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextVerifyCertificateForTestingResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextVerifyCertificateForTestingResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextVerifyCertificateForTestingResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextVerifyCertificateForTestingResponseParams(elementsOrVersion);
                {

                    result.errorCode = decoder0.readInt(8);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.errorCode, 8);
        }
    }

    static class NetworkContextVerifyCertificateForTestingResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.VerifyCertificateForTesting_Response mCallback;

        NetworkContextVerifyCertificateForTestingResponseParamsForwardToCallback(NetworkContext.VerifyCertificateForTesting_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(VERIFY_CERTIFICATE_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextVerifyCertificateForTestingResponseParams response = NetworkContextVerifyCertificateForTestingResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.errorCode);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextVerifyCertificateForTestingResponseParamsProxyToResponder implements NetworkContext.VerifyCertificateForTesting_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextVerifyCertificateForTestingResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer errorCode) {
            NetworkContextVerifyCertificateForTestingResponseParams _response = new NetworkContextVerifyCertificateForTestingResponseParams();

            _response.errorCode = errorCode;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(VERIFY_CERTIFICATE_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextAddDomainReliabilityContextForTestingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin origin;
        public org.chromium.url.mojom.Url uploadUrl;

        private NetworkContextAddDomainReliabilityContextForTestingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextAddDomainReliabilityContextForTestingParams() {
            this(0);
        }

        public static NetworkContextAddDomainReliabilityContextForTestingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextAddDomainReliabilityContextForTestingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextAddDomainReliabilityContextForTestingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextAddDomainReliabilityContextForTestingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextAddDomainReliabilityContextForTestingParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.uploadUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.origin, 8, false);

            encoder0.encode(this.uploadUrl, 16, false);
        }
    }


    static final class NetworkContextAddDomainReliabilityContextForTestingResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextAddDomainReliabilityContextForTestingResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextAddDomainReliabilityContextForTestingResponseParams() {
            this(0);
        }

        public static NetworkContextAddDomainReliabilityContextForTestingResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextAddDomainReliabilityContextForTestingResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextAddDomainReliabilityContextForTestingResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextAddDomainReliabilityContextForTestingResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextAddDomainReliabilityContextForTestingResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextAddDomainReliabilityContextForTestingResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.AddDomainReliabilityContextForTesting_Response mCallback;

        NetworkContextAddDomainReliabilityContextForTestingResponseParamsForwardToCallback(NetworkContext.AddDomainReliabilityContextForTesting_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ADD_DOMAIN_RELIABILITY_CONTEXT_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextAddDomainReliabilityContextForTestingResponseParamsProxyToResponder implements NetworkContext.AddDomainReliabilityContextForTesting_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextAddDomainReliabilityContextForTestingResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextAddDomainReliabilityContextForTestingResponseParams _response = new NetworkContextAddDomainReliabilityContextForTestingResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(ADD_DOMAIN_RELIABILITY_CONTEXT_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextForceDomainReliabilityUploadsForTestingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextForceDomainReliabilityUploadsForTestingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextForceDomainReliabilityUploadsForTestingParams() {
            this(0);
        }

        public static NetworkContextForceDomainReliabilityUploadsForTestingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextForceDomainReliabilityUploadsForTestingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextForceDomainReliabilityUploadsForTestingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextForceDomainReliabilityUploadsForTestingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextForceDomainReliabilityUploadsForTestingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextForceDomainReliabilityUploadsForTestingResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextForceDomainReliabilityUploadsForTestingResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextForceDomainReliabilityUploadsForTestingResponseParams() {
            this(0);
        }

        public static NetworkContextForceDomainReliabilityUploadsForTestingResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextForceDomainReliabilityUploadsForTestingResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextForceDomainReliabilityUploadsForTestingResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextForceDomainReliabilityUploadsForTestingResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextForceDomainReliabilityUploadsForTestingResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextForceDomainReliabilityUploadsForTestingResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.ForceDomainReliabilityUploadsForTesting_Response mCallback;

        NetworkContextForceDomainReliabilityUploadsForTestingResponseParamsForwardToCallback(NetworkContext.ForceDomainReliabilityUploadsForTesting_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(FORCE_DOMAIN_RELIABILITY_UPLOADS_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextForceDomainReliabilityUploadsForTestingResponseParamsProxyToResponder implements NetworkContext.ForceDomainReliabilityUploadsForTesting_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextForceDomainReliabilityUploadsForTestingResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextForceDomainReliabilityUploadsForTestingResponseParams _response = new NetworkContextForceDomainReliabilityUploadsForTestingResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(FORCE_DOMAIN_RELIABILITY_UPLOADS_FOR_TESTING_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextSetCtLogListAlwaysTimelyForTestingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextSetCtLogListAlwaysTimelyForTestingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetCtLogListAlwaysTimelyForTestingParams() {
            this(0);
        }

        public static NetworkContextSetCtLogListAlwaysTimelyForTestingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetCtLogListAlwaysTimelyForTestingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetCtLogListAlwaysTimelyForTestingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetCtLogListAlwaysTimelyForTestingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetCtLogListAlwaysTimelyForTestingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextSetSctAuditingModeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int mode;

        private NetworkContextSetSctAuditingModeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetSctAuditingModeParams() {
            this(0);
        }

        public static NetworkContextSetSctAuditingModeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetSctAuditingModeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetSctAuditingModeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetSctAuditingModeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetSctAuditingModeParams(elementsOrVersion);
                {

                    result.mode = decoder0.readInt(8);
                    SctAuditingMode.validate(result.mode);
                    result.mode = SctAuditingMode.toKnownValue(result.mode);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.mode, 8);
        }
    }


    static final class NetworkContextAddReportingApiObserverParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ReportingApiObserver observer;

        private NetworkContextAddReportingApiObserverParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextAddReportingApiObserverParams() {
            this(0);
        }

        public static NetworkContextAddReportingApiObserverParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextAddReportingApiObserverParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextAddReportingApiObserverParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextAddReportingApiObserverParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextAddReportingApiObserverParams(elementsOrVersion);
                {

                    result.observer = decoder0.readServiceInterface(8, false, ReportingApiObserver.MANAGER);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.observer, 8, false, ReportingApiObserver.MANAGER);
        }
    }


    static final class NetworkContextGetSharedDictionaryUsageInfoParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextGetSharedDictionaryUsageInfoParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetSharedDictionaryUsageInfoParams() {
            this(0);
        }

        public static NetworkContextGetSharedDictionaryUsageInfoParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetSharedDictionaryUsageInfoParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetSharedDictionaryUsageInfoParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetSharedDictionaryUsageInfoParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetSharedDictionaryUsageInfoParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }


    static final class NetworkContextGetSharedDictionaryUsageInfoResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SharedDictionaryUsageInfo[] usageInfo;

        private NetworkContextGetSharedDictionaryUsageInfoResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetSharedDictionaryUsageInfoResponseParams() {
            this(0);
        }

        public static NetworkContextGetSharedDictionaryUsageInfoResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetSharedDictionaryUsageInfoResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetSharedDictionaryUsageInfoResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetSharedDictionaryUsageInfoResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetSharedDictionaryUsageInfoResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.usageInfo = new SharedDictionaryUsageInfo[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.usageInfo[i1] = SharedDictionaryUsageInfo.decode(decoder2);
                        }
                    }
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            if (this.usageInfo == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.usageInfo.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.usageInfo.length; ++i0) {

                    encoder1.encode(this.usageInfo[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NetworkContextGetSharedDictionaryUsageInfoResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.GetSharedDictionaryUsageInfo_Response mCallback;

        NetworkContextGetSharedDictionaryUsageInfoResponseParamsForwardToCallback(NetworkContext.GetSharedDictionaryUsageInfo_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_SHARED_DICTIONARY_USAGE_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextGetSharedDictionaryUsageInfoResponseParams response = NetworkContextGetSharedDictionaryUsageInfoResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.usageInfo);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextGetSharedDictionaryUsageInfoResponseParamsProxyToResponder implements NetworkContext.GetSharedDictionaryUsageInfo_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextGetSharedDictionaryUsageInfoResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(SharedDictionaryUsageInfo[] usageInfo) {
            NetworkContextGetSharedDictionaryUsageInfoResponseParams _response = new NetworkContextGetSharedDictionaryUsageInfoResponseParams();

            _response.usageInfo = usageInfo;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(GET_SHARED_DICTIONARY_USAGE_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextGetSharedDictionaryInfoParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SharedDictionaryIsolationKey isolationKey;

        private NetworkContextGetSharedDictionaryInfoParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetSharedDictionaryInfoParams() {
            this(0);
        }

        public static NetworkContextGetSharedDictionaryInfoParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetSharedDictionaryInfoParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetSharedDictionaryInfoParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetSharedDictionaryInfoParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetSharedDictionaryInfoParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.isolationKey = SharedDictionaryIsolationKey.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.isolationKey, 8, false);
        }
    }


    static final class NetworkContextGetSharedDictionaryInfoResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SharedDictionaryInfo[] dictionaries;

        private NetworkContextGetSharedDictionaryInfoResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetSharedDictionaryInfoResponseParams() {
            this(0);
        }

        public static NetworkContextGetSharedDictionaryInfoResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetSharedDictionaryInfoResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetSharedDictionaryInfoResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetSharedDictionaryInfoResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetSharedDictionaryInfoResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.dictionaries = new SharedDictionaryInfo[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.dictionaries[i1] = SharedDictionaryInfo.decode(decoder2);
                        }
                    }
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            if (this.dictionaries == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.dictionaries.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.dictionaries.length; ++i0) {

                    encoder1.encode(this.dictionaries[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NetworkContextGetSharedDictionaryInfoResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.GetSharedDictionaryInfo_Response mCallback;

        NetworkContextGetSharedDictionaryInfoResponseParamsForwardToCallback(NetworkContext.GetSharedDictionaryInfo_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_SHARED_DICTIONARY_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextGetSharedDictionaryInfoResponseParams response = NetworkContextGetSharedDictionaryInfoResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.dictionaries);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextGetSharedDictionaryInfoResponseParamsProxyToResponder implements NetworkContext.GetSharedDictionaryInfo_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextGetSharedDictionaryInfoResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(SharedDictionaryInfo[] dictionaries) {
            NetworkContextGetSharedDictionaryInfoResponseParams _response = new NetworkContextGetSharedDictionaryInfoResponseParams();

            _response.dictionaries = dictionaries;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(GET_SHARED_DICTIONARY_INFO_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextGetSharedDictionaryOriginsBetweenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.Time startTime;
        public org.chromium.mojo_base.mojom.Time endTime;

        private NetworkContextGetSharedDictionaryOriginsBetweenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetSharedDictionaryOriginsBetweenParams() {
            this(0);
        }

        public static NetworkContextGetSharedDictionaryOriginsBetweenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetSharedDictionaryOriginsBetweenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetSharedDictionaryOriginsBetweenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetSharedDictionaryOriginsBetweenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetSharedDictionaryOriginsBetweenParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.startTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.endTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.startTime, 8, false);

            encoder0.encode(this.endTime, 16, false);
        }
    }


    static final class NetworkContextGetSharedDictionaryOriginsBetweenResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin[] origins;

        private NetworkContextGetSharedDictionaryOriginsBetweenResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextGetSharedDictionaryOriginsBetweenResponseParams() {
            this(0);
        }

        public static NetworkContextGetSharedDictionaryOriginsBetweenResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextGetSharedDictionaryOriginsBetweenResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextGetSharedDictionaryOriginsBetweenResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextGetSharedDictionaryOriginsBetweenResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextGetSharedDictionaryOriginsBetweenResponseParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.origins = new org.chromium.url.internal.mojom.Origin[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {

                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.origins[i1] = org.chromium.url.internal.mojom.Origin.decode(decoder2);
                        }
                    }
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            if (this.origins == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.origins.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.origins.length; ++i0) {

                    encoder1.encode(this.origins[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NetworkContextGetSharedDictionaryOriginsBetweenResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContext.GetSharedDictionaryOriginsBetween_Response mCallback;

        NetworkContextGetSharedDictionaryOriginsBetweenResponseParamsForwardToCallback(NetworkContext.GetSharedDictionaryOriginsBetween_Response callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader = message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_SHARED_DICTIONARY_ORIGINS_BETWEEN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextGetSharedDictionaryOriginsBetweenResponseParams response = NetworkContextGetSharedDictionaryOriginsBetweenResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.origins);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextGetSharedDictionaryOriginsBetweenResponseParamsProxyToResponder implements NetworkContext.GetSharedDictionaryOriginsBetween_Response {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextGetSharedDictionaryOriginsBetweenResponseParamsProxyToResponder(org.chromium.mojo.system.Core core, org.chromium.mojo.bindings.MessageReceiver messageReceiver, long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.url.internal.mojom.Origin[] origins) {
            NetworkContextGetSharedDictionaryOriginsBetweenResponseParams _response = new NetworkContextGetSharedDictionaryOriginsBetweenResponseParams();

            _response.origins = origins;

            org.chromium.mojo.bindings.ServiceMessage _message = _response.serializeWithHeader(mCore, new org.chromium.mojo.bindings.MessageHeader(GET_SHARED_DICTIONARY_ORIGINS_BETWEEN_ORDINAL, org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG, mRequestId));
            mMessageReceiver.accept(_message);
        }
    }


    static final class NetworkContextSetSharedDictionaryCacheMaxSizeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long cacheMaxSize;

        private NetworkContextSetSharedDictionaryCacheMaxSizeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetSharedDictionaryCacheMaxSizeParams() {
            this(0);
        }

        public static NetworkContextSetSharedDictionaryCacheMaxSizeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetSharedDictionaryCacheMaxSizeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetSharedDictionaryCacheMaxSizeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetSharedDictionaryCacheMaxSizeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetSharedDictionaryCacheMaxSizeParams(elementsOrVersion);
                {

                    result.cacheMaxSize = decoder0.readLong(8);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.cacheMaxSize, 8);
        }
    }


    static final class NetworkContextResourceSchedulerClientVisibilityChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken clientToken;
        public boolean visible;

        private NetworkContextResourceSchedulerClientVisibilityChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextResourceSchedulerClientVisibilityChangedParams() {
            this(0);
        }

        public static NetworkContextResourceSchedulerClientVisibilityChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextResourceSchedulerClientVisibilityChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextResourceSchedulerClientVisibilityChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextResourceSchedulerClientVisibilityChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextResourceSchedulerClientVisibilityChangedParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.clientToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }
                {

                    result.visible = decoder0.readBoolean(16, 0);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.clientToken, 8, false);

            encoder0.encode(this.visible, 16, 0);
        }
    }


    static final class NetworkContextFlushCachedClientCertIfNeededParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public HostPortPair host;
        public X509Certificate certificate;

        private NetworkContextFlushCachedClientCertIfNeededParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextFlushCachedClientCertIfNeededParams() {
            this(0);
        }

        public static NetworkContextFlushCachedClientCertIfNeededParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextFlushCachedClientCertIfNeededParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextFlushCachedClientCertIfNeededParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextFlushCachedClientCertIfNeededParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextFlushCachedClientCertIfNeededParams(elementsOrVersion);
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.host = HostPortPair.decode(decoder1);
                }
                {

                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.certificate = X509Certificate.decode(decoder1);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.host, 8, false);

            encoder0.encode(this.certificate, 16, false);
        }
    }


    static final class NetworkContextSetCookieDeprecationLabelParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[]{new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String label;

        private NetworkContextSetCookieDeprecationLabelParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextSetCookieDeprecationLabelParams() {
            this(0);
        }

        public static NetworkContextSetCookieDeprecationLabelParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextSetCookieDeprecationLabelParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextSetCookieDeprecationLabelParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextSetCookieDeprecationLabelParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextSetCookieDeprecationLabelParams(elementsOrVersion);
                {

                    result.label = decoder0.readString(8, true);
                }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);

            encoder0.encode(this.label, 8, true);
        }
    }


}
