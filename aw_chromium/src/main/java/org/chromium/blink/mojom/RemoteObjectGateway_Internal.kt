// RemoteObjectGateway_Internal.java is auto generated by mojom_bindings_generator.py, do not edit
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/remote_objects/remote_objects.mojom
//
package org.chromium.blink.mojom

import org.chromium.mojo.bindings.DataHeader
import org.chromium.mojo.bindings.Decoder
import org.chromium.mojo.bindings.DeserializationException
import org.chromium.mojo.bindings.Encoder
import org.chromium.mojo.bindings.Interface
import org.chromium.mojo.bindings.Interface.AbstractProxy
import org.chromium.mojo.bindings.Interface.Manager
import org.chromium.mojo.bindings.InterfaceControlMessagesHelper
import org.chromium.mojo.bindings.Message
import org.chromium.mojo.bindings.MessageHeader
import org.chromium.mojo.bindings.MessageReceiver
import org.chromium.mojo.bindings.MessageReceiverWithResponder
import org.chromium.mojo.bindings.Struct
import org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
import org.chromium.mojo.system.Core
import java.nio.ByteBuffer

internal object RemoteObjectGateway_Internal {
    val MANAGER: Manager<RemoteObjectGateway?, RemoteObjectGateway.Proxy?> =
        object : Manager<RemoteObjectGateway?, RemoteObjectGateway.Proxy?>() {
            override fun getName(): String {
                return "blink.mojom.RemoteObjectGateway"
            }

            override fun getVersion(): Int {
                return 0
            }

            public override fun buildProxy(
                core: Core,
                messageReceiver: MessageReceiverWithResponder
            ): Proxy {
                return Proxy(core, messageReceiver)
            }

            override fun buildStub(
                core: Core?,
                impl: RemoteObjectGateway?
            ): Interface.Stub<RemoteObjectGateway?> {
                return Stub(core, impl)
            }

            public override fun buildArray(size: Int): Array<RemoteObjectGateway?> {
                return arrayOfNulls(size)
            }
        }
    private const val ADD_NAMED_OBJECT_ORDINAL = 0
    private const val REMOVE_NAMED_OBJECT_ORDINAL = 1

    internal class Proxy(
        core: Core?,
        messageReceiver: MessageReceiverWithResponder?
    ) : AbstractProxy(core, messageReceiver), RemoteObjectGateway.Proxy {
        override fun addNamedObject(
            name: String?, objectId: Int
        ) {
            val _message = RemoteObjectGatewayAddNamedObjectParams()
            _message.name = name
            _message.objectId = objectId
            proxyHandler.messageReceiver.accept(
                _message.serializeWithHeader(
                    proxyHandler.core,
                    MessageHeader(ADD_NAMED_OBJECT_ORDINAL)
                )
            )
        }

        override fun removeNamedObject(
            name: String?
        ) {
            val _message = RemoteObjectGatewayRemoveNamedObjectParams()
            _message.name = name
            proxyHandler.messageReceiver.accept(
                _message.serializeWithHeader(
                    proxyHandler.core,
                    MessageHeader(REMOVE_NAMED_OBJECT_ORDINAL)
                )
            )
        }
    }

    internal class Stub(core: Core?, impl: RemoteObjectGateway?) :
        Interface.Stub<RemoteObjectGateway?>(core, impl) {
        override fun accept(message: Message): Boolean {
            return try {
                val messageWithHeader = message.asServiceMessage()
                val header = messageWithHeader.header
                var flags = MessageHeader.NO_FLAG
                if (header.hasFlag(MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags or MessageHeader.MESSAGE_IS_SYNC_FLAG
                }
                if (!header.validateHeader(flags)) {
                    return false
                }
                when (header.type) {
                    InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID -> InterfaceControlMessagesHelper.handleRunOrClosePipe(
                        MANAGER, messageWithHeader
                    )

                    ADD_NAMED_OBJECT_ORDINAL -> {
                        val data =
                            RemoteObjectGatewayAddNamedObjectParams.deserialize(messageWithHeader.payload)
                        impl!!.addNamedObject(data!!.name, data.objectId)
                        true
                    }

                    REMOVE_NAMED_OBJECT_ORDINAL -> {
                        val data =
                            RemoteObjectGatewayRemoveNamedObjectParams.deserialize(messageWithHeader.payload)
                        impl!!.removeNamedObject(data!!.name)
                        true
                    }

                    else -> false
                }
            } catch (e: DeserializationException) {
                System.err.println(e)
                false
            }
        }

        override fun acceptWithResponder(message: Message, receiver: MessageReceiver): Boolean {
            return try {
                val messageWithHeader = message.asServiceMessage()
                val header = messageWithHeader.header
                var flags = MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG
                if (header.hasFlag(MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags or MessageHeader.MESSAGE_IS_SYNC_FLAG
                }
                if (!header.validateHeader(flags)) {
                    return false
                }
                if (header.type == InterfaceControlMessagesConstants.RUN_MESSAGE_ID) {
                    InterfaceControlMessagesHelper.handleRun(
                        core, MANAGER, messageWithHeader, receiver
                    )
                } else false
            } catch (e: DeserializationException) {
                System.err.println(e)
                false
            }
        }
    }

    internal class RemoteObjectGatewayAddNamedObjectParams private constructor(version: Int) :
        Struct(
            STRUCT_SIZE, version
        ) {
        var name: String? = null
        var objectId = 0

        constructor() : this(0)

        override fun encode(encoder: Encoder) {
            val encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO)
            encoder0.encode(name, 8, false)
            encoder0.encode(objectId, 16)
        }

        companion object {
            private const val STRUCT_SIZE = 24
            private val VERSION_ARRAY = arrayOf(DataHeader(24, 0))
            private val DEFAULT_STRUCT_INFO = VERSION_ARRAY[0]
            fun deserialize(message: Message?): RemoteObjectGatewayAddNamedObjectParams? {
                return decode(Decoder(message))
            }

            /**
             * Similar to the method above, but deserializes from a |ByteBuffer| instance.
             *
             * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
             */
            fun deserialize(data: ByteBuffer?): RemoteObjectGatewayAddNamedObjectParams? {
                return deserialize(
                    Message(
                        data, ArrayList()
                    )
                )
            }

            fun decode(decoder0: Decoder?): RemoteObjectGatewayAddNamedObjectParams? {
                if (decoder0 == null) {
                    return null
                }
                decoder0.increaseStackDepth()
                val result: RemoteObjectGatewayAddNamedObjectParams
                try {
                    val mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY)
                    val elementsOrVersion = mainDataHeader.elementsOrVersion
                    result = RemoteObjectGatewayAddNamedObjectParams(elementsOrVersion)
                    run { result.name = decoder0.readString(8, false) }
                    run { result.objectId = decoder0.readInt(16) }
                } finally {
                    decoder0.decreaseStackDepth()
                }
                return result
            }
        }
    }

    internal class RemoteObjectGatewayRemoveNamedObjectParams private constructor(version: Int) :
        Struct(
            STRUCT_SIZE, version
        ) {
        var name: String? = null

        constructor() : this(0)

        override fun encode(encoder: Encoder) {
            val encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO)
            encoder0.encode(name, 8, false)
        }

        companion object {
            private const val STRUCT_SIZE = 16
            private val VERSION_ARRAY = arrayOf(DataHeader(16, 0))
            private val DEFAULT_STRUCT_INFO = VERSION_ARRAY[0]
            fun deserialize(message: Message?): RemoteObjectGatewayRemoveNamedObjectParams? {
                return decode(Decoder(message))
            }

            /**
             * Similar to the method above, but deserializes from a |ByteBuffer| instance.
             *
             * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
             */
            fun deserialize(data: ByteBuffer?): RemoteObjectGatewayRemoveNamedObjectParams? {
                return deserialize(
                    Message(
                        data, ArrayList()
                    )
                )
            }

            fun decode(decoder0: Decoder?): RemoteObjectGatewayRemoveNamedObjectParams? {
                if (decoder0 == null) {
                    return null
                }
                decoder0.increaseStackDepth()
                val result: RemoteObjectGatewayRemoveNamedObjectParams
                try {
                    val mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY)
                    val elementsOrVersion = mainDataHeader.elementsOrVersion
                    result = RemoteObjectGatewayRemoveNamedObjectParams(elementsOrVersion)
                    run { result.name = decoder0.readString(8, false) }
                } finally {
                    decoder0.decreaseStackDepth()
                }
                return result
            }
        }
    }
}