// VideoEncoderMetricsProvider_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/video_encoder_metrics_provider.mojom
//

package org.chromium.media.mojom;

import androidx.annotation.IntDef;


class VideoEncoderMetricsProvider_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<VideoEncoderMetricsProvider, VideoEncoderMetricsProvider.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<VideoEncoderMetricsProvider, VideoEncoderMetricsProvider.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.VideoEncoderMetricsProvider";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, VideoEncoderMetricsProvider impl) {
            return new Stub(core, impl);
        }

        @Override
        public VideoEncoderMetricsProvider[] buildArray(int size) {
          return new VideoEncoderMetricsProvider[size];
        }
    };


    private static final int INITIALIZE_ORDINAL = 0;

    private static final int SET_ENCODED_FRAME_COUNT_ORDINAL = 1;

    private static final int SET_ERROR_ORDINAL = 2;

    private static final int COMPLETE_ORDINAL = 3;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements VideoEncoderMetricsProvider.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void initialize(
long encoderId, int encoderUseCase, int profile, org.chromium.gfx.mojom.Size encodeSize, boolean isHardwareEncoder, int svcMode) {

            VideoEncoderMetricsProviderInitializeParams _message = new VideoEncoderMetricsProviderInitializeParams();

            _message.encoderId = encoderId;

            _message.encoderUseCase = encoderUseCase;

            _message.profile = profile;

            _message.encodeSize = encodeSize;

            _message.isHardwareEncoder = isHardwareEncoder;

            _message.svcMode = svcMode;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(INITIALIZE_ORDINAL)));

        }


        @Override
        public void setEncodedFrameCount(
long encoderId, long numEncodedFrames) {

            VideoEncoderMetricsProviderSetEncodedFrameCountParams _message = new VideoEncoderMetricsProviderSetEncodedFrameCountParams();

            _message.encoderId = encoderId;

            _message.numEncodedFrames = numEncodedFrames;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_ENCODED_FRAME_COUNT_ORDINAL)));

        }


        @Override
        public void setError(
long encoderId, EncoderStatus status) {

            VideoEncoderMetricsProviderSetErrorParams _message = new VideoEncoderMetricsProviderSetErrorParams();

            _message.encoderId = encoderId;

            _message.status = status;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_ERROR_ORDINAL)));

        }


        @Override
        public void complete(
long encoderId) {

            VideoEncoderMetricsProviderCompleteParams _message = new VideoEncoderMetricsProviderCompleteParams();

            _message.encoderId = encoderId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COMPLETE_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<VideoEncoderMetricsProvider> {

        Stub(org.chromium.mojo.system.Core core, VideoEncoderMetricsProvider impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                VideoEncoderMetricsProvider_Internal.MANAGER, messageWithHeader);





                    case INITIALIZE_ORDINAL: {

                        VideoEncoderMetricsProviderInitializeParams data =
                                VideoEncoderMetricsProviderInitializeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().initialize(data.encoderId, data.encoderUseCase, data.profile, data.encodeSize, data.isHardwareEncoder, data.svcMode);
                        return true;
                    }





                    case SET_ENCODED_FRAME_COUNT_ORDINAL: {

                        VideoEncoderMetricsProviderSetEncodedFrameCountParams data =
                                VideoEncoderMetricsProviderSetEncodedFrameCountParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setEncodedFrameCount(data.encoderId, data.numEncodedFrames);
                        return true;
                    }





                    case SET_ERROR_ORDINAL: {

                        VideoEncoderMetricsProviderSetErrorParams data =
                                VideoEncoderMetricsProviderSetErrorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setError(data.encoderId, data.status);
                        return true;
                    }





                    case COMPLETE_ORDINAL: {

                        VideoEncoderMetricsProviderCompleteParams data =
                                VideoEncoderMetricsProviderCompleteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().complete(data.encoderId);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), VideoEncoderMetricsProvider_Internal.MANAGER, messageWithHeader, receiver);










                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class VideoEncoderMetricsProviderInitializeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long encoderId;
        public int encoderUseCase;
        public int profile;
        public org.chromium.gfx.mojom.Size encodeSize;
        public boolean isHardwareEncoder;
        public int svcMode;

        private VideoEncoderMetricsProviderInitializeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoEncoderMetricsProviderInitializeParams() {
            this(0);
        }

        public static VideoEncoderMetricsProviderInitializeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoEncoderMetricsProviderInitializeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoEncoderMetricsProviderInitializeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoEncoderMetricsProviderInitializeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoEncoderMetricsProviderInitializeParams(elementsOrVersion);
                    {
                        
                    result.encoderId = decoder0.readLong(8);
                    }
                    {
                        
                    result.encoderUseCase = decoder0.readInt(16);
                        VideoEncoderUseCase.validate(result.encoderUseCase);
                        result.encoderUseCase = VideoEncoderUseCase.toKnownValue(result.encoderUseCase);
                    }
                    {
                        
                    result.profile = decoder0.readInt(20);
                        VideoCodecProfile.validate(result.profile);
                        result.profile = VideoCodecProfile.toKnownValue(result.profile);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.encodeSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }
                    {
                        
                    result.isHardwareEncoder = decoder0.readBoolean(32, 0);
                    }
                    {
                        
                    result.svcMode = decoder0.readInt(36);
                        SvcScalabilityMode.validate(result.svcMode);
                        result.svcMode = SvcScalabilityMode.toKnownValue(result.svcMode);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.encoderId, 8);
            
            encoder0.encode(this.encoderUseCase, 16);
            
            encoder0.encode(this.profile, 20);
            
            encoder0.encode(this.encodeSize, 24, false);
            
            encoder0.encode(this.isHardwareEncoder, 32, 0);
            
            encoder0.encode(this.svcMode, 36);
        }
    }



    
    static final class VideoEncoderMetricsProviderSetEncodedFrameCountParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long encoderId;
        public long numEncodedFrames;

        private VideoEncoderMetricsProviderSetEncodedFrameCountParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoEncoderMetricsProviderSetEncodedFrameCountParams() {
            this(0);
        }

        public static VideoEncoderMetricsProviderSetEncodedFrameCountParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoEncoderMetricsProviderSetEncodedFrameCountParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoEncoderMetricsProviderSetEncodedFrameCountParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoEncoderMetricsProviderSetEncodedFrameCountParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoEncoderMetricsProviderSetEncodedFrameCountParams(elementsOrVersion);
                    {
                        
                    result.encoderId = decoder0.readLong(8);
                    }
                    {
                        
                    result.numEncodedFrames = decoder0.readLong(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.encoderId, 8);
            
            encoder0.encode(this.numEncodedFrames, 16);
        }
    }



    
    static final class VideoEncoderMetricsProviderSetErrorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long encoderId;
        public EncoderStatus status;

        private VideoEncoderMetricsProviderSetErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoEncoderMetricsProviderSetErrorParams() {
            this(0);
        }

        public static VideoEncoderMetricsProviderSetErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoEncoderMetricsProviderSetErrorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoEncoderMetricsProviderSetErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoEncoderMetricsProviderSetErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoEncoderMetricsProviderSetErrorParams(elementsOrVersion);
                    {
                        
                    result.encoderId = decoder0.readLong(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.status = EncoderStatus.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.encoderId, 8);
            
            encoder0.encode(this.status, 16, false);
        }
    }



    
    static final class VideoEncoderMetricsProviderCompleteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long encoderId;

        private VideoEncoderMetricsProviderCompleteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public VideoEncoderMetricsProviderCompleteParams() {
            this(0);
        }

        public static VideoEncoderMetricsProviderCompleteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static VideoEncoderMetricsProviderCompleteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static VideoEncoderMetricsProviderCompleteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            VideoEncoderMetricsProviderCompleteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new VideoEncoderMetricsProviderCompleteParams(elementsOrVersion);
                    {
                        
                    result.encoderId = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.encoderId, 8);
        }
    }



}
