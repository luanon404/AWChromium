// RemoteObjectGatewayFactory_Internal.java is auto generated by mojom_bindings_generator.py, do not edit
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/remote_objects/remote_objects.mojom
//
package org.chromium.blink.mojom

import org.chromium.mojo.bindings.DataHeader
import org.chromium.mojo.bindings.Decoder
import org.chromium.mojo.bindings.DeserializationException
import org.chromium.mojo.bindings.Encoder
import org.chromium.mojo.bindings.Interface
import org.chromium.mojo.bindings.Interface.AbstractProxy
import org.chromium.mojo.bindings.Interface.Manager
import org.chromium.mojo.bindings.InterfaceControlMessagesHelper
import org.chromium.mojo.bindings.InterfaceRequest
import org.chromium.mojo.bindings.Message
import org.chromium.mojo.bindings.MessageHeader
import org.chromium.mojo.bindings.MessageReceiver
import org.chromium.mojo.bindings.MessageReceiverWithResponder
import org.chromium.mojo.bindings.Struct
import org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants
import org.chromium.mojo.system.Core
import java.nio.ByteBuffer

internal object RemoteObjectGatewayFactoryInternal {
    val MANAGER: Manager<RemoteObjectGatewayFactory?, RemoteObjectGatewayFactory.Proxy?> =
        object : Manager<RemoteObjectGatewayFactory?, RemoteObjectGatewayFactory.Proxy?>() {
            override fun getName(): String {
                return "blink.mojom.RemoteObjectGatewayFactory"
            }

            override fun getVersion(): Int {
                return 0
            }

            public override fun buildProxy(
                core: Core,
                messageReceiver: MessageReceiverWithResponder
            ): Proxy {
                return Proxy(core, messageReceiver)
            }

            override fun buildStub(
                core: Core?,
                impl: RemoteObjectGatewayFactory?
            ): Interface.Stub<RemoteObjectGatewayFactory?> {
                return Stub(core, impl)
            }

            public override fun buildArray(size: Int): Array<RemoteObjectGatewayFactory?> {
                return arrayOfNulls(size)
            }
        }
    private const val CREATE_REMOTE_OBJECT_GATEWAY_ORDINAL = 0

    internal class Proxy(
        core: Core?,
        messageReceiver: MessageReceiverWithResponder?
    ) : AbstractProxy(core, messageReceiver), RemoteObjectGatewayFactory.Proxy {
        override fun createRemoteObjectGateway(
            host: RemoteObjectHost?, gateway: InterfaceRequest<RemoteObjectGateway>?
        ) {
            val _message = RemoteObjectGatewayFactoryCreateRemoteObjectGatewayParams()
            _message.host = host
            _message.gateway = gateway
            proxyHandler.messageReceiver.accept(
                _message.serializeWithHeader(
                    proxyHandler.core,
                    MessageHeader(CREATE_REMOTE_OBJECT_GATEWAY_ORDINAL)
                )
            )
        }
    }

    internal class Stub(core: Core?, impl: RemoteObjectGatewayFactory?) :
        Interface.Stub<RemoteObjectGatewayFactory?>(core, impl) {
        override fun accept(message: Message): Boolean {
            return try {
                val messageWithHeader = message.asServiceMessage()
                val header = messageWithHeader.header
                var flags = MessageHeader.NO_FLAG
                if (header.hasFlag(MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags or MessageHeader.MESSAGE_IS_SYNC_FLAG
                }
                if (!header.validateHeader(flags)) {
                    return false
                }
                when (header.type) {
                    InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID -> InterfaceControlMessagesHelper.handleRunOrClosePipe(
                        MANAGER, messageWithHeader
                    )

                    CREATE_REMOTE_OBJECT_GATEWAY_ORDINAL -> {
                        val data =
                            RemoteObjectGatewayFactoryCreateRemoteObjectGatewayParams.deserialize(
                                messageWithHeader.payload
                            )
                        impl!!.createRemoteObjectGateway(data!!.host, data.gateway)
                        true
                    }

                    else -> false
                }
            } catch (e: DeserializationException) {
                System.err.println(e)
                false
            }
        }

        override fun acceptWithResponder(message: Message, receiver: MessageReceiver): Boolean {
            return try {
                val messageWithHeader = message.asServiceMessage()
                val header = messageWithHeader.header
                var flags = MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG
                if (header.hasFlag(MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags or MessageHeader.MESSAGE_IS_SYNC_FLAG
                }
                if (!header.validateHeader(flags)) {
                    return false
                }
                if (header.type == InterfaceControlMessagesConstants.RUN_MESSAGE_ID) {
                    InterfaceControlMessagesHelper.handleRun(
                        core, MANAGER, messageWithHeader, receiver
                    )
                } else false
            } catch (e: DeserializationException) {
                System.err.println(e)
                false
            }
        }
    }

    internal class RemoteObjectGatewayFactoryCreateRemoteObjectGatewayParams private constructor(
        version: Int
    ) : Struct(
        STRUCT_SIZE, version
    ) {
        var host: RemoteObjectHost? = null
        var gateway: InterfaceRequest<RemoteObjectGateway>? = null

        constructor() : this(0)

        override fun encode(encoder: Encoder) {
            val encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO)
            encoder0.encode<RemoteObjectHost?>(host, 8, false, RemoteObjectHost.MANAGER)
            encoder0.encode(gateway, 16, false)
        }

        companion object {
            private const val STRUCT_SIZE = 24
            private val VERSION_ARRAY = arrayOf(DataHeader(24, 0))
            private val DEFAULT_STRUCT_INFO = VERSION_ARRAY[0]
            fun deserialize(message: Message?): RemoteObjectGatewayFactoryCreateRemoteObjectGatewayParams? {
                return decode(Decoder(message))
            }

            /**
             * Similar to the method above, but deserializes from a |ByteBuffer| instance.
             *
             * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
             */
            fun deserialize(data: ByteBuffer?): RemoteObjectGatewayFactoryCreateRemoteObjectGatewayParams? {
                return deserialize(
                    Message(
                        data, ArrayList()
                    )
                )
            }

            fun decode(decoder0: Decoder?): RemoteObjectGatewayFactoryCreateRemoteObjectGatewayParams? {
                if (decoder0 == null) {
                    return null
                }
                decoder0.increaseStackDepth()
                val result: RemoteObjectGatewayFactoryCreateRemoteObjectGatewayParams
                try {
                    val mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY)
                    val elementsOrVersion = mainDataHeader.elementsOrVersion
                    result =
                        RemoteObjectGatewayFactoryCreateRemoteObjectGatewayParams(elementsOrVersion)
                    run {
                        result.host = decoder0.readServiceInterface<RemoteObjectHost.Proxy?>(
                            8,
                            false,
                            RemoteObjectHost.MANAGER
                        )
                    }
                    run { result.gateway = decoder0.readInterfaceRequest(16, false) }
                } finally {
                    decoder0.decreaseStackDepth()
                }
                return result
            }
        }
    }
}