//
// This file was generated by third_party/jni_zero/jni_generator.py
//
package org.chromium.device.sensors;

import org.jni_zero.CheckDiscard;
import org.jni_zero.JniStaticTestMocker;
import org.jni_zero.NativeLibraryLoadedStatus;
import org.jni_zero.GEN_JNI;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import androidx.annotation.GuardedBy;
import org.jni_zero.CalledByNative;
import org.jni_zero.CalledByNativeForTesting;
import org.jni_zero.JNINamespace;
import org.jni_zero.NativeMethods;
import org.chromium.base.Log;
import org.chromium.device.mojom.ReportingMode;
import org.chromium.device.mojom.SensorType;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

@CheckDiscard("crbug.com/993421")
class PlatformSensorJni implements PlatformSensor.Natives {
  private static PlatformSensor.Natives testInstance;

  public static final JniStaticTestMocker<PlatformSensor.Natives> TEST_HOOKS =
      new JniStaticTestMocker<PlatformSensor.Natives>() {
    @Override
    public void setInstanceForTesting(PlatformSensor.Natives instance) {
      if (!GEN_JNI.TESTING_ENABLED) {
        throw new RuntimeException(
            "Tried to set a JNI mock when mocks aren't enabled!");
      }
      testInstance = instance;
    }
  };

  @Override
  public void notifyPlatformSensorError(long nativePlatformSensorAndroid, PlatformSensor caller) {
    GEN_JNI.org_chromium_device_sensors_PlatformSensor_notifyPlatformSensorError(nativePlatformSensorAndroid, caller);
  }

  @Override
  public void updatePlatformSensorReading(long nativePlatformSensorAndroid, PlatformSensor caller, double timestamp, double value1, double value2, double value3, double value4) {
    GEN_JNI.org_chromium_device_sensors_PlatformSensor_updatePlatformSensorReading(nativePlatformSensorAndroid, caller, timestamp, value1, value2, value3, value4);
  }

  public static PlatformSensor.Natives get() {
    if (GEN_JNI.TESTING_ENABLED) {
      if (testInstance != null) {
        return testInstance;
      }
      if (GEN_JNI.REQUIRE_MOCK) {
        throw new UnsupportedOperationException(
            "No mock found for the native implementation of PlatformSensor.Natives. "
            + "The current configuration requires implementations be mocked.");
      }
    }
    NativeLibraryLoadedStatus.checkLoaded();
    return new PlatformSensorJni();
  }
}
