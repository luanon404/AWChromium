// HttpCacheBackendOpenFileFlags.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/http_cache_backend_file_operations.mojom
//

package org.chromium.network.mojom;

import androidx.annotation.IntDef;

public final class HttpCacheBackendOpenFileFlags {
    private static final boolean IS_EXTENSIBLE = false;

    @IntDef({HttpCacheBackendOpenFileFlags.OPEN_AND_READ, HttpCacheBackendOpenFileFlags.CREATE_AND_WRITE, HttpCacheBackendOpenFileFlags.OPEN_READ_WRITE_WIN_SHARE_DELETE, HttpCacheBackendOpenFileFlags.CREATE_READ_WRITE_WIN_SHARE_DELETE, HttpCacheBackendOpenFileFlags.CREATE_ALWAYS_WRITE_WIN_SHARE_DELETE, HttpCacheBackendOpenFileFlags.OPEN_READ_WIN_SHARE_DELETE_WIN_SEQUENTIAL_SCAN})
    public @interface EnumType {
    }

    public static final int OPEN_AND_READ = 33;
    public static final int CREATE_AND_WRITE = 66;
    public static final int OPEN_READ_WRITE_WIN_SHARE_DELETE = 32865;
    public static final int CREATE_READ_WRITE_WIN_SHARE_DELETE = 32866;
    public static final int CREATE_ALWAYS_WRITE_WIN_SHARE_DELETE = 32840;
    public static final int OPEN_READ_WIN_SHARE_DELETE_WIN_SEQUENTIAL_SCAN = 557089;
    public static final int MIN_VALUE = 33;
    public static final int MAX_VALUE = 557089;

    public static boolean isKnownValue(int value) {
        switch (value) {
            case 33:
            case 66:
            case 32840:
            case 32865:
            case 32866:
            case 557089:
                return true;
        }
        return false;
    }

    public static void validate(int value) {
        if (IS_EXTENSIBLE || isKnownValue(value)) return;
        throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
    }

    public static int toKnownValue(int value) {
        return value;
    }

    private HttpCacheBackendOpenFileFlags() {
    }
}