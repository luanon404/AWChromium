// LcpCriticalPathPredictorHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/lcp_critical_path_predictor/lcp_critical_path_predictor.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;


class LcpCriticalPathPredictorHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<LcpCriticalPathPredictorHost, LcpCriticalPathPredictorHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<LcpCriticalPathPredictorHost, LcpCriticalPathPredictorHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.LCPCriticalPathPredictorHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, LcpCriticalPathPredictorHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public LcpCriticalPathPredictorHost[] buildArray(int size) {
          return new LcpCriticalPathPredictorHost[size];
        }
    };


    private static final int SET_LCP_ELEMENT_LOCATOR_ORDINAL = 0;

    private static final int SET_LCP_INFLUENCER_SCRIPT_URLS_ORDINAL = 1;

    private static final int NOTIFY_FETCHED_FONT_ORDINAL = 2;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements LcpCriticalPathPredictorHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setLcpElementLocator(
org.chromium.mojo_base.mojom.ByteString lcpElementLocator) {

            LcpCriticalPathPredictorHostSetLcpElementLocatorParams _message = new LcpCriticalPathPredictorHostSetLcpElementLocatorParams();

            _message.lcpElementLocator = lcpElementLocator;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_LCP_ELEMENT_LOCATOR_ORDINAL)));

        }


        @Override
        public void setLcpInfluencerScriptUrls(
org.chromium.url.mojom.Url[] lcpInfluencerScripts) {

            LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams _message = new LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams();

            _message.lcpInfluencerScripts = lcpInfluencerScripts;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_LCP_INFLUENCER_SCRIPT_URLS_ORDINAL)));

        }


        @Override
        public void notifyFetchedFont(
org.chromium.url.mojom.Url fontUrl) {

            LcpCriticalPathPredictorHostNotifyFetchedFontParams _message = new LcpCriticalPathPredictorHostNotifyFetchedFontParams();

            _message.fontUrl = fontUrl;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(NOTIFY_FETCHED_FONT_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<LcpCriticalPathPredictorHost> {

        Stub(org.chromium.mojo.system.Core core, LcpCriticalPathPredictorHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                LcpCriticalPathPredictorHost_Internal.MANAGER, messageWithHeader);





                    case SET_LCP_ELEMENT_LOCATOR_ORDINAL: {

                        LcpCriticalPathPredictorHostSetLcpElementLocatorParams data =
                                LcpCriticalPathPredictorHostSetLcpElementLocatorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setLcpElementLocator(data.lcpElementLocator);
                        return true;
                    }





                    case SET_LCP_INFLUENCER_SCRIPT_URLS_ORDINAL: {

                        LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams data =
                                LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setLcpInfluencerScriptUrls(data.lcpInfluencerScripts);
                        return true;
                    }





                    case NOTIFY_FETCHED_FONT_ORDINAL: {

                        LcpCriticalPathPredictorHostNotifyFetchedFontParams data =
                                LcpCriticalPathPredictorHostNotifyFetchedFontParams.deserialize(messageWithHeader.getPayload());

                        getImpl().notifyFetchedFont(data.fontUrl);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), LcpCriticalPathPredictorHost_Internal.MANAGER, messageWithHeader, receiver);








                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class LcpCriticalPathPredictorHostSetLcpElementLocatorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.ByteString lcpElementLocator;

        private LcpCriticalPathPredictorHostSetLcpElementLocatorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LcpCriticalPathPredictorHostSetLcpElementLocatorParams() {
            this(0);
        }

        public static LcpCriticalPathPredictorHostSetLcpElementLocatorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LcpCriticalPathPredictorHostSetLcpElementLocatorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LcpCriticalPathPredictorHostSetLcpElementLocatorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LcpCriticalPathPredictorHostSetLcpElementLocatorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LcpCriticalPathPredictorHostSetLcpElementLocatorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.lcpElementLocator = org.chromium.mojo_base.mojom.ByteString.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.lcpElementLocator, 8, false);
        }
    }



    
    static final class LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url[] lcpInfluencerScripts;

        private LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams() {
            this(0);
        }

        public static LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LcpCriticalPathPredictorHostSetLcpInfluencerScriptUrlsParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.lcpInfluencerScripts = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.lcpInfluencerScripts[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.lcpInfluencerScripts == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.lcpInfluencerScripts.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.lcpInfluencerScripts.length; ++i0) {
                    
                    encoder1.encode(this.lcpInfluencerScripts[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class LcpCriticalPathPredictorHostNotifyFetchedFontParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url fontUrl;

        private LcpCriticalPathPredictorHostNotifyFetchedFontParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LcpCriticalPathPredictorHostNotifyFetchedFontParams() {
            this(0);
        }

        public static LcpCriticalPathPredictorHostNotifyFetchedFontParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LcpCriticalPathPredictorHostNotifyFetchedFontParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LcpCriticalPathPredictorHostNotifyFetchedFontParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LcpCriticalPathPredictorHostNotifyFetchedFontParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LcpCriticalPathPredictorHostNotifyFetchedFontParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.fontUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.fontUrl, 8, false);
        }
    }



}
