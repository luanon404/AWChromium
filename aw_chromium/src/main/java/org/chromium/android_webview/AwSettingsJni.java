//
// This file was generated by third_party/jni_zero/jni_generator.py
//
package org.chromium.android_webview;

import org.jni_zero.CheckDiscard;
import org.jni_zero.JniStaticTestMocker;
import org.jni_zero.NativeLibraryLoadedStatus;
import org.jni_zero.GEN_JNI;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.os.Process;
import android.provider.Settings;
import android.webkit.WebSettings;
import androidx.annotation.IntDef;
import org.jni_zero.CalledByNative;
import org.jni_zero.JNINamespace;
import org.jni_zero.NativeMethods;
import org.chromium.android_webview.autofill.ChromeAutocompleteSafeModeAction;
import org.chromium.android_webview.client_hints.AwUserAgentMetadata;
import org.chromium.android_webview.common.AwFeatures;
import org.chromium.android_webview.common.Lifetime;
import org.chromium.android_webview.safe_browsing.AwSafeBrowsingConfigHelper;
import org.chromium.android_webview.settings.AttributionBehavior;
import org.chromium.android_webview.settings.ForceDarkBehavior;
import org.chromium.android_webview.settings.ForceDarkMode;
import org.chromium.base.ContextUtils;
import org.chromium.base.Log;
import org.chromium.base.ThreadUtils;
import org.chromium.base.metrics.RecordHistogram;
import org.chromium.content_public.browser.WebContents;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

@CheckDiscard("crbug.com/993421")
class AwSettingsJni implements AwSettings.Natives {
  private static AwSettings.Natives testInstance;

  public static final JniStaticTestMocker<AwSettings.Natives> TEST_HOOKS =
      new JniStaticTestMocker<AwSettings.Natives>() {
    @Override
    public void setInstanceForTesting(AwSettings.Natives instance) {
      if (!GEN_JNI.TESTING_ENABLED) {
        throw new RuntimeException(
            "Tried to set a JNI mock when mocks aren't enabled!");
      }
      testInstance = instance;
    }
  };

  @Override
  public void destroy(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_destroy(nativeAwSettings, caller);
  }

  @Override
  public String getDefaultUserAgent() {
    return (String) GEN_JNI.org_chromium_android_1webview_AwSettings_getDefaultUserAgent();
  }

  @Override
  public AwUserAgentMetadata getDefaultUserAgentMetadata() {
    return (AwUserAgentMetadata) GEN_JNI.org_chromium_android_1webview_AwSettings_getDefaultUserAgentMetadata();
  }

  @Override
  public boolean getEnterpriseAuthenticationAppLinkPolicyEnabled(long nativeAwSettings, AwSettings caller) {
    return (boolean) GEN_JNI.org_chromium_android_1webview_AwSettings_getEnterpriseAuthenticationAppLinkPolicyEnabled(nativeAwSettings, caller);
  }

  @Override
  public long init(AwSettings caller, WebContents webContents) {
    return (long) GEN_JNI.org_chromium_android_1webview_AwSettings_init(caller, webContents);
  }

  @Override
  public boolean isForceDarkApplied(long nativeAwSettings, AwSettings caller) {
    return (boolean) GEN_JNI.org_chromium_android_1webview_AwSettings_isForceDarkApplied(nativeAwSettings, caller);
  }

  @Override
  public void populateWebPreferencesLocked(long nativeAwSettings, AwSettings caller, long webPrefsPtr) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_populateWebPreferencesLocked(nativeAwSettings, caller, webPrefsPtr);
  }

  @Override
  public boolean prefersDarkFromTheme(long nativeAwSettings, AwSettings caller) {
    return (boolean) GEN_JNI.org_chromium_android_1webview_AwSettings_prefersDarkFromTheme(nativeAwSettings, caller);
  }

  @Override
  public void resetScrollAndScaleState(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_resetScrollAndScaleState(nativeAwSettings, caller);
  }

  @Override
  public void setEnterpriseAuthenticationAppLinkPolicyEnabled(long nativeAwSettings, AwSettings caller, boolean enabled) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_setEnterpriseAuthenticationAppLinkPolicyEnabled(nativeAwSettings, caller, enabled);
  }

  @Override
  public void updateAllowFileAccessLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateAllowFileAccessLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateCookiePolicyLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateCookiePolicyLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateEverythingLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateEverythingLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateFormDataPreferencesLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateFormDataPreferencesLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateInitialPageScaleLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateInitialPageScaleLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateOffscreenPreRasterLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateOffscreenPreRasterLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateRendererPreferencesLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateRendererPreferencesLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateUserAgentLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateUserAgentLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateWebkitPreferencesLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateWebkitPreferencesLocked(nativeAwSettings, caller);
  }

  @Override
  public void updateWillSuppressErrorStateLocked(long nativeAwSettings, AwSettings caller) {
    GEN_JNI.org_chromium_android_1webview_AwSettings_updateWillSuppressErrorStateLocked(nativeAwSettings, caller);
  }

  @Override
  public String[] updateXRequestedWithAllowListOriginMatcher(long nativeAwSettings, String[] rules) {
    return (String[]) GEN_JNI.org_chromium_android_1webview_AwSettings_updateXRequestedWithAllowListOriginMatcher(nativeAwSettings, rules);
  }

  public static AwSettings.Natives get() {
    if (GEN_JNI.TESTING_ENABLED) {
      if (testInstance != null) {
        return testInstance;
      }
      if (GEN_JNI.REQUIRE_MOCK) {
        throw new UnsupportedOperationException(
            "No mock found for the native implementation of AwSettings.Natives. "
            + "The current configuration requires implementations be mocked.");
      }
    }
    NativeLibraryLoadedStatus.checkLoaded();
    return new AwSettingsJni();
  }
}
