// AuctionAdConfigNonSharedParams.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/interest_group/interest_group_types.mojom
//

package org.chromium.blink.mojom;

import androidx.annotation.IntDef;


public final class AuctionAdConfigNonSharedParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 208;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(208, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

    public static final class BuyerReportType {
        private static final boolean IS_EXTENSIBLE = false;
        @IntDef({

            BuyerReportType.INTEREST_GROUP_COUNT,
            BuyerReportType.BID_COUNT,
            BuyerReportType.TOTAL_GENERATE_BID_LATENCY,
            BuyerReportType.TOTAL_SIGNALS_FETCH_LATENCY})
        public @interface EnumType {}

        public static final int INTEREST_GROUP_COUNT = 0;
        public static final int BID_COUNT = 1;
        public static final int TOTAL_GENERATE_BID_LATENCY = 2;
        public static final int TOTAL_SIGNALS_FETCH_LATENCY = 3;
        public static final int MIN_VALUE = 0;
        public static final int MAX_VALUE = 3;

        public static boolean isKnownValue(int value) {
            return value >= 0 && value <= 3;
        }

        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value)) return;
            throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
        }

        public static int toKnownValue(int value) {
          return value;
        }

        private BuyerReportType() {}
    }
    public org.chromium.url.internal.mojom.Origin[] interestGroupBuyers;
    public AuctionAdConfigMaybePromiseJson auctionSignals;
    public AuctionAdConfigMaybePromiseJson sellerSignals;
    public org.chromium.mojo_base.mojom.TimeDelta sellerTimeout;
    public AuctionAdConfigMaybePromisePerBuyerSignals perBuyerSignals;
    public AuctionAdConfigMaybePromiseBuyerTimeouts buyerTimeouts;
    public AdCurrency sellerCurrency;
    public AuctionAdConfigMaybePromiseBuyerCurrencies buyerCurrencies;
    public AuctionAdConfigMaybePromiseBuyerTimeouts buyerCumulativeTimeouts;
    public java.util.Map<org.chromium.url.internal.mojom.Origin, Short> perBuyerGroupLimits;
    public java.util.Map<org.chromium.url.internal.mojom.Origin, java.util.Map<String, Double>> perBuyerPrioritySignals;
    public java.util.Map<String, Double> allBuyersPrioritySignals;
    public short allBuyersGroupLimit;
    public org.chromium.mojo_base.mojom.Uint128[] auctionReportBuyerKeys;
    public java.util.Map<Integer, AuctionReportBuyersConfig> auctionReportBuyers;
    public SellerCapabilities requiredSellerCapabilities;
    public AdSize requestedSize;
    public org.chromium.mojo_base.mojom.Uuid auctionNonce;
    public AuctionAdConfig[] componentAuctions;

    private AuctionAdConfigNonSharedParams(int version) {
        super(STRUCT_SIZE, version);
        this.allBuyersGroupLimit = (short) 65535;
    }

    public AuctionAdConfigNonSharedParams() {
        this(0);
    }

    public static AuctionAdConfigNonSharedParams deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static AuctionAdConfigNonSharedParams deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static AuctionAdConfigNonSharedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        AuctionAdConfigNonSharedParams result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new AuctionAdConfigNonSharedParams(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                if (decoder1 == null) {
                    result.interestGroupBuyers = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.interestGroupBuyers = new org.chromium.url.internal.mojom.Origin[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.interestGroupBuyers[i1] = org.chromium.url.internal.mojom.Origin.decode(decoder2);
                    }
                }
                }
                {
                    
                result.auctionSignals = AuctionAdConfigMaybePromiseJson.decode(decoder0, 16);
                }
                {
                    
                result.sellerSignals = AuctionAdConfigMaybePromiseJson.decode(decoder0, 32);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, true);
                result.sellerTimeout = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                }
                {
                    
                result.perBuyerSignals = AuctionAdConfigMaybePromisePerBuyerSignals.decode(decoder0, 56);
                }
                {
                    
                result.buyerTimeouts = AuctionAdConfigMaybePromiseBuyerTimeouts.decode(decoder0, 72);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(88, true);
                result.sellerCurrency = AdCurrency.decode(decoder1);
                }
                {
                    
                result.buyerCurrencies = AuctionAdConfigMaybePromiseBuyerCurrencies.decode(decoder0, 96);
                }
                {
                    
                result.buyerCumulativeTimeouts = AuctionAdConfigMaybePromiseBuyerTimeouts.decode(decoder0, 112);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(128, false);
                {
                    decoder1.readDataHeaderForMap();
                    org.chromium.url.internal.mojom.Origin[] keys0;
                    short[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new org.chromium.url.internal.mojom.Origin[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                keys0[i2] = org.chromium.url.internal.mojom.Origin.decode(decoder3);
                            }
                        }
                    }
                    {
                        
                        values0 = decoder1.readShorts(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, keys0.length);
                    }
                    result.perBuyerGroupLimits = new java.util.HashMap<org.chromium.url.internal.mojom.Origin, Short>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.perBuyerGroupLimits.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(136, true);
                if (decoder1 == null) {
                    result.perBuyerPrioritySignals = null;
                } else {
                    decoder1.readDataHeaderForMap();
                    org.chromium.url.internal.mojom.Origin[] keys0;
                    java.util.Map<String, Double>[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new org.chromium.url.internal.mojom.Origin[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                keys0[i2] = org.chromium.url.internal.mojom.Origin.decode(decoder3);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new java.util.Map[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                {
                                    decoder3.readDataHeaderForMap();
                                    String[] keys2;
                                    double[] values2;
                                    {
                                        
                                        org.chromium.mojo.bindings.Decoder decoder4 = decoder3.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                                        {
                                            org.chromium.mojo.bindings.DataHeader si4 = decoder4.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                                            keys2 = new String[si4.elementsOrVersion];
                                            for (int i4 = 0; i4 < si4.elementsOrVersion; ++i4) {
                                                
                                                keys2[i4] = decoder4.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i4, false);
                                            }
                                        }
                                    }
                                    {
                                        
                                        values2 = decoder3.readDoubles(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, keys2.length);
                                    }
                                    values0[i2] = new java.util.HashMap<String, Double>();
                                    for (int index2 = 0; index2 < keys2.length; ++index2) {
                                        values0[i2].put(keys2[index2],  values2[index2]);
                                    }
                                }
                            }
                        }
                    }
                    result.perBuyerPrioritySignals = new java.util.HashMap<org.chromium.url.internal.mojom.Origin, java.util.Map<String, Double>>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.perBuyerPrioritySignals.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(144, true);
                if (decoder1 == null) {
                    result.allBuyersPrioritySignals = null;
                } else {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    double[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        values0 = decoder1.readDoubles(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, keys0.length);
                    }
                    result.allBuyersPrioritySignals = new java.util.HashMap<String, Double>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.allBuyersPrioritySignals.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                result.allBuyersGroupLimit = decoder0.readShort(152);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(160, true);
                if (decoder1 == null) {
                    result.auctionReportBuyerKeys = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.auctionReportBuyerKeys = new org.chromium.mojo_base.mojom.Uint128[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.auctionReportBuyerKeys[i1] = org.chromium.mojo_base.mojom.Uint128.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(168, true);
                if (decoder1 == null) {
                    result.auctionReportBuyers = null;
                } else {
                    decoder1.readDataHeaderForMap();
                    int[] keys0;
                    AuctionReportBuyersConfig[] values0;
                    {
                        
                        keys0 = decoder1.readInts(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        {
                            for (int i2 = 0; i2 < keys0.length; ++i2) {
                                AuctionAdConfigNonSharedParams.BuyerReportType.validate(keys0[i2]);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new AuctionReportBuyersConfig[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                values0[i2] = AuctionReportBuyersConfig.decode(decoder3);
                            }
                        }
                    }
                    result.auctionReportBuyers = new java.util.HashMap<Integer, AuctionReportBuyersConfig>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.auctionReportBuyers.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(176, false);
                result.requiredSellerCapabilities = SellerCapabilities.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(184, true);
                result.requestedSize = AdSize.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(192, true);
                result.auctionNonce = org.chromium.mojo_base.mojom.Uuid.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(200, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.componentAuctions = new AuctionAdConfig[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.componentAuctions[i1] = AuctionAdConfig.decode(decoder2);
                    }
                }
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        if (this.interestGroupBuyers == null) {
            encoder0.encodeNullPointer(8, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.interestGroupBuyers.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.interestGroupBuyers.length; ++i0) {
                
                encoder1.encode(this.interestGroupBuyers[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.auctionSignals, 16, false);
        
        encoder0.encode(this.sellerSignals, 32, false);
        
        encoder0.encode(this.sellerTimeout, 48, true);
        
        encoder0.encode(this.perBuyerSignals, 56, false);
        
        encoder0.encode(this.buyerTimeouts, 72, false);
        
        encoder0.encode(this.sellerCurrency, 88, true);
        
        encoder0.encode(this.buyerCurrencies, 96, false);
        
        encoder0.encode(this.buyerCumulativeTimeouts, 112, false);
        
        if (this.perBuyerGroupLimits == null) {
            encoder0.encodeNullPointer(128, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(128);
            int size0 = this.perBuyerGroupLimits.size();
            org.chromium.url.internal.mojom.Origin[] keys0 = new org.chromium.url.internal.mojom.Origin[size0];
            short[] values0 = new short[size0];
            int index0 = 0;
            for (java.util.Map.Entry<org.chromium.url.internal.mojom.Origin, Short> entry0 : this.perBuyerGroupLimits.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            encoder1.encode(values0, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
        
        if (this.perBuyerPrioritySignals == null) {
            encoder0.encodeNullPointer(136, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(136);
            int size0 = this.perBuyerPrioritySignals.size();
            org.chromium.url.internal.mojom.Origin[] keys0 = new org.chromium.url.internal.mojom.Origin[size0];
            java.util.Map<String, Double>[] values0 = new java.util.Map[size0];
            int index0 = 0;
            for (java.util.Map.Entry<org.chromium.url.internal.mojom.Origin, java.util.Map<String, Double>> entry0 : this.perBuyerPrioritySignals.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    if (values0[i1] == null) {
                        encoder2.encodeNullPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    } else {
                        org.chromium.mojo.bindings.Encoder encoder3 = encoder2.encoderForMap(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1);
                        int size2 = values0[i1].size();
                        String[] keys2 = new String[size2];
                        double[] values2 = new double[size2];
                        int index2 = 0;
                        for (java.util.Map.Entry<String, Double> entry2 : values0[i1].entrySet()) {
                            keys2[index2] = entry2.getKey();
                            values2[index2] = entry2.getValue();
                            ++index2;
                        }
                        
                        {
                            org.chromium.mojo.bindings.Encoder encoder4 = encoder3.encodePointerArray(keys2.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            for (int i3 = 0; i3 < keys2.length; ++i3) {
                                
                                encoder4.encode(keys2[i3], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i3, false);
                            }
                        }
                        
                        encoder3.encode(values2, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }
                }
            }
        }
        
        if (this.allBuyersPrioritySignals == null) {
            encoder0.encodeNullPointer(144, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(144);
            int size0 = this.allBuyersPrioritySignals.size();
            String[] keys0 = new String[size0];
            double[] values0 = new double[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, Double> entry0 : this.allBuyersPrioritySignals.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            encoder1.encode(values0, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
        
        encoder0.encode(this.allBuyersGroupLimit, 152);
        
        if (this.auctionReportBuyerKeys == null) {
            encoder0.encodeNullPointer(160, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.auctionReportBuyerKeys.length, 160, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.auctionReportBuyerKeys.length; ++i0) {
                
                encoder1.encode(this.auctionReportBuyerKeys[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.auctionReportBuyers == null) {
            encoder0.encodeNullPointer(168, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(168);
            int size0 = this.auctionReportBuyers.size();
            int[] keys0 = new int[size0];
            AuctionReportBuyersConfig[] values0 = new AuctionReportBuyersConfig[size0];
            int index0 = 0;
            for (java.util.Map.Entry<Integer, AuctionReportBuyersConfig> entry0 : this.auctionReportBuyers.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            encoder1.encode(keys0, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        encoder0.encode(this.requiredSellerCapabilities, 176, false);
        
        encoder0.encode(this.requestedSize, 184, true);
        
        encoder0.encode(this.auctionNonce, 192, true);
        
        if (this.componentAuctions == null) {
            encoder0.encodeNullPointer(200, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.componentAuctions.length, 200, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.componentAuctions.length; ++i0) {
                
                encoder1.encode(this.componentAuctions[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
    }
}